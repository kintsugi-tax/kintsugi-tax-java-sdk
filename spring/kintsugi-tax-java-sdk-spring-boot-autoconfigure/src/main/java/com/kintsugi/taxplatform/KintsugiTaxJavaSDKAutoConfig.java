/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import com.kintsugi.taxplatform.utils.BackoffStrategy;
import com.kintsugi.taxplatform.utils.HTTPClient;
import com.kintsugi.taxplatform.utils.RetryConfig;
import com.kintsugi.taxplatform.utils.SpeakeasyHTTPClient;
import java.lang.IllegalStateException;
import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;


/**
 * Spring Boot Auto Configuration for tax-platform-sdk SDK
 * This configuration class automatically configures the tax-platform-sdk SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(SDK.class)
@EnableConfigurationProperties(KintsugiTaxJavaSDKAutoConfigProperties.class)
public class KintsugiTaxJavaSDKAutoConfig {

    /**
     * Constructor.
     */
    public KintsugiTaxJavaSDKAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "kintsugitaxjavasdk.retry-config", name = "strategy")
    public RetryConfig retryConfig(KintsugiTaxJavaSDKAutoConfigProperties properties) {
        KintsugiTaxJavaSDKAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            KintsugiTaxJavaSDKAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(KintsugiTaxJavaSDKAutoConfigProperties properties, Consumer<String> httpLogger) {
        KintsugiTaxJavaSDKAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }
    /**
     * Creates a SecuritySource bean if none exists and security properties are configured.
     *
     * @param properties the configuration properties
     * @return A configured SecuritySource instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnPropertyPrefix(prefix = "kintsugitaxjavasdk.security")
    public SecuritySource securitySource(KintsugiTaxJavaSDKAutoConfigProperties properties) {KintsugiTaxJavaSDKAutoConfigProperties.Security securityProps = properties.getSecurity();
        com.kintsugi.taxplatform.models.components.Security.Builder securityBuilder = com.kintsugi.taxplatform.models.components.Security.builder();
        boolean hasAnySecurityConfiguration = false;
        // Build APIKeyHeader security from direct properties (primitive value)
        if (securityProps.getAPIKeyHeader() != null) {
            securityBuilder.apiKeyHeader(securityProps.getAPIKeyHeader());
            hasAnySecurityConfiguration = true;
        }
        // Build CustomHeader security from direct properties (primitive value)
        if (securityProps.getCustomHeader() != null) {
            securityBuilder.customHeader(securityProps.getCustomHeader());
            hasAnySecurityConfiguration = true;
        }
        
        if (!hasAnySecurityConfiguration) {
            throw new IllegalStateException("Security configuration is present but no security options are configured. " +
                "Please configure at least one security option in your application properties.");
        }
        
        return SecuritySource.of(securityBuilder.build());
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param asyncHooks the async hooks bean
     * @param securitySource the security source bean (optional)
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            KintsugiTaxJavaSDKAutoConfigProperties properties,
            HTTPClient httpClient,
            com.kintsugi.taxplatform.utils.Hooks hooks,
            com.kintsugi.taxplatform.utils.AsyncHooks asyncHooks,
            SecuritySource securitySource,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setAsyncHooks(asyncHooks);
        sdkConfiguration.setSecuritySource(securitySource);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        sdkConfiguration.setServerIdx(properties.getServerIdx());
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured SDK instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDK sdk(SDKConfiguration sdkConfiguration) {
        return new SDK(sdkConfiguration);
    }

    /**
     * Creates an AsyncHooks bean if none exists.
     * 
     * @return A configured AsyncHooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.kintsugi.taxplatform.utils.AsyncHooks asyncHooks() {
        return new com.kintsugi.taxplatform.utils.AsyncHooks();
    }

    /**
     * Creates a ScheduledExecutorService for async retry operations if none exists.
     * 
     * @return A configured ScheduledExecutorService instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ScheduledExecutorService retryScheduler() {
        return Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.kintsugi.taxplatform.utils.Hooks hooks() {
        return new com.kintsugi.taxplatform.utils.Hooks();
    }
    /**
     * Creates a AddressValidation sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured AddressValidation instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AddressValidation addressValidation(SDK sdk) {
        return sdk.addressValidation();
    }
    /**
     * Creates a Customers sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured Customers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Customers customers(SDK sdk) {
        return sdk.customers();
    }
    /**
     * Creates a Exemptions sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured Exemptions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Exemptions exemptions(SDK sdk) {
        return sdk.exemptions();
    }
    /**
     * Creates a Filings sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured Filings instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Filings filings(SDK sdk) {
        return sdk.filings();
    }
    /**
     * Creates a Nexus sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured Nexus instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Nexus nexus(SDK sdk) {
        return sdk.nexus();
    }
    /**
     * Creates a Products sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured Products instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Products products(SDK sdk) {
        return sdk.products();
    }
    /**
     * Creates a Registrations sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured Registrations instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Registrations registrations(SDK sdk) {
        return sdk.registrations();
    }
    /**
     * Creates a Transactions sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured Transactions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Transactions transactions(SDK sdk) {
        return sdk.transactions();
    }
    /**
     * Creates a TaxEstimation sub-SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @return A configured TaxEstimation instance
     */
    @Bean
    @ConditionalOnMissingBean
    public TaxEstimation taxEstimation(SDK sdk) {
        return sdk.taxEstimation();
    }

    /**
     * Creates the async SDK bean if none exists.
     *
     * @param sdk the main SDK instance
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured AsyncSDK instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSDK asyncSDK(SDK sdk, SDKConfiguration sdkConfiguration) {
        return new AsyncSDK(sdk, sdkConfiguration);
    }
    /**
     * Creates an AsyncAddressValidation sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncAddressValidation instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAddressValidation asyncAddressValidation(AsyncSDK asyncSDK) {
        return asyncSDK.addressValidation();
    }
    /**
     * Creates an AsyncCustomers sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncCustomers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCustomers asyncCustomers(AsyncSDK asyncSDK) {
        return asyncSDK.customers();
    }
    /**
     * Creates an AsyncExemptions sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncExemptions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncExemptions asyncExemptions(AsyncSDK asyncSDK) {
        return asyncSDK.exemptions();
    }
    /**
     * Creates an AsyncFilings sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncFilings instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncFilings asyncFilings(AsyncSDK asyncSDK) {
        return asyncSDK.filings();
    }
    /**
     * Creates an AsyncNexus sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncNexus instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncNexus asyncNexus(AsyncSDK asyncSDK) {
        return asyncSDK.nexus();
    }
    /**
     * Creates an AsyncProducts sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncProducts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncProducts asyncProducts(AsyncSDK asyncSDK) {
        return asyncSDK.products();
    }
    /**
     * Creates an AsyncRegistrations sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncRegistrations instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRegistrations asyncRegistrations(AsyncSDK asyncSDK) {
        return asyncSDK.registrations();
    }
    /**
     * Creates an AsyncTransactions sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncTransactions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTransactions asyncTransactions(AsyncSDK asyncSDK) {
        return asyncSDK.transactions();
    }
    /**
     * Creates an AsyncTaxEstimation sub-SDK bean if none exists.
     *
     * @param asyncSDK the async SDK instance
     * @return A configured AsyncTaxEstimation instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTaxEstimation asyncTaxEstimation(AsyncSDK asyncSDK) {
        return asyncSDK.taxEstimation();
    }
}