/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.models.components.AddressBase;
import com.kintsugi.taxplatform.models.components.ValidationAddress;
import com.kintsugi.taxplatform.models.operations.SearchV1AddressValidationSearchPostSecurity;
import com.kintsugi.taxplatform.models.operations.async.SearchV1AddressValidationSearchPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.SearchV1AddressValidationSearchPostResponse;
import com.kintsugi.taxplatform.models.operations.async.SuggestionsV1AddressValidationSuggestionsPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.SuggestionsV1AddressValidationSuggestionsPostResponse;
import com.kintsugi.taxplatform.operations.SearchV1AddressValidationSearchPost;
import com.kintsugi.taxplatform.operations.SuggestionsV1AddressValidationSuggestionsPost;
import com.kintsugi.taxplatform.utils.Headers;
import java.util.concurrent.CompletableFuture;


public class AsyncAddressValidation {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AddressValidation syncSDK;

    AsyncAddressValidation(AddressValidation syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public AddressValidation sync() {
        return syncSDK;
    }


    /**
     * Search
     * 
     * <p>This API validates and enriches address information
     *     submitted by the user. It ensures that the address is standardized, accurate,
     *     and compliant with geographical and postal standards.
     *     The API also adds additional fields, such as county, when possible.
     * 
     * @return The async call builder
     */
    public SearchV1AddressValidationSearchPostRequestBuilder search() {
        return new SearchV1AddressValidationSearchPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Search
     * 
     * <p>This API validates and enriches address information
     *     submitted by the user. It ensures that the address is standardized, accurate,
     *     and compliant with geographical and postal standards.
     *     The API also adds additional fields, such as county, when possible.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param security The security details to use for authentication.
     * @return CompletableFuture&lt;SearchV1AddressValidationSearchPostResponse&gt; - The async response
     */
    public CompletableFuture<SearchV1AddressValidationSearchPostResponse> search(AddressBase request, SearchV1AddressValidationSearchPostSecurity security) {
        AsyncRequestOperation<AddressBase, SearchV1AddressValidationSearchPostResponse> operation
              = new SearchV1AddressValidationSearchPost.Async(sdkConfiguration, security, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Suggestions
     * 
     * <p>This API endpoint provides address suggestions based on
     *     partial input data. It helps users auto-complete and validate addresses efficiently
     *     by returning a list of suggested addresses that match the input criteria.
     *     This improves accuracy, increases speed, reduces errors,
     *     and streamlines the data entry process.
     * 
     * @return The async call builder
     */
    public SuggestionsV1AddressValidationSuggestionsPostRequestBuilder suggest() {
        return new SuggestionsV1AddressValidationSuggestionsPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Suggestions
     * 
     * <p>This API endpoint provides address suggestions based on
     *     partial input data. It helps users auto-complete and validate addresses efficiently
     *     by returning a list of suggested addresses that match the input criteria.
     *     This improves accuracy, increases speed, reduces errors,
     *     and streamlines the data entry process.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;SuggestionsV1AddressValidationSuggestionsPostResponse&gt; - The async response
     */
    public CompletableFuture<SuggestionsV1AddressValidationSuggestionsPostResponse> suggest(ValidationAddress request) {
        AsyncRequestOperation<ValidationAddress, SuggestionsV1AddressValidationSuggestionsPostResponse> operation
              = new SuggestionsV1AddressValidationSuggestionsPost.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
