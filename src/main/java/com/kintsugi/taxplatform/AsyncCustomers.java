/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.models.components.CustomerCreate;
import com.kintsugi.taxplatform.models.components.CustomerUpdate;
import com.kintsugi.taxplatform.models.components.TransactionCreate;
import com.kintsugi.taxplatform.models.operations.CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest;
import com.kintsugi.taxplatform.models.operations.GetCustomerByExternalIdV1CustomersExternalExternalIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetCustomerByIdV1CustomersCustomerIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetCustomersV1Request;
import com.kintsugi.taxplatform.models.operations.UpdateCustomerV1CustomersCustomerIdPutRequest;
import com.kintsugi.taxplatform.models.operations.async.CreateCustomerV1CustomersPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.CreateCustomerV1CustomersPostResponse;
import com.kintsugi.taxplatform.models.operations.async.CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse;
import com.kintsugi.taxplatform.models.operations.async.GetCustomerByExternalIdV1CustomersExternalExternalIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetCustomerByExternalIdV1CustomersExternalExternalIdGetResponse;
import com.kintsugi.taxplatform.models.operations.async.GetCustomerByIdV1CustomersCustomerIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetCustomerByIdV1CustomersCustomerIdGetResponse;
import com.kintsugi.taxplatform.models.operations.async.GetCustomersV1RequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetCustomersV1Response;
import com.kintsugi.taxplatform.models.operations.async.UpdateCustomerV1CustomersCustomerIdPutRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.UpdateCustomerV1CustomersCustomerIdPutResponse;
import com.kintsugi.taxplatform.operations.CreateCustomerV1CustomersPost;
import com.kintsugi.taxplatform.operations.CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPost;
import com.kintsugi.taxplatform.operations.GetCustomerByExternalIdV1CustomersExternalExternalIdGet;
import com.kintsugi.taxplatform.operations.GetCustomerByIdV1CustomersCustomerIdGet;
import com.kintsugi.taxplatform.operations.GetCustomersV1;
import com.kintsugi.taxplatform.operations.UpdateCustomerV1CustomersCustomerIdPut;
import com.kintsugi.taxplatform.utils.Headers;
import java.lang.String;
import java.util.concurrent.CompletableFuture;


public class AsyncCustomers {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncCustomersTransactions transactions;
    private final Customers syncSDK;

    AsyncCustomers(Customers syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.transactions = new AsyncCustomersTransactions(syncSDK.transactions(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncCustomersTransactions transactions() {
        return transactions;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Customers sync() {
        return syncSDK;
    }


    /**
     * Get Customers
     * 
     * <p>The Get Customers API retrieves
     * a paginated list of customers based on specified filters.
     * This API allows searching, filtering by country and state, and sorting the results.
     * 
     * @return The async call builder
     */
    public GetCustomersV1RequestBuilder get() {
        return new GetCustomersV1RequestBuilder(sdkConfiguration);
    }

    /**
     * Get Customers
     * 
     * <p>The Get Customers API retrieves
     * a paginated list of customers based on specified filters.
     * This API allows searching, filtering by country and state, and sorting the results.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetCustomersV1Response>} - The async response
     */
    public CompletableFuture<GetCustomersV1Response> get(GetCustomersV1Request request) {
        AsyncRequestOperation<GetCustomersV1Request, GetCustomersV1Response> operation
              = new GetCustomersV1.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Customer
     * 
     * <p>The Create Customer API enables the creation of a new customer record with essential
     * details like name, contact information, and address, along with optional metadata.
     * 
     * @return The async call builder
     */
    public CreateCustomerV1CustomersPostRequestBuilder create() {
        return new CreateCustomerV1CustomersPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Customer
     * 
     * <p>The Create Customer API enables the creation of a new customer record with essential
     * details like name, contact information, and address, along with optional metadata.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateCustomerV1CustomersPostResponse>} - The async response
     */
    public CompletableFuture<CreateCustomerV1CustomersPostResponse> create(CustomerCreate request) {
        AsyncRequestOperation<CustomerCreate, CreateCustomerV1CustomersPostResponse> operation
              = new CreateCustomerV1CustomersPost.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Customer By Id
     * 
     * <p>The Get Customer By ID API retrieves the details of a single customer
     * using their unique identifier. It returns customer-specific data,
     * including contact information, address, name and metadata, etc.
     * 
     * @return The async call builder
     */
    public GetCustomerByIdV1CustomersCustomerIdGetRequestBuilder getById() {
        return new GetCustomerByIdV1CustomersCustomerIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Customer By Id
     * 
     * <p>The Get Customer By ID API retrieves the details of a single customer
     * using their unique identifier. It returns customer-specific data,
     * including contact information, address, name and metadata, etc.
     * 
     * @param customerId Unique identifier of the customer
     * @return {@code CompletableFuture<GetCustomerByIdV1CustomersCustomerIdGetResponse>} - The async response
     */
    public CompletableFuture<GetCustomerByIdV1CustomersCustomerIdGetResponse> getById(String customerId) {
        GetCustomerByIdV1CustomersCustomerIdGetRequest request =
            GetCustomerByIdV1CustomersCustomerIdGetRequest
                .builder()
                .customerId(customerId)
                .build();
        AsyncRequestOperation<GetCustomerByIdV1CustomersCustomerIdGetRequest, GetCustomerByIdV1CustomersCustomerIdGetResponse> operation
              = new GetCustomerByIdV1CustomersCustomerIdGet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Customer
     * 
     * <p>The Update Customer API allows you to modify an existing customer's
     * information using their unique identifier,
     * enabling updates to their details as needed.
     * 
     * @return The async call builder
     */
    public UpdateCustomerV1CustomersCustomerIdPutRequestBuilder update() {
        return new UpdateCustomerV1CustomersCustomerIdPutRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Customer
     * 
     * <p>The Update Customer API allows you to modify an existing customer's
     * information using their unique identifier,
     * enabling updates to their details as needed.
     * 
     * @param customerId Unique identifier of the customer to be retrieved.
     * @param customerUpdate 
     * @return {@code CompletableFuture<UpdateCustomerV1CustomersCustomerIdPutResponse>} - The async response
     */
    public CompletableFuture<UpdateCustomerV1CustomersCustomerIdPutResponse> update(String customerId, CustomerUpdate customerUpdate) {
        UpdateCustomerV1CustomersCustomerIdPutRequest request =
            UpdateCustomerV1CustomersCustomerIdPutRequest
                .builder()
                .customerId(customerId)
                .customerUpdate(customerUpdate)
                .build();
        AsyncRequestOperation<UpdateCustomerV1CustomersCustomerIdPutRequest, UpdateCustomerV1CustomersCustomerIdPutResponse> operation
              = new UpdateCustomerV1CustomersCustomerIdPut.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Customer By External Id
     * 
     * <p>The Get Customer By External ID API retrieves the details of a single customer using
     * their external identifier. This endpoint is useful for accessing customer data when only
     * an external ID is available.
     * 
     * @return The async call builder
     */
    public GetCustomerByExternalIdV1CustomersExternalExternalIdGetRequestBuilder getByExternalId() {
        return new GetCustomerByExternalIdV1CustomersExternalExternalIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Customer By External Id
     * 
     * <p>The Get Customer By External ID API retrieves the details of a single customer using
     * their external identifier. This endpoint is useful for accessing customer data when only
     * an external ID is available.
     * 
     * @param externalId The external identifier of the customer to retrieve.
     * @return {@code CompletableFuture<GetCustomerByExternalIdV1CustomersExternalExternalIdGetResponse>} - The async response
     */
    public CompletableFuture<GetCustomerByExternalIdV1CustomersExternalExternalIdGetResponse> getByExternalId(String externalId) {
        GetCustomerByExternalIdV1CustomersExternalExternalIdGetRequest request =
            GetCustomerByExternalIdV1CustomersExternalExternalIdGetRequest
                .builder()
                .externalId(externalId)
                .build();
        AsyncRequestOperation<GetCustomerByExternalIdV1CustomersExternalExternalIdGetRequest, GetCustomerByExternalIdV1CustomersExternalExternalIdGetResponse> operation
              = new GetCustomerByExternalIdV1CustomersExternalExternalIdGet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Transaction By Customer Id
     * 
     * <p>Create a new transaction for a specific customer.
     * 
     * @return The async call builder
     */
    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder createTransaction() {
        return new CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Transaction By Customer Id
     * 
     * <p>Create a new transaction for a specific customer.
     * 
     * @param customerId 
     * @param transactionCreate 
     * @return {@code CompletableFuture<CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse>} - The async response
     */
    public CompletableFuture<CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse> createTransaction(String customerId, TransactionCreate transactionCreate) {
        CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest request =
            CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest
                .builder()
                .customerId(customerId)
                .transactionCreate(transactionCreate)
                .build();
        AsyncRequestOperation<CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest, CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse> operation
              = new CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPost.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
