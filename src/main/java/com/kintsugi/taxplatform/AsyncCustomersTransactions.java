/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.models.operations.GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetRequest;
import com.kintsugi.taxplatform.models.operations.async.GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetResponse;
import com.kintsugi.taxplatform.operations.GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGet;
import com.kintsugi.taxplatform.utils.Headers;
import java.lang.String;
import java.util.concurrent.CompletableFuture;


public class AsyncCustomersTransactions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final CustomersTransactions syncSDK;

    AsyncCustomersTransactions(CustomersTransactions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public CustomersTransactions sync() {
        return syncSDK;
    }


    /**
     * Get Transactions By Customer Id
     * 
     * <p>Get a list of transactions for a customer by their unique ID.
     * 
     * @return The async call builder
     */
    public GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetRequestBuilder getByCustomerId() {
        return new GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transactions By Customer Id
     * 
     * <p>Get a list of transactions for a customer by their unique ID.
     * 
     * @param customerId 
     * @return {@code CompletableFuture<GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetResponse>} - The async response
     */
    public CompletableFuture<GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetResponse> getByCustomerId(String customerId) {
        GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetRequest request =
            GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetRequest
                .builder()
                .customerId(customerId)
                .build();
        AsyncRequestOperation<GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetRequest, GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetResponse> operation
              = new GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
