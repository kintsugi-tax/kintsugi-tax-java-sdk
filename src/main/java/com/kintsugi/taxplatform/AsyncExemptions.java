/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.models.components.BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;
import com.kintsugi.taxplatform.models.components.ExemptionCreate;
import com.kintsugi.taxplatform.models.operations.GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest;
import com.kintsugi.taxplatform.models.operations.GetExemptionByIdV1ExemptionsExemptionIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetExemptionsV1ExemptionsGetRequest;
import com.kintsugi.taxplatform.models.operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest;
import com.kintsugi.taxplatform.models.operations.async.CreateExemptionV1ExemptionsPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.CreateExemptionV1ExemptionsPostResponse;
import com.kintsugi.taxplatform.models.operations.async.GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetResponse;
import com.kintsugi.taxplatform.models.operations.async.GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetExemptionByIdV1ExemptionsExemptionIdGetResponse;
import com.kintsugi.taxplatform.models.operations.async.GetExemptionsV1ExemptionsGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetExemptionsV1ExemptionsGetResponse;
import com.kintsugi.taxplatform.models.operations.async.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostResponse;
import com.kintsugi.taxplatform.operations.CreateExemptionV1ExemptionsPost;
import com.kintsugi.taxplatform.operations.GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGet;
import com.kintsugi.taxplatform.operations.GetExemptionByIdV1ExemptionsExemptionIdGet;
import com.kintsugi.taxplatform.operations.GetExemptionsV1ExemptionsGet;
import com.kintsugi.taxplatform.operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;
import com.kintsugi.taxplatform.utils.Headers;
import java.lang.String;
import java.util.concurrent.CompletableFuture;


public class AsyncExemptions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Exemptions syncSDK;

    AsyncExemptions(Exemptions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Exemptions sync() {
        return syncSDK;
    }


    /**
     * Get Exemptions
     * 
     * <p>Retrieve a list of exemptions based on filters.
     * 
     * @return The async call builder
     */
    public GetExemptionsV1ExemptionsGetRequestBuilder get() {
        return new GetExemptionsV1ExemptionsGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Exemptions
     * 
     * <p>Retrieve a list of exemptions based on filters.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetExemptionsV1ExemptionsGetResponse>} - The async response
     */
    public CompletableFuture<GetExemptionsV1ExemptionsGetResponse> get(GetExemptionsV1ExemptionsGetRequest request) {
        AsyncRequestOperation<GetExemptionsV1ExemptionsGetRequest, GetExemptionsV1ExemptionsGetResponse> operation
              = new GetExemptionsV1ExemptionsGet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Exemption
     * 
     * <p>The Create Exemption API allows you to create a new exemption record.
     * This includes defining details such as exemption type, jurisdiction,
     * Country, State, validity dates, etc.
     * 
     * @return The async call builder
     */
    public CreateExemptionV1ExemptionsPostRequestBuilder create() {
        return new CreateExemptionV1ExemptionsPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Exemption
     * 
     * <p>The Create Exemption API allows you to create a new exemption record.
     * This includes defining details such as exemption type, jurisdiction,
     * Country, State, validity dates, etc.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateExemptionV1ExemptionsPostResponse>} - The async response
     */
    public CompletableFuture<CreateExemptionV1ExemptionsPostResponse> create(ExemptionCreate request) {
        AsyncRequestOperation<ExemptionCreate, CreateExemptionV1ExemptionsPostResponse> operation
              = new CreateExemptionV1ExemptionsPost.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Exemption By Id
     * 
     * <p>The Get Exemption By ID API retrieves a specific exemption record by
     * its unique ID. This API is useful for retrieving detailed information
     * about a particular exemption, including its associated
     * customer, organisation id, status, etc.
     * 
     * @return The async call builder
     */
    public GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder getById() {
        return new GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Exemption By Id
     * 
     * <p>The Get Exemption By ID API retrieves a specific exemption record by
     * its unique ID. This API is useful for retrieving detailed information
     * about a particular exemption, including its associated
     * customer, organisation id, status, etc.
     * 
     * @param exemptionId The unique identifier for the exemption being retrieved.
     * @return {@code CompletableFuture<GetExemptionByIdV1ExemptionsExemptionIdGetResponse>} - The async response
     */
    public CompletableFuture<GetExemptionByIdV1ExemptionsExemptionIdGetResponse> getById(String exemptionId) {
        GetExemptionByIdV1ExemptionsExemptionIdGetRequest request =
            GetExemptionByIdV1ExemptionsExemptionIdGetRequest
                .builder()
                .exemptionId(exemptionId)
                .build();
        AsyncRequestOperation<GetExemptionByIdV1ExemptionsExemptionIdGetRequest, GetExemptionByIdV1ExemptionsExemptionIdGetResponse> operation
              = new GetExemptionByIdV1ExemptionsExemptionIdGet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Upload Exemption Certificate
     * 
     * <p>The Upload Exemption Certificate API allows you
     * to upload a file attachment (e.g., exemption certificate) for a specific exemption.
     * This is primarily used to associate supporting documents with an exemption record
     * to ensure compliance and facilitate verification.
     * 
     * @return The async call builder
     */
    public UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequestBuilder uploadCertificate() {
        return new UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload Exemption Certificate
     * 
     * <p>The Upload Exemption Certificate API allows you
     * to upload a file attachment (e.g., exemption certificate) for a specific exemption.
     * This is primarily used to associate supporting documents with an exemption record
     * to ensure compliance and facilitate verification.
     * 
     * @param exemptionId The unique identifier for the exemption to which the attachment will be associated.
     * @param bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost 
     * @return {@code CompletableFuture<UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostResponse>} - The async response
     */
    public CompletableFuture<UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostResponse> uploadCertificate(String exemptionId, BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost) {
        UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest request =
            UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest
                .builder()
                .exemptionId(exemptionId)
                .bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost(bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost)
                .build();
        AsyncRequestOperation<UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest, UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostResponse> operation
              = new UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Attachments For Exemption
     * 
     * <p>The Get Attachments for Exemption API retrieves all
     * attachments associated with a specific exemption.
     * This is used to view and manage supporting documents
     * like exemption certificates uploaded for a particular exemption record.
     * 
     * @return The async call builder
     */
    public GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequestBuilder getAttachments() {
        return new GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Attachments For Exemption
     * 
     * <p>The Get Attachments for Exemption API retrieves all
     * attachments associated with a specific exemption.
     * This is used to view and manage supporting documents
     * like exemption certificates uploaded for a particular exemption record.
     * 
     * @param exemptionId The unique identifier for the exemption
     *                 whose attachments are being retrieved.
     * @return {@code CompletableFuture<GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetResponse>} - The async response
     */
    public CompletableFuture<GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetResponse> getAttachments(String exemptionId) {
        GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest request =
            GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest
                .builder()
                .exemptionId(exemptionId)
                .build();
        AsyncRequestOperation<GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest, GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetResponse> operation
              = new GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
