/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.models.operations.GetFilingByIdV1FilingsFilingIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetFilingsV1FilingsGetRequest;
import com.kintsugi.taxplatform.models.operations.async.GetFilingByIdV1FilingsFilingIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetFilingByIdV1FilingsFilingIdGetResponse;
import com.kintsugi.taxplatform.models.operations.async.GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse;
import com.kintsugi.taxplatform.models.operations.async.GetFilingsV1FilingsGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetFilingsV1FilingsGetResponse;
import com.kintsugi.taxplatform.operations.GetFilingByIdV1FilingsFilingIdGet;
import com.kintsugi.taxplatform.operations.GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGet;
import com.kintsugi.taxplatform.operations.GetFilingsV1FilingsGet;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncFilings {
    private final SDKConfiguration sdkConfiguration;
    private final Filings syncSDK;

    AsyncFilings(Filings syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Filings sync() {
        return syncSDK;
    }


    /**
     * Get Filings
     * 
     * <p>The Get Filings API retrieves a paginated list of filings based on
     *     filters such as dates, jurisdiction, Country, status, etc. This helps track
     *     and manage tax filings efficiently across multiple jurisdictions.
     * 
     * @return The async call builder
     */
    public GetFilingsV1FilingsGetRequestBuilder get() {
        return new GetFilingsV1FilingsGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Filings
     * 
     * <p>The Get Filings API retrieves a paginated list of filings based on
     *     filters such as dates, jurisdiction, Country, status, etc. This helps track
     *     and manage tax filings efficiently across multiple jurisdictions.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetFilingsV1FilingsGetResponse&gt; - The async response
     */
    public CompletableFuture<GetFilingsV1FilingsGetResponse> get(GetFilingsV1FilingsGetRequest request) {
        AsyncRequestOperation<GetFilingsV1FilingsGetRequest, GetFilingsV1FilingsGetResponse> operation
              = new GetFilingsV1FilingsGet.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Filing By Id
     * 
     * <p>This API retrieves detailed information about a specific
     *     filing using its unique identifier (filing_id).
     * 
     * @return The async call builder
     */
    public GetFilingByIdV1FilingsFilingIdGetRequestBuilder getById() {
        return new GetFilingByIdV1FilingsFilingIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Filing By Id
     * 
     * <p>This API retrieves detailed information about a specific
     *     filing using its unique identifier (filing_id).
     * 
     * @param filingId Unique identifier for the filing to retrieve.
     * @return CompletableFuture&lt;GetFilingByIdV1FilingsFilingIdGetResponse&gt; - The async response
     */
    public CompletableFuture<GetFilingByIdV1FilingsFilingIdGetResponse> getById(String filingId) {
        GetFilingByIdV1FilingsFilingIdGetRequest request =
            GetFilingByIdV1FilingsFilingIdGetRequest
                .builder()
                .filingId(filingId)
                .build();
        AsyncRequestOperation<GetFilingByIdV1FilingsFilingIdGetRequest, GetFilingByIdV1FilingsFilingIdGetResponse> operation
              = new GetFilingByIdV1FilingsFilingIdGet.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Filings By Registration Id
     * 
     * <p>The Get Filings By Registration ID API
     *     retrieves all filings
     *     associated with a specific registration ID. This allows users to query detailed
     *     filing information tied to
     *     a specific registration record.
     * 
     * @return The async call builder
     */
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder getByRegistrationId() {
        return new GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Filings By Registration Id
     * 
     * <p>The Get Filings By Registration ID API
     *     retrieves all filings
     *     associated with a specific registration ID. This allows users to query detailed
     *     filing information tied to
     *     a specific registration record.
     * 
     * @param registrationId Unique identifier for the registration
     *                 associated with the filings.
     * @return CompletableFuture&lt;GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse&gt; - The async response
     */
    public CompletableFuture<GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse> getByRegistrationId(String registrationId) {
        return getByRegistrationId(registrationId, Optional.empty(), Optional.empty());
    }

    /**
     * Get Filings By Registration Id
     * 
     * <p>The Get Filings By Registration ID API
     *     retrieves all filings
     *     associated with a specific registration ID. This allows users to query detailed
     *     filing information tied to
     *     a specific registration record.
     * 
     * @param registrationId Unique identifier for the registration
     *                 associated with the filings.
     * @param page Page number
     * @param size Page size
     * @return CompletableFuture&lt;GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse&gt; - The async response
     */
    public CompletableFuture<GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse> getByRegistrationId(
            String registrationId, Optional<Long> page,
            Optional<Long> size) {
        GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest request =
            GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest
                .builder()
                .registrationId(registrationId)
                .page(page)
                .size(size)
                .build();
        AsyncRequestOperation<GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest, GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse> operation
              = new GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGet.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
