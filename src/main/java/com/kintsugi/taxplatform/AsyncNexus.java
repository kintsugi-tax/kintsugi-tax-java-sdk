/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.models.components.PhysicalNexusCreate;
import com.kintsugi.taxplatform.models.components.PhysicalNexusUpdate;
import com.kintsugi.taxplatform.models.operations.DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteRequest;
import com.kintsugi.taxplatform.models.operations.GetNexusForOrgV1NexusGetRequest;
import com.kintsugi.taxplatform.models.operations.GetPhysicalNexusV1NexusPhysicalNexusGetRequest;
import com.kintsugi.taxplatform.models.operations.UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutRequest;
import com.kintsugi.taxplatform.models.operations.async.CreatePhysicalNexusV1NexusPhysicalNexusPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.CreatePhysicalNexusV1NexusPhysicalNexusPostResponse;
import com.kintsugi.taxplatform.models.operations.async.DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteResponse;
import com.kintsugi.taxplatform.models.operations.async.GetNexusForOrgV1NexusGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetNexusForOrgV1NexusGetResponse;
import com.kintsugi.taxplatform.models.operations.async.GetPhysicalNexusV1NexusPhysicalNexusGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.GetPhysicalNexusV1NexusPhysicalNexusGetResponse;
import com.kintsugi.taxplatform.models.operations.async.UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutResponse;
import com.kintsugi.taxplatform.operations.CreatePhysicalNexusV1NexusPhysicalNexusPost;
import com.kintsugi.taxplatform.operations.DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDelete;
import com.kintsugi.taxplatform.operations.GetNexusForOrgV1NexusGet;
import com.kintsugi.taxplatform.operations.GetPhysicalNexusV1NexusPhysicalNexusGet;
import com.kintsugi.taxplatform.operations.UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPut;
import com.kintsugi.taxplatform.utils.Headers;
import java.lang.String;
import java.util.concurrent.CompletableFuture;


public class AsyncNexus {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Nexus syncSDK;

    AsyncNexus(Nexus syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Nexus sync() {
        return syncSDK;
    }


    /**
     * Get Physical Nexus
     * 
     * <p>Retrieve a paginated list of
     * physical nexuses for a specific organization.
     * 
     * @return The async call builder
     */
    public GetPhysicalNexusV1NexusPhysicalNexusGetRequestBuilder getPhysical() {
        return new GetPhysicalNexusV1NexusPhysicalNexusGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Physical Nexus
     * 
     * <p>Retrieve a paginated list of
     * physical nexuses for a specific organization.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetPhysicalNexusV1NexusPhysicalNexusGetResponse>} - The async response
     */
    public CompletableFuture<GetPhysicalNexusV1NexusPhysicalNexusGetResponse> getPhysical(GetPhysicalNexusV1NexusPhysicalNexusGetRequest request) {
        AsyncRequestOperation<GetPhysicalNexusV1NexusPhysicalNexusGetRequest, GetPhysicalNexusV1NexusPhysicalNexusGetResponse> operation
              = new GetPhysicalNexusV1NexusPhysicalNexusGet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Physical Nexus
     * 
     * <p>The Create Physical Nexus API allows you to create a new physical
     * nexus by specifying its attributes, including the location,
     * start date, end date, etc.
     * 
     * @return The async call builder
     */
    public CreatePhysicalNexusV1NexusPhysicalNexusPostRequestBuilder createPhysical() {
        return new CreatePhysicalNexusV1NexusPhysicalNexusPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Physical Nexus
     * 
     * <p>The Create Physical Nexus API allows you to create a new physical
     * nexus by specifying its attributes, including the location,
     * start date, end date, etc.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreatePhysicalNexusV1NexusPhysicalNexusPostResponse>} - The async response
     */
    public CompletableFuture<CreatePhysicalNexusV1NexusPhysicalNexusPostResponse> createPhysical(PhysicalNexusCreate request) {
        AsyncRequestOperation<PhysicalNexusCreate, CreatePhysicalNexusV1NexusPhysicalNexusPostResponse> operation
              = new CreatePhysicalNexusV1NexusPhysicalNexusPost.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Physical Nexus
     * 
     * <p>The Update Physical Nexus API allows you to modify the details of
     * an existing physical nexus by its unique ID.
     * 
     * @return The async call builder
     */
    public UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutRequestBuilder updatePhysical() {
        return new UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Physical Nexus
     * 
     * <p>The Update Physical Nexus API allows you to modify the details of
     * an existing physical nexus by its unique ID.
     * 
     * @param physicalNexusId The unique identifier of the physical
     *                                         nexus to update.
     * @param physicalNexusUpdate 
     * @return {@code CompletableFuture<UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutResponse>} - The async response
     */
    public CompletableFuture<UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutResponse> updatePhysical(String physicalNexusId, PhysicalNexusUpdate physicalNexusUpdate) {
        UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutRequest request =
            UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutRequest
                .builder()
                .physicalNexusId(physicalNexusId)
                .physicalNexusUpdate(physicalNexusUpdate)
                .build();
        AsyncRequestOperation<UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutRequest, UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutResponse> operation
              = new UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPut.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Physical Nexus
     * 
     * <p>The Delete Physical Nexus API allows you to remove an existing
     * physical nexus by its unique ID.
     * 
     * @return The async call builder
     */
    public DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteRequestBuilder deletePhysical() {
        return new DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Physical Nexus
     * 
     * <p>The Delete Physical Nexus API allows you to remove an existing
     * physical nexus by its unique ID.
     * 
     * @param physicalNexusId The unique identifier of the physical
     *                                         nexus to delete.
     * @return {@code CompletableFuture<DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteResponse>} - The async response
     */
    public CompletableFuture<DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteResponse> deletePhysical(String physicalNexusId) {
        DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteRequest request =
            DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteRequest
                .builder()
                .physicalNexusId(physicalNexusId)
                .build();
        AsyncRequestOperation<DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteRequest, DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteResponse> operation
              = new DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDelete.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Nexus For Org
     * 
     * <p>Get a list of all nexuses for the organization.
     * 
     * @return The async call builder
     */
    public GetNexusForOrgV1NexusGetRequestBuilder get() {
        return new GetNexusForOrgV1NexusGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Nexus For Org
     * 
     * <p>Get a list of all nexuses for the organization.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetNexusForOrgV1NexusGetResponse>} - The async response
     */
    public CompletableFuture<GetNexusForOrgV1NexusGetResponse> get(GetNexusForOrgV1NexusGetRequest request) {
        AsyncRequestOperation<GetNexusForOrgV1NexusGetRequest, GetNexusForOrgV1NexusGetResponse> operation
              = new GetNexusForOrgV1NexusGet.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
