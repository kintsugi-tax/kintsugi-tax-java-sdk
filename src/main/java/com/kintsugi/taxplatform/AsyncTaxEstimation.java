/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.models.components.TransactionEstimatePublicRequest;
import com.kintsugi.taxplatform.models.operations.EstimateTaxV1TaxEstimatePostRequest;
import com.kintsugi.taxplatform.models.operations.async.EstimateTaxV1TaxEstimatePostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.async.EstimateTaxV1TaxEstimatePostResponse;
import com.kintsugi.taxplatform.operations.EstimateTaxV1TaxEstimatePost;
import com.kintsugi.taxplatform.utils.Headers;
import java.lang.Boolean;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncTaxEstimation {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final TaxEstimation syncSDK;

    AsyncTaxEstimation(TaxEstimation syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public TaxEstimation sync() {
        return syncSDK;
    }


    /**
     * Estimate Tax
     * 
     * <p>The Estimate Tax API calculates the estimated tax for a specific
     * transaction based on the provided details, including organization nexus,
     * transaction details, customer details, and addresses. Optionally simulates nexus being met for tax
     * calculation purposes. The `simulate_nexus_met` parameter is deprecated and will be removed in future
     * releases.
     * 
     * @return The async call builder
     */
    public EstimateTaxV1TaxEstimatePostRequestBuilder estimate() {
        return new EstimateTaxV1TaxEstimatePostRequestBuilder(sdkConfiguration);
    }

    /**
     * Estimate Tax
     * 
     * <p>The Estimate Tax API calculates the estimated tax for a specific
     * transaction based on the provided details, including organization nexus,
     * transaction details, customer details, and addresses. Optionally simulates nexus being met for tax
     * calculation purposes. The `simulate_nexus_met` parameter is deprecated and will be removed in future
     * releases.
     * 
     * @param transactionEstimatePublicRequest Public request model for tax estimation API documentation.
     *         This model excludes internal fields like enriched_fields that should not be exposed in API docs.
     * @return {@code CompletableFuture<EstimateTaxV1TaxEstimatePostResponse>} - The async response
     */
    public CompletableFuture<EstimateTaxV1TaxEstimatePostResponse> estimate(TransactionEstimatePublicRequest transactionEstimatePublicRequest) {
        return estimate(Optional.empty(), transactionEstimatePublicRequest);
    }

    /**
     * Estimate Tax
     * 
     * <p>The Estimate Tax API calculates the estimated tax for a specific
     * transaction based on the provided details, including organization nexus,
     * transaction details, customer details, and addresses. Optionally simulates nexus being met for tax
     * calculation purposes. The `simulate_nexus_met` parameter is deprecated and will be removed in future
     * releases.
     * 
     * @param simulateNexusMet **Deprecated:** Use `simulate_active_registration` in the request body instead.
     * @param transactionEstimatePublicRequest Public request model for tax estimation API documentation.
     *         This model excludes internal fields like enriched_fields that should not be exposed in API docs.
     * @return {@code CompletableFuture<EstimateTaxV1TaxEstimatePostResponse>} - The async response
     */
    public CompletableFuture<EstimateTaxV1TaxEstimatePostResponse> estimate(Optional<Boolean> simulateNexusMet, TransactionEstimatePublicRequest transactionEstimatePublicRequest) {
        EstimateTaxV1TaxEstimatePostRequest request =
            EstimateTaxV1TaxEstimatePostRequest
                .builder()
                .simulateNexusMet(simulateNexusMet)
                .transactionEstimatePublicRequest(transactionEstimatePublicRequest)
                .build();
        AsyncRequestOperation<EstimateTaxV1TaxEstimatePostRequest, EstimateTaxV1TaxEstimatePostResponse> operation
              = new EstimateTaxV1TaxEstimatePost.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
