/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.kintsugi.taxplatform.models.components.RegistrationUpdateAPI;
import com.kintsugi.taxplatform.models.operations.CreateRegistration;
import com.kintsugi.taxplatform.models.operations.CreateRegistrationV1RegistrationsPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.CreateRegistrationV1RegistrationsPostResponse;
import com.kintsugi.taxplatform.models.operations.DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest;
import com.kintsugi.taxplatform.models.operations.DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostResponse;
import com.kintsugi.taxplatform.models.operations.GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetRegistrationByIdV1RegistrationsRegistrationIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetRegistrationByIdV1RegistrationsRegistrationIdGetResponse;
import com.kintsugi.taxplatform.models.operations.GetRegistrationsV1RegistrationsGetRequest;
import com.kintsugi.taxplatform.models.operations.GetRegistrationsV1RegistrationsGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetRegistrationsV1RegistrationsGetResponse;
import com.kintsugi.taxplatform.models.operations.UpdateRegistrationV1RegistrationsRegistrationIdPutRequest;
import com.kintsugi.taxplatform.models.operations.UpdateRegistrationV1RegistrationsRegistrationIdPutRequestBuilder;
import com.kintsugi.taxplatform.models.operations.UpdateRegistrationV1RegistrationsRegistrationIdPutResponse;
import com.kintsugi.taxplatform.operations.CreateRegistrationV1RegistrationsPost;
import com.kintsugi.taxplatform.operations.DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPost;
import com.kintsugi.taxplatform.operations.GetRegistrationByIdV1RegistrationsRegistrationIdGet;
import com.kintsugi.taxplatform.operations.GetRegistrationsV1RegistrationsGet;
import com.kintsugi.taxplatform.operations.UpdateRegistrationV1RegistrationsRegistrationIdPut;
import com.kintsugi.taxplatform.utils.Headers;
import java.lang.String;


public class Registrations {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncRegistrations asyncSDK;

    Registrations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncRegistrations(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncRegistrations async() {
        return asyncSDK;
    }

    /**
     * Get Registrations
     * 
     * <p>The Get Registrations API retrieves a
     * paginated list of registrations.
     * This API helps in tracking and managing registrations efficiently across multiple
     * jurisdictions.
     * 
     * @return The call builder
     */
    public GetRegistrationsV1RegistrationsGetRequestBuilder get() {
        return new GetRegistrationsV1RegistrationsGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Registrations
     * 
     * <p>The Get Registrations API retrieves a
     * paginated list of registrations.
     * This API helps in tracking and managing registrations efficiently across multiple
     * jurisdictions.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetRegistrationsV1RegistrationsGetResponse get(GetRegistrationsV1RegistrationsGetRequest request) {
        RequestOperation<GetRegistrationsV1RegistrationsGetRequest, GetRegistrationsV1RegistrationsGetResponse> operation
              = new GetRegistrationsV1RegistrationsGet.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Registration
     * 
     * <p>The Create Registration API allows users to create a new registration
     * for tracking and managing tax filings efficiently across multiple jurisdictions.
     * 
     * @return The call builder
     */
    public CreateRegistrationV1RegistrationsPostRequestBuilder create() {
        return new CreateRegistrationV1RegistrationsPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Registration
     * 
     * <p>The Create Registration API allows users to create a new registration
     * for tracking and managing tax filings efficiently across multiple jurisdictions.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateRegistrationV1RegistrationsPostResponse create(CreateRegistration request) {
        RequestOperation<CreateRegistration, CreateRegistrationV1RegistrationsPostResponse> operation
              = new CreateRegistrationV1RegistrationsPost.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Registration By Id
     * 
     * <p>The Get Registration By ID API retrieves a single registration record
     * based on its unique identifier.
     * 
     * @return The call builder
     */
    public GetRegistrationByIdV1RegistrationsRegistrationIdGetRequestBuilder getById() {
        return new GetRegistrationByIdV1RegistrationsRegistrationIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Registration By Id
     * 
     * <p>The Get Registration By ID API retrieves a single registration record
     * based on its unique identifier.
     * 
     * @param registrationId The unique identifier of the
     *                                         registration to retrieve.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetRegistrationByIdV1RegistrationsRegistrationIdGetResponse getById(String registrationId) {
        GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest request =
            GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest
                .builder()
                .registrationId(registrationId)
                .build();
        RequestOperation<GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest, GetRegistrationByIdV1RegistrationsRegistrationIdGetResponse> operation
              = new GetRegistrationByIdV1RegistrationsRegistrationIdGet.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Registration
     * 
     * <p>The Update Registration API allows you to modify
     * an existing registration using its unique registration_id.
     * 
     * @return The call builder
     */
    public UpdateRegistrationV1RegistrationsRegistrationIdPutRequestBuilder update() {
        return new UpdateRegistrationV1RegistrationsRegistrationIdPutRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Registration
     * 
     * <p>The Update Registration API allows you to modify
     * an existing registration using its unique registration_id.
     * 
     * @param registrationId The unique identifier of the registration to be updated.
     * @param registrationUpdateAPI 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateRegistrationV1RegistrationsRegistrationIdPutResponse update(String registrationId, RegistrationUpdateAPI registrationUpdateAPI) {
        UpdateRegistrationV1RegistrationsRegistrationIdPutRequest request =
            UpdateRegistrationV1RegistrationsRegistrationIdPutRequest
                .builder()
                .registrationId(registrationId)
                .registrationUpdateAPI(registrationUpdateAPI)
                .build();
        RequestOperation<UpdateRegistrationV1RegistrationsRegistrationIdPutRequest, UpdateRegistrationV1RegistrationsRegistrationIdPutResponse> operation
              = new UpdateRegistrationV1RegistrationsRegistrationIdPut.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Deregister Registration
     * 
     * <p>Deregister an existing registration.
     * 
     * @return The call builder
     */
    public DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequestBuilder deregister() {
        return new DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Deregister Registration
     * 
     * <p>Deregister an existing registration.
     * 
     * @param registrationId The unique identifier of the registration to deregister.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostResponse deregister(String registrationId) {
        DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest request =
            DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest
                .builder()
                .registrationId(registrationId)
                .build();
        RequestOperation<DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest, DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostResponse> operation
              = new DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPost.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
