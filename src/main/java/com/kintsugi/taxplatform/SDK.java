/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import com.kintsugi.taxplatform.utils.HTTPClient;
import com.kintsugi.taxplatform.utils.RetryConfig;
import com.kintsugi.taxplatform.utils.SpeakeasyHTTPClient;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

public class SDK {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * Production API server URL
         */
        "https://api.trykintsugi.com",
    };


    private final AddressValidation addressValidation;


    private final Customers customers;


    private final Exemptions exemptions;


    private final Filings filings;


    private final Nexus nexus;


    private final Products products;


    private final Registrations registrations;


    private final Transactions transactions;


    private final TaxEstimation taxEstimation;


    public AddressValidation addressValidation() {
        return addressValidation;
    }


    public Customers customers() {
        return customers;
    }


    public Exemptions exemptions() {
        return exemptions;
    }


    public Filings filings() {
        return filings;
    }


    public Nexus nexus() {
        return nexus;
    }


    public Products products() {
        return products;
    }


    public Registrations registrations() {
        return registrations;
    }


    public Transactions transactions() {
        return transactions;
    }


    public TaxEstimation taxEstimation() {
        return taxEstimation;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests. Can be {@code null}.
         * @return The builder instance.
         */
        public Builder security(com.kintsugi.taxplatform.models.components.Security security) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(security));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.setServerIdx(serverIdx);
            this.serverUrl= SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }

        /**
         * Enables debug logging for HTTP requests and responses, including JSON body content.
         * <p>
         * Convenience method that calls {@link HTTPClient#enableDebugLogging(boolean)}.
         * {@link SpeakeasyHTTPClient} honors this setting. If you are using a custom HTTP client,
         * it is up to the custom client to honor this setting.
         * </p>
         *
         * @param enabled Whether to enable debug logging.
         * @return The builder instance.
         */
        public Builder enableHTTPDebugLogging(boolean enabled) {
            this.sdkConfiguration.client().enableDebugLogging(enabled);
            return this;
        }

        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public SDK build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS[0];
                sdkConfiguration.setServerIdx(0);
            }
            sdkConfiguration.setServerUrl(serverUrl);
            return new SDK(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private SDK(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sdkConfiguration.initialize();
        this.addressValidation = new AddressValidation(sdkConfiguration);
        this.customers = new Customers(sdkConfiguration);
        this.exemptions = new Exemptions(sdkConfiguration);
        this.filings = new Filings(sdkConfiguration);
        this.nexus = new Nexus(sdkConfiguration);
        this.products = new Products(sdkConfiguration);
        this.registrations = new Registrations(sdkConfiguration);
        this.transactions = new Transactions(sdkConfiguration);
        this.taxEstimation = new TaxEstimation(sdkConfiguration);
    }
}
