/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.kintsugi.taxplatform.models.components.CreditNoteCreate;
import com.kintsugi.taxplatform.models.components.TransactionPublicRequest;
import com.kintsugi.taxplatform.models.components.TransactionUpdate;
import com.kintsugi.taxplatform.models.operations.CreateTransactionV1TransactionsPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.CreateTransactionV1TransactionsPostResponse;
import com.kintsugi.taxplatform.models.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse;
import com.kintsugi.taxplatform.models.operations.GetTransactionByIdV1TransactionsTransactionIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetTransactionByIdV1TransactionsTransactionIdGetResponse;
import com.kintsugi.taxplatform.models.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetResponse;
import com.kintsugi.taxplatform.models.operations.GetTransactionsV1TransactionsGetRequest;
import com.kintsugi.taxplatform.models.operations.GetTransactionsV1TransactionsGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetTransactionsV1TransactionsGetResponse;
import com.kintsugi.taxplatform.models.operations.PUTUpdateCreditNoteByTransactionIdRequest;
import com.kintsugi.taxplatform.models.operations.PUTUpdateCreditNoteByTransactionIdRequestBuilder;
import com.kintsugi.taxplatform.models.operations.PUTUpdateCreditNoteByTransactionIdResponse;
import com.kintsugi.taxplatform.models.operations.UpdateTransactionV1TransactionsTransactionIdPutRequest;
import com.kintsugi.taxplatform.models.operations.UpdateTransactionV1TransactionsTransactionIdPutRequestBuilder;
import com.kintsugi.taxplatform.models.operations.UpdateTransactionV1TransactionsTransactionIdPutResponse;
import com.kintsugi.taxplatform.operations.CreateTransactionV1TransactionsPost;
import com.kintsugi.taxplatform.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGet;
import com.kintsugi.taxplatform.operations.GetTransactionByIdV1TransactionsTransactionIdGet;
import com.kintsugi.taxplatform.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGet;
import com.kintsugi.taxplatform.operations.GetTransactionsV1TransactionsGet;
import com.kintsugi.taxplatform.operations.PUTUpdateCreditNoteByTransactionId;
import com.kintsugi.taxplatform.operations.UpdateTransactionV1TransactionsTransactionIdPut;
import com.kintsugi.taxplatform.utils.Headers;
import java.lang.Exception;
import java.lang.String;


public class Transactions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncTransactions asyncSDK;
    private final CreditNotes creditNotes;

    Transactions(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.creditNotes = new CreditNotes(this.sdkConfiguration);
        this.asyncSDK = new AsyncTransactions(this, sdkConfiguration);
    }

    public final CreditNotes creditNotes() {
        return creditNotes;
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncTransactions async() {
        return asyncSDK;
    }

    /**
     * Get Transactions
     * 
     * <p>The Get Transactions API retrieves a list of transactions with
     *     optional filtering, sorting, and pagination.
     * 
     * @return The call builder
     */
    public GetTransactionsV1TransactionsGetRequestBuilder get() {
        return new GetTransactionsV1TransactionsGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transactions
     * 
     * <p>The Get Transactions API retrieves a list of transactions with
     *     optional filtering, sorting, and pagination.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionsV1TransactionsGetResponse get(GetTransactionsV1TransactionsGetRequest request) throws Exception {
        RequestOperation<GetTransactionsV1TransactionsGetRequest, GetTransactionsV1TransactionsGetResponse> operation
              = new GetTransactionsV1TransactionsGet.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Transaction
     * 
     * <p>Create a transaction.
     * 
     * @return The call builder
     */
    public CreateTransactionV1TransactionsPostRequestBuilder create() {
        return new CreateTransactionV1TransactionsPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Transaction
     * 
     * <p>Create a transaction.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionV1TransactionsPostResponse create(TransactionPublicRequest request) throws Exception {
        RequestOperation<TransactionPublicRequest, CreateTransactionV1TransactionsPostResponse> operation
              = new CreateTransactionV1TransactionsPost.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Transaction By External Id
     * 
     * <p>Retrieves a specific transaction based on its external ID.
     *     This allows users to fetch transaction details using an identifier from an external system.
     * 
     * @return The call builder
     */
    public GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder getByExternalId() {
        return new GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transaction By External Id
     * 
     * <p>Retrieves a specific transaction based on its external ID.
     *     This allows users to fetch transaction details using an identifier from an external system.
     * 
     * @param externalId The unique external identifier of the transaction.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse getByExternalId(String externalId) throws Exception {
        GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest request =
            GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest
                .builder()
                .externalId(externalId)
                .build();
        RequestOperation<GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest, GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse> operation
              = new GetTransactionByExternalIdV1TransactionsExternalExternalIdGet.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Transaction
     * 
     * <p>Update a specific transaction by its ID.
     * 
     * @return The call builder
     */
    public UpdateTransactionV1TransactionsTransactionIdPutRequestBuilder update() {
        return new UpdateTransactionV1TransactionsTransactionIdPutRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Transaction
     * 
     * <p>Update a specific transaction by its ID.
     * 
     * @param transactionId 
     * @param transactionUpdate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTransactionV1TransactionsTransactionIdPutResponse update(String transactionId, TransactionUpdate transactionUpdate) throws Exception {
        UpdateTransactionV1TransactionsTransactionIdPutRequest request =
            UpdateTransactionV1TransactionsTransactionIdPutRequest
                .builder()
                .transactionId(transactionId)
                .transactionUpdate(transactionUpdate)
                .build();
        RequestOperation<UpdateTransactionV1TransactionsTransactionIdPutRequest, UpdateTransactionV1TransactionsTransactionIdPutResponse> operation
              = new UpdateTransactionV1TransactionsTransactionIdPut.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Transaction By Id
     * 
     * <p>The Get Transaction By Id API retrieves detailed information
     *     about a specific transaction by providing its unique transaction ID.
     * 
     * @return The call builder
     */
    public GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder getById() {
        return new GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transaction By Id
     * 
     * <p>The Get Transaction By Id API retrieves detailed information
     *     about a specific transaction by providing its unique transaction ID.
     * 
     * @param transactionId The unique identifier of the transaction to retrieve.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionByIdV1TransactionsTransactionIdGetResponse getById(String transactionId) throws Exception {
        GetTransactionByIdV1TransactionsTransactionIdGetRequest request =
            GetTransactionByIdV1TransactionsTransactionIdGetRequest
                .builder()
                .transactionId(transactionId)
                .build();
        RequestOperation<GetTransactionByIdV1TransactionsTransactionIdGetRequest, GetTransactionByIdV1TransactionsTransactionIdGetResponse> operation
              = new GetTransactionByIdV1TransactionsTransactionIdGet.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Transactions By Filing Id
     * 
     * <p>Retrieve transactions by filing ID.
     * 
     * @return The call builder
     */
    public GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequestBuilder getByFilingId() {
        return new GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transactions By Filing Id
     * 
     * <p>Retrieve transactions by filing ID.
     * 
     * @param filingId The unique identifier of the filing
     *                 whose transactions you wish to retrieve.
     *                 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetResponse getByFilingId(String filingId) throws Exception {
        GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest request =
            GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest
                .builder()
                .filingId(filingId)
                .build();
        RequestOperation<GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest, GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetResponse> operation
              = new GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGet.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Credit Note By Transaction Id
     * 
     * <p>Update an existing credit note for a specific transaction.
     * 
     * @return The call builder
     */
    public PUTUpdateCreditNoteByTransactionIdRequestBuilder updateCreditNote() {
        return new PUTUpdateCreditNoteByTransactionIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Credit Note By Transaction Id
     * 
     * <p>Update an existing credit note for a specific transaction.
     * 
     * @param originalTransactionId 
     * @param creditNoteId 
     * @param creditNoteCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PUTUpdateCreditNoteByTransactionIdResponse updateCreditNote(
            String originalTransactionId, String creditNoteId,
            CreditNoteCreate creditNoteCreate) throws Exception {
        PUTUpdateCreditNoteByTransactionIdRequest request =
            PUTUpdateCreditNoteByTransactionIdRequest
                .builder()
                .originalTransactionId(originalTransactionId)
                .creditNoteId(creditNoteId)
                .creditNoteCreate(creditNoteCreate)
                .build();
        RequestOperation<PUTUpdateCreditNoteByTransactionIdRequest, PUTUpdateCreditNoteByTransactionIdResponse> operation
              = new PUTUpdateCreditNoteByTransactionId.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
