/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.kintsugi.taxplatform.models.components.CreditNoteCreate;
import com.kintsugi.taxplatform.models.components.TransactionPublicRequest;
import com.kintsugi.taxplatform.models.components.TransactionUpdate;
import com.kintsugi.taxplatform.models.operations.CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostRequest;
import com.kintsugi.taxplatform.models.operations.CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostResponse;
import com.kintsugi.taxplatform.models.operations.CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostSecurity;
import com.kintsugi.taxplatform.models.operations.CreateTransactionV1TransactionsPostRequest;
import com.kintsugi.taxplatform.models.operations.CreateTransactionV1TransactionsPostRequestBuilder;
import com.kintsugi.taxplatform.models.operations.CreateTransactionV1TransactionsPostResponse;
import com.kintsugi.taxplatform.models.operations.CreateTransactionV1TransactionsPostSecurity;
import com.kintsugi.taxplatform.models.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse;
import com.kintsugi.taxplatform.models.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetSecurity;
import com.kintsugi.taxplatform.models.operations.GetTransactionByIdV1TransactionsTransactionIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetTransactionByIdV1TransactionsTransactionIdGetResponse;
import com.kintsugi.taxplatform.models.operations.GetTransactionByIdV1TransactionsTransactionIdGetSecurity;
import com.kintsugi.taxplatform.models.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest;
import com.kintsugi.taxplatform.models.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetResponse;
import com.kintsugi.taxplatform.models.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetSecurity;
import com.kintsugi.taxplatform.models.operations.GetTransactionsV1TransactionsGetRequest;
import com.kintsugi.taxplatform.models.operations.GetTransactionsV1TransactionsGetRequestBuilder;
import com.kintsugi.taxplatform.models.operations.GetTransactionsV1TransactionsGetResponse;
import com.kintsugi.taxplatform.models.operations.GetTransactionsV1TransactionsGetSecurity;
import com.kintsugi.taxplatform.models.operations.UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutRequest;
import com.kintsugi.taxplatform.models.operations.UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutRequestBuilder;
import com.kintsugi.taxplatform.models.operations.UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutResponse;
import com.kintsugi.taxplatform.models.operations.UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutSecurity;
import com.kintsugi.taxplatform.models.operations.UpdateTransactionV1TransactionsTransactionIdPutRequest;
import com.kintsugi.taxplatform.models.operations.UpdateTransactionV1TransactionsTransactionIdPutRequestBuilder;
import com.kintsugi.taxplatform.models.operations.UpdateTransactionV1TransactionsTransactionIdPutResponse;
import com.kintsugi.taxplatform.models.operations.UpdateTransactionV1TransactionsTransactionIdPutSecurity;
import com.kintsugi.taxplatform.operations.CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostOperation;
import com.kintsugi.taxplatform.operations.CreateTransactionV1TransactionsPostOperation;
import com.kintsugi.taxplatform.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetOperation;
import com.kintsugi.taxplatform.operations.GetTransactionByIdV1TransactionsTransactionIdGetOperation;
import com.kintsugi.taxplatform.operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetOperation;
import com.kintsugi.taxplatform.operations.GetTransactionsV1TransactionsGetOperation;
import com.kintsugi.taxplatform.operations.UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutOperation;
import com.kintsugi.taxplatform.operations.UpdateTransactionV1TransactionsTransactionIdPutOperation;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Transactions {
    private final SDKConfiguration sdkConfiguration;

    Transactions(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Get Transactions
     * 
     * <p>The Get Transactions API retrieves a list of transactions with
     *     optional filtering, sorting, and pagination.
     * 
     * @return The call builder
     */
    public GetTransactionsV1TransactionsGetRequestBuilder list() {
        return new GetTransactionsV1TransactionsGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transactions
     * 
     * <p>The Get Transactions API retrieves a list of transactions with
     *     optional filtering, sorting, and pagination.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param security The security details to use for authentication.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionsV1TransactionsGetResponse list(GetTransactionsV1TransactionsGetRequest request, GetTransactionsV1TransactionsGetSecurity security) throws Exception {
        RequestOperation<GetTransactionsV1TransactionsGetRequest, GetTransactionsV1TransactionsGetResponse> operation
              = new GetTransactionsV1TransactionsGetOperation(sdkConfiguration, security);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Transaction
     * 
     * <p>Create a transaction.
     * 
     * @return The call builder
     */
    public CreateTransactionV1TransactionsPostRequestBuilder create() {
        return new CreateTransactionV1TransactionsPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Transaction
     * 
     * <p>Create a transaction.
     * 
     * @param security The security details to use for authentication.
     * @param transactionPublicRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionV1TransactionsPostResponse create(CreateTransactionV1TransactionsPostSecurity security, TransactionPublicRequest transactionPublicRequest) throws Exception {
        return create(security, Optional.empty(), transactionPublicRequest);
    }

    /**
     * Create Transaction
     * 
     * <p>Create a transaction.
     * 
     * @param security The security details to use for authentication.
     * @param xOrganizationId The unique identifier for the organization making the request
     * @param transactionPublicRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionV1TransactionsPostResponse create(
            CreateTransactionV1TransactionsPostSecurity security, Optional<String> xOrganizationId,
            TransactionPublicRequest transactionPublicRequest) throws Exception {
        CreateTransactionV1TransactionsPostRequest request =
            CreateTransactionV1TransactionsPostRequest
                .builder()
                .xOrganizationId(xOrganizationId)
                .transactionPublicRequest(transactionPublicRequest)
                .build();
        RequestOperation<CreateTransactionV1TransactionsPostRequest, CreateTransactionV1TransactionsPostResponse> operation
              = new CreateTransactionV1TransactionsPostOperation(sdkConfiguration, security);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Transaction By External Id
     * 
     * <p>Retrieves a specific transaction based on its external ID.
     *     This allows users to fetch transaction details using an identifier from an external system.
     * 
     * @return The call builder
     */
    public GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder getByExternalId() {
        return new GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transaction By External Id
     * 
     * <p>Retrieves a specific transaction based on its external ID.
     *     This allows users to fetch transaction details using an identifier from an external system.
     * 
     * @param security The security details to use for authentication.
     * @param externalId The unique external identifier of the transaction.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse getByExternalId(GetTransactionByExternalIdV1TransactionsExternalExternalIdGetSecurity security, String externalId) throws Exception {
        return getByExternalId(security, externalId, Optional.empty());
    }

    /**
     * Get Transaction By External Id
     * 
     * <p>Retrieves a specific transaction based on its external ID.
     *     This allows users to fetch transaction details using an identifier from an external system.
     * 
     * @param security The security details to use for authentication.
     * @param externalId The unique external identifier of the transaction.
     * @param xOrganizationId The unique identifier for the organization making the request
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse getByExternalId(
            GetTransactionByExternalIdV1TransactionsExternalExternalIdGetSecurity security, String externalId,
            Optional<String> xOrganizationId) throws Exception {
        GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest request =
            GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest
                .builder()
                .externalId(externalId)
                .xOrganizationId(xOrganizationId)
                .build();
        RequestOperation<GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest, GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse> operation
              = new GetTransactionByExternalIdV1TransactionsExternalExternalIdGetOperation(sdkConfiguration, security);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Transaction
     * 
     * <p>Update a specific transaction by its ID.
     * 
     * @return The call builder
     */
    public UpdateTransactionV1TransactionsTransactionIdPutRequestBuilder update() {
        return new UpdateTransactionV1TransactionsTransactionIdPutRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Transaction
     * 
     * <p>Update a specific transaction by its ID.
     * 
     * @param security The security details to use for authentication.
     * @param transactionId 
     * @param transactionUpdate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTransactionV1TransactionsTransactionIdPutResponse update(
            UpdateTransactionV1TransactionsTransactionIdPutSecurity security, String transactionId,
            TransactionUpdate transactionUpdate) throws Exception {
        return update(security, transactionId, Optional.empty(),
            transactionUpdate);
    }

    /**
     * Update Transaction
     * 
     * <p>Update a specific transaction by its ID.
     * 
     * @param security The security details to use for authentication.
     * @param transactionId 
     * @param xOrganizationId The unique identifier for the organization making the request
     * @param transactionUpdate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTransactionV1TransactionsTransactionIdPutResponse update(
            UpdateTransactionV1TransactionsTransactionIdPutSecurity security, String transactionId,
            Optional<String> xOrganizationId, TransactionUpdate transactionUpdate) throws Exception {
        UpdateTransactionV1TransactionsTransactionIdPutRequest request =
            UpdateTransactionV1TransactionsTransactionIdPutRequest
                .builder()
                .transactionId(transactionId)
                .xOrganizationId(xOrganizationId)
                .transactionUpdate(transactionUpdate)
                .build();
        RequestOperation<UpdateTransactionV1TransactionsTransactionIdPutRequest, UpdateTransactionV1TransactionsTransactionIdPutResponse> operation
              = new UpdateTransactionV1TransactionsTransactionIdPutOperation(sdkConfiguration, security);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Transaction By Id
     * 
     * <p>The Get Transaction By Id API retrieves detailed information
     *     about a specific transaction by providing its unique transaction ID.
     * 
     * @return The call builder
     */
    public GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder getById() {
        return new GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transaction By Id
     * 
     * <p>The Get Transaction By Id API retrieves detailed information
     *     about a specific transaction by providing its unique transaction ID.
     * 
     * @param security The security details to use for authentication.
     * @param transactionId The unique identifier of the transaction to retrieve.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionByIdV1TransactionsTransactionIdGetResponse getById(GetTransactionByIdV1TransactionsTransactionIdGetSecurity security, String transactionId) throws Exception {
        return getById(security, transactionId, Optional.empty());
    }

    /**
     * Get Transaction By Id
     * 
     * <p>The Get Transaction By Id API retrieves detailed information
     *     about a specific transaction by providing its unique transaction ID.
     * 
     * @param security The security details to use for authentication.
     * @param transactionId The unique identifier of the transaction to retrieve.
     * @param xOrganizationId The unique identifier for the organization making the request
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionByIdV1TransactionsTransactionIdGetResponse getById(
            GetTransactionByIdV1TransactionsTransactionIdGetSecurity security, String transactionId,
            Optional<String> xOrganizationId) throws Exception {
        GetTransactionByIdV1TransactionsTransactionIdGetRequest request =
            GetTransactionByIdV1TransactionsTransactionIdGetRequest
                .builder()
                .transactionId(transactionId)
                .xOrganizationId(xOrganizationId)
                .build();
        RequestOperation<GetTransactionByIdV1TransactionsTransactionIdGetRequest, GetTransactionByIdV1TransactionsTransactionIdGetResponse> operation
              = new GetTransactionByIdV1TransactionsTransactionIdGetOperation(sdkConfiguration, security);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Transactions By Filing Id
     * 
     * <p>Retrieve transactions by filing ID.
     * 
     * @return The call builder
     */
    public GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequestBuilder getByFilingId() {
        return new GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transactions By Filing Id
     * 
     * <p>Retrieve transactions by filing ID.
     * 
     * @param security The security details to use for authentication.
     * @param filingId The unique identifier of the filing
     *                 whose transactions you wish to retrieve.
     *                 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetResponse getByFilingId(GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetSecurity security, String filingId) throws Exception {
        return getByFilingId(security, filingId, Optional.empty());
    }

    /**
     * Get Transactions By Filing Id
     * 
     * <p>Retrieve transactions by filing ID.
     * 
     * @param security The security details to use for authentication.
     * @param filingId The unique identifier of the filing
     *                 whose transactions you wish to retrieve.
     *                 
     * @param xOrganizationId The unique identifier for the organization making the request
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetResponse getByFilingId(
            GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetSecurity security, String filingId,
            Optional<String> xOrganizationId) throws Exception {
        GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest request =
            GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest
                .builder()
                .filingId(filingId)
                .xOrganizationId(xOrganizationId)
                .build();
        RequestOperation<GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest, GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetResponse> operation
              = new GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetOperation(sdkConfiguration, security);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Credit Note By Transaction Id
     * 
     * <p>Create a new credit note for a specific transaction.
     * 
     * @return The call builder
     */
    public CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostRequestBuilder createCreditNote() {
        return new CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Credit Note By Transaction Id
     * 
     * <p>Create a new credit note for a specific transaction.
     * 
     * @param security The security details to use for authentication.
     * @param originalTransactionId 
     * @param creditNoteCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostResponse createCreditNote(
            CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostSecurity security, String originalTransactionId,
            CreditNoteCreate creditNoteCreate) throws Exception {
        return createCreditNote(security, originalTransactionId, Optional.empty(),
            creditNoteCreate);
    }

    /**
     * Create Credit Note By Transaction Id
     * 
     * <p>Create a new credit note for a specific transaction.
     * 
     * @param security The security details to use for authentication.
     * @param originalTransactionId 
     * @param xOrganizationId The unique identifier for the organization making the request
     * @param creditNoteCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostResponse createCreditNote(
            CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostSecurity security, String originalTransactionId,
            Optional<String> xOrganizationId, CreditNoteCreate creditNoteCreate) throws Exception {
        CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostRequest request =
            CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostRequest
                .builder()
                .originalTransactionId(originalTransactionId)
                .xOrganizationId(xOrganizationId)
                .creditNoteCreate(creditNoteCreate)
                .build();
        RequestOperation<CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostRequest, CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostResponse> operation
              = new CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostOperation(sdkConfiguration, security);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Credit Note By Transaction Id
     * 
     * <p>Update an existing credit note for a specific transaction.
     * 
     * @return The call builder
     */
    public UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutRequestBuilder updateCreditNote() {
        return new UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Credit Note By Transaction Id
     * 
     * <p>Update an existing credit note for a specific transaction.
     * 
     * @param security The security details to use for authentication.
     * @param originalTransactionId 
     * @param creditNoteId 
     * @param creditNoteCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutResponse updateCreditNote(
            UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutSecurity security, String originalTransactionId,
            String creditNoteId, CreditNoteCreate creditNoteCreate) throws Exception {
        return updateCreditNote(security, originalTransactionId, creditNoteId,
            Optional.empty(), creditNoteCreate);
    }

    /**
     * Update Credit Note By Transaction Id
     * 
     * <p>Update an existing credit note for a specific transaction.
     * 
     * @param security The security details to use for authentication.
     * @param originalTransactionId 
     * @param creditNoteId 
     * @param xOrganizationId The unique identifier for the organization making the request
     * @param creditNoteCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutResponse updateCreditNote(
            UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutSecurity security, String originalTransactionId,
            String creditNoteId, Optional<String> xOrganizationId,
            CreditNoteCreate creditNoteCreate) throws Exception {
        UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutRequest request =
            UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutRequest
                .builder()
                .originalTransactionId(originalTransactionId)
                .creditNoteId(creditNoteId)
                .xOrganizationId(xOrganizationId)
                .creditNoteCreate(creditNoteCreate)
                .build();
        RequestOperation<UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutRequest, UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutResponse> operation
              = new UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutOperation(sdkConfiguration, security);
        return operation.handleResponse(operation.doRequest(request));
    }

}
