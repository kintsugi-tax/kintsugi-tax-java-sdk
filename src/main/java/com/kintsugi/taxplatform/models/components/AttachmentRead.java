/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class AttachmentRead {
    /**
     * The unique identifier of the exemption associated
     *         with the attachment.
     */
    @JsonProperty("related_entity_id")
    private String relatedEntityId;


    @JsonProperty("related_entity_type")
    private RelatedEntityType relatedEntityType;

    /**
     * The unique identifier of the uploaded attachment (attachment ID).
     */
    @JsonProperty("id")
    private String id;

    @JsonCreator
    public AttachmentRead(
            @JsonProperty("related_entity_id") String relatedEntityId,
            @JsonProperty("related_entity_type") RelatedEntityType relatedEntityType,
            @JsonProperty("id") String id) {
        Utils.checkNotNull(relatedEntityId, "relatedEntityId");
        Utils.checkNotNull(relatedEntityType, "relatedEntityType");
        Utils.checkNotNull(id, "id");
        this.relatedEntityId = relatedEntityId;
        this.relatedEntityType = relatedEntityType;
        this.id = id;
    }

    /**
     * The unique identifier of the exemption associated
     *         with the attachment.
     */
    @JsonIgnore
    public String relatedEntityId() {
        return relatedEntityId;
    }

    @JsonIgnore
    public RelatedEntityType relatedEntityType() {
        return relatedEntityType;
    }

    /**
     * The unique identifier of the uploaded attachment (attachment ID).
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier of the exemption associated
     *         with the attachment.
     */
    public AttachmentRead withRelatedEntityId(String relatedEntityId) {
        Utils.checkNotNull(relatedEntityId, "relatedEntityId");
        this.relatedEntityId = relatedEntityId;
        return this;
    }

    public AttachmentRead withRelatedEntityType(RelatedEntityType relatedEntityType) {
        Utils.checkNotNull(relatedEntityType, "relatedEntityType");
        this.relatedEntityType = relatedEntityType;
        return this;
    }

    /**
     * The unique identifier of the uploaded attachment (attachment ID).
     */
    public AttachmentRead withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AttachmentRead other = (AttachmentRead) o;
        return 
            Utils.enhancedDeepEquals(this.relatedEntityId, other.relatedEntityId) &&
            Utils.enhancedDeepEquals(this.relatedEntityType, other.relatedEntityType) &&
            Utils.enhancedDeepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            relatedEntityId, relatedEntityType, id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AttachmentRead.class,
                "relatedEntityId", relatedEntityId,
                "relatedEntityType", relatedEntityType,
                "id", id);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String relatedEntityId;

        private RelatedEntityType relatedEntityType;

        private String id;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier of the exemption associated
         *         with the attachment.
         */
        public Builder relatedEntityId(String relatedEntityId) {
            Utils.checkNotNull(relatedEntityId, "relatedEntityId");
            this.relatedEntityId = relatedEntityId;
            return this;
        }


        public Builder relatedEntityType(RelatedEntityType relatedEntityType) {
            Utils.checkNotNull(relatedEntityType, "relatedEntityType");
            this.relatedEntityType = relatedEntityType;
            return this;
        }


        /**
         * The unique identifier of the uploaded attachment (attachment ID).
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public AttachmentRead build() {

            return new AttachmentRead(
                relatedEntityId, relatedEntityType, id);
        }

    }
}
