/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;


public class BackendSrcNexusResponsesValidationErrorItem {
    /**
     * Validation issues, such as missing required
     *                     fields or invalid field values.
     */
    @JsonProperty("type")
    private String type;

    /**
     * Location of error
     */
    @JsonProperty("loc")
    private List<String> loc;

    /**
     * Error message
     */
    @JsonProperty("msg")
    private String msg;

    /**
     * Invalid input value
     */
    @JsonProperty("input")
    private Object input;

    /**
     * Additional context
     */
    @JsonProperty("ctx")
    private Map<String, Object> ctx;

    @JsonCreator
    public BackendSrcNexusResponsesValidationErrorItem(
            @JsonProperty("type") String type,
            @JsonProperty("loc") List<String> loc,
            @JsonProperty("msg") String msg,
            @JsonProperty("input") Object input,
            @JsonProperty("ctx") Map<String, Object> ctx) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(loc, "loc");
        Utils.checkNotNull(msg, "msg");
        Utils.checkNotNull(input, "input");
        ctx = Utils.emptyMapIfNull(ctx);
        Utils.checkNotNull(ctx, "ctx");
        this.type = type;
        this.loc = loc;
        this.msg = msg;
        this.input = input;
        this.ctx = ctx;
    }

    /**
     * Validation issues, such as missing required
     *                     fields or invalid field values.
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    /**
     * Location of error
     */
    @JsonIgnore
    public List<String> loc() {
        return loc;
    }

    /**
     * Error message
     */
    @JsonIgnore
    public String msg() {
        return msg;
    }

    /**
     * Invalid input value
     */
    @JsonIgnore
    public Object input() {
        return input;
    }

    /**
     * Additional context
     */
    @JsonIgnore
    public Map<String, Object> ctx() {
        return ctx;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Validation issues, such as missing required
     *                     fields or invalid field values.
     */
    public BackendSrcNexusResponsesValidationErrorItem withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Location of error
     */
    public BackendSrcNexusResponsesValidationErrorItem withLoc(List<String> loc) {
        Utils.checkNotNull(loc, "loc");
        this.loc = loc;
        return this;
    }

    /**
     * Error message
     */
    public BackendSrcNexusResponsesValidationErrorItem withMsg(String msg) {
        Utils.checkNotNull(msg, "msg");
        this.msg = msg;
        return this;
    }

    /**
     * Invalid input value
     */
    public BackendSrcNexusResponsesValidationErrorItem withInput(Object input) {
        Utils.checkNotNull(input, "input");
        this.input = input;
        return this;
    }

    /**
     * Additional context
     */
    public BackendSrcNexusResponsesValidationErrorItem withCtx(Map<String, Object> ctx) {
        Utils.checkNotNull(ctx, "ctx");
        this.ctx = ctx;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BackendSrcNexusResponsesValidationErrorItem other = (BackendSrcNexusResponsesValidationErrorItem) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.loc, other.loc) &&
            Utils.enhancedDeepEquals(this.msg, other.msg) &&
            Utils.enhancedDeepEquals(this.input, other.input) &&
            Utils.enhancedDeepEquals(this.ctx, other.ctx);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, loc, msg,
            input, ctx);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BackendSrcNexusResponsesValidationErrorItem.class,
                "type", type,
                "loc", loc,
                "msg", msg,
                "input", input,
                "ctx", ctx);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String type;

        private List<String> loc;

        private String msg;

        private Object input;

        private Map<String, Object> ctx;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Validation issues, such as missing required
         *                     fields or invalid field values.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * Location of error
         */
        public Builder loc(List<String> loc) {
            Utils.checkNotNull(loc, "loc");
            this.loc = loc;
            return this;
        }


        /**
         * Error message
         */
        public Builder msg(String msg) {
            Utils.checkNotNull(msg, "msg");
            this.msg = msg;
            return this;
        }


        /**
         * Invalid input value
         */
        public Builder input(Object input) {
            Utils.checkNotNull(input, "input");
            this.input = input;
            return this;
        }


        /**
         * Additional context
         */
        public Builder ctx(Map<String, Object> ctx) {
            Utils.checkNotNull(ctx, "ctx");
            this.ctx = ctx;
            return this;
        }

        public BackendSrcNexusResponsesValidationErrorItem build() {

            return new BackendSrcNexusResponsesValidationErrorItem(
                type, loc, msg,
                input, ctx);
        }

    }
}
