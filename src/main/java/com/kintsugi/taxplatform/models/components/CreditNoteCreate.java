/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreditNoteCreate {
    /**
     * Unique identifier for the credit note in the external system.
     */
    @JsonProperty("external_id")
    private String externalId;

    /**
     * Date when the credit note was issued or created.
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Current state of the credit note in its lifecycle.
     */
    @JsonProperty("status")
    private Status status;

    /**
     * Brief explanation or reason for issuing the credit note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Total monetary value of the credit note, including all items and taxes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<? extends CreditNoteCreateTotalAmount> totalAmount;

    /**
     * Indicates whether this credit note is associated with a marketplace transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketplace")
    private JsonNullable<Boolean> marketplace;

    /**
     * Pre-calculated total tax amount for the entire credit note, if provided by the external system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount_imported")
    private JsonNullable<? extends CreditNoteCreateTaxAmountImported> taxAmountImported;

    /**
     * Pre-calculated overall tax rate for the credit note, if provided by the external system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_imported")
    private JsonNullable<? extends CreditNoteCreateTaxRateImported> taxRateImported;

    /**
     * Total portion of the credit note amount subject to taxation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private JsonNullable<? extends CreditNoteCreateTaxableAmount> taxableAmount;


    @JsonProperty("currency")
    private CurrencyEnum currency;

    /**
     * A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private JsonNullable<? extends List<TransactionAddressBuilder>> addresses;

    /**
     * Detailed list of individual items included in this credit note.
     */
    @JsonProperty("transaction_items")
    private List<CreditNoteItemCreateUpdate> transactionItems;

    @JsonCreator
    public CreditNoteCreate(
            @JsonProperty("external_id") String externalId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("status") Status status,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("total_amount") Optional<? extends CreditNoteCreateTotalAmount> totalAmount,
            @JsonProperty("marketplace") JsonNullable<Boolean> marketplace,
            @JsonProperty("tax_amount_imported") JsonNullable<? extends CreditNoteCreateTaxAmountImported> taxAmountImported,
            @JsonProperty("tax_rate_imported") JsonNullable<? extends CreditNoteCreateTaxRateImported> taxRateImported,
            @JsonProperty("taxable_amount") JsonNullable<? extends CreditNoteCreateTaxableAmount> taxableAmount,
            @JsonProperty("currency") CurrencyEnum currency,
            @JsonProperty("addresses") JsonNullable<? extends List<TransactionAddressBuilder>> addresses,
            @JsonProperty("transaction_items") List<CreditNoteItemCreateUpdate> transactionItems) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(marketplace, "marketplace");
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(transactionItems, "transactionItems");
        this.externalId = externalId;
        this.date = date;
        this.status = status;
        this.description = description;
        this.totalAmount = totalAmount;
        this.marketplace = marketplace;
        this.taxAmountImported = taxAmountImported;
        this.taxRateImported = taxRateImported;
        this.taxableAmount = taxableAmount;
        this.currency = currency;
        this.addresses = addresses;
        this.transactionItems = transactionItems;
    }
    
    public CreditNoteCreate(
            String externalId,
            OffsetDateTime date,
            Status status,
            CurrencyEnum currency,
            List<CreditNoteItemCreateUpdate> transactionItems) {
        this(externalId, date, status,
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            currency, JsonNullable.undefined(), transactionItems);
    }

    /**
     * Unique identifier for the credit note in the external system.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * Date when the credit note was issued or created.
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Current state of the credit note in its lifecycle.
     */
    @JsonIgnore
    public Status status() {
        return status;
    }

    /**
     * Brief explanation or reason for issuing the credit note.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Total monetary value of the credit note, including all items and taxes.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreditNoteCreateTotalAmount> totalAmount() {
        return (Optional<CreditNoteCreateTotalAmount>) totalAmount;
    }

    /**
     * Indicates whether this credit note is associated with a marketplace transaction.
     */
    @JsonIgnore
    public JsonNullable<Boolean> marketplace() {
        return marketplace;
    }

    /**
     * Pre-calculated total tax amount for the entire credit note, if provided by the external system.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreditNoteCreateTaxAmountImported> taxAmountImported() {
        return (JsonNullable<CreditNoteCreateTaxAmountImported>) taxAmountImported;
    }

    /**
     * Pre-calculated overall tax rate for the credit note, if provided by the external system.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreditNoteCreateTaxRateImported> taxRateImported() {
        return (JsonNullable<CreditNoteCreateTaxRateImported>) taxRateImported;
    }

    /**
     * Total portion of the credit note amount subject to taxation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreditNoteCreateTaxableAmount> taxableAmount() {
        return (JsonNullable<CreditNoteCreateTaxableAmount>) taxableAmount;
    }

    @JsonIgnore
    public CurrencyEnum currency() {
        return currency;
    }

    /**
     * A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TransactionAddressBuilder>> addresses() {
        return (JsonNullable<List<TransactionAddressBuilder>>) addresses;
    }

    /**
     * Detailed list of individual items included in this credit note.
     */
    @JsonIgnore
    public List<CreditNoteItemCreateUpdate> transactionItems() {
        return transactionItems;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the credit note in the external system.
     */
    public CreditNoteCreate withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Date when the credit note was issued or created.
     */
    public CreditNoteCreate withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Current state of the credit note in its lifecycle.
     */
    public CreditNoteCreate withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Brief explanation or reason for issuing the credit note.
     */
    public CreditNoteCreate withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Brief explanation or reason for issuing the credit note.
     */
    public CreditNoteCreate withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Total monetary value of the credit note, including all items and taxes.
     */
    public CreditNoteCreate withTotalAmount(CreditNoteCreateTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    /**
     * Total monetary value of the credit note, including all items and taxes.
     */
    public CreditNoteCreate withTotalAmount(Optional<? extends CreditNoteCreateTotalAmount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Indicates whether this credit note is associated with a marketplace transaction.
     */
    public CreditNoteCreate withMarketplace(boolean marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = JsonNullable.of(marketplace);
        return this;
    }

    /**
     * Indicates whether this credit note is associated with a marketplace transaction.
     */
    public CreditNoteCreate withMarketplace(JsonNullable<Boolean> marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Pre-calculated total tax amount for the entire credit note, if provided by the external system.
     */
    public CreditNoteCreate withTaxAmountImported(CreditNoteCreateTaxAmountImported taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = JsonNullable.of(taxAmountImported);
        return this;
    }

    /**
     * Pre-calculated total tax amount for the entire credit note, if provided by the external system.
     */
    public CreditNoteCreate withTaxAmountImported(JsonNullable<? extends CreditNoteCreateTaxAmountImported> taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = taxAmountImported;
        return this;
    }

    /**
     * Pre-calculated overall tax rate for the credit note, if provided by the external system.
     */
    public CreditNoteCreate withTaxRateImported(CreditNoteCreateTaxRateImported taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = JsonNullable.of(taxRateImported);
        return this;
    }

    /**
     * Pre-calculated overall tax rate for the credit note, if provided by the external system.
     */
    public CreditNoteCreate withTaxRateImported(JsonNullable<? extends CreditNoteCreateTaxRateImported> taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = taxRateImported;
        return this;
    }

    /**
     * Total portion of the credit note amount subject to taxation.
     */
    public CreditNoteCreate withTaxableAmount(CreditNoteCreateTaxableAmount taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = JsonNullable.of(taxableAmount);
        return this;
    }

    /**
     * Total portion of the credit note amount subject to taxation.
     */
    public CreditNoteCreate withTaxableAmount(JsonNullable<? extends CreditNoteCreateTaxableAmount> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    public CreditNoteCreate withCurrency(CurrencyEnum currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
     */
    public CreditNoteCreate withAddresses(List<TransactionAddressBuilder> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = JsonNullable.of(addresses);
        return this;
    }

    /**
     * A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
     */
    public CreditNoteCreate withAddresses(JsonNullable<? extends List<TransactionAddressBuilder>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * Detailed list of individual items included in this credit note.
     */
    public CreditNoteCreate withTransactionItems(List<CreditNoteItemCreateUpdate> transactionItems) {
        Utils.checkNotNull(transactionItems, "transactionItems");
        this.transactionItems = transactionItems;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreditNoteCreate other = (CreditNoteCreate) o;
        return 
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.marketplace, other.marketplace) &&
            Utils.enhancedDeepEquals(this.taxAmountImported, other.taxAmountImported) &&
            Utils.enhancedDeepEquals(this.taxRateImported, other.taxRateImported) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.transactionItems, other.transactionItems);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalId, date, status,
            description, totalAmount, marketplace,
            taxAmountImported, taxRateImported, taxableAmount,
            currency, addresses, transactionItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreditNoteCreate.class,
                "externalId", externalId,
                "date", date,
                "status", status,
                "description", description,
                "totalAmount", totalAmount,
                "marketplace", marketplace,
                "taxAmountImported", taxAmountImported,
                "taxRateImported", taxRateImported,
                "taxableAmount", taxableAmount,
                "currency", currency,
                "addresses", addresses,
                "transactionItems", transactionItems);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String externalId;

        private OffsetDateTime date;

        private Status status;

        private JsonNullable<String> description = JsonNullable.undefined();

        private Optional<? extends CreditNoteCreateTotalAmount> totalAmount = Optional.empty();

        private JsonNullable<Boolean> marketplace = JsonNullable.undefined();

        private JsonNullable<? extends CreditNoteCreateTaxAmountImported> taxAmountImported = JsonNullable.undefined();

        private JsonNullable<? extends CreditNoteCreateTaxRateImported> taxRateImported = JsonNullable.undefined();

        private JsonNullable<? extends CreditNoteCreateTaxableAmount> taxableAmount = JsonNullable.undefined();

        private CurrencyEnum currency;

        private JsonNullable<? extends List<TransactionAddressBuilder>> addresses = JsonNullable.undefined();

        private List<CreditNoteItemCreateUpdate> transactionItems;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier for the credit note in the external system.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Date when the credit note was issued or created.
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Current state of the credit note in its lifecycle.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Brief explanation or reason for issuing the credit note.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Brief explanation or reason for issuing the credit note.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Total monetary value of the credit note, including all items and taxes.
         */
        public Builder totalAmount(CreditNoteCreateTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * Total monetary value of the credit note, including all items and taxes.
         */
        public Builder totalAmount(Optional<? extends CreditNoteCreateTotalAmount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        /**
         * Indicates whether this credit note is associated with a marketplace transaction.
         */
        public Builder marketplace(boolean marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = JsonNullable.of(marketplace);
            return this;
        }

        /**
         * Indicates whether this credit note is associated with a marketplace transaction.
         */
        public Builder marketplace(JsonNullable<Boolean> marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = marketplace;
            return this;
        }


        /**
         * Pre-calculated total tax amount for the entire credit note, if provided by the external system.
         */
        public Builder taxAmountImported(CreditNoteCreateTaxAmountImported taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = JsonNullable.of(taxAmountImported);
            return this;
        }

        /**
         * Pre-calculated total tax amount for the entire credit note, if provided by the external system.
         */
        public Builder taxAmountImported(JsonNullable<? extends CreditNoteCreateTaxAmountImported> taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = taxAmountImported;
            return this;
        }


        /**
         * Pre-calculated overall tax rate for the credit note, if provided by the external system.
         */
        public Builder taxRateImported(CreditNoteCreateTaxRateImported taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = JsonNullable.of(taxRateImported);
            return this;
        }

        /**
         * Pre-calculated overall tax rate for the credit note, if provided by the external system.
         */
        public Builder taxRateImported(JsonNullable<? extends CreditNoteCreateTaxRateImported> taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = taxRateImported;
            return this;
        }


        /**
         * Total portion of the credit note amount subject to taxation.
         */
        public Builder taxableAmount(CreditNoteCreateTaxableAmount taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = JsonNullable.of(taxableAmount);
            return this;
        }

        /**
         * Total portion of the credit note amount subject to taxation.
         */
        public Builder taxableAmount(JsonNullable<? extends CreditNoteCreateTaxableAmount> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        public Builder currency(CurrencyEnum currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
         */
        public Builder addresses(List<TransactionAddressBuilder> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = JsonNullable.of(addresses);
            return this;
        }

        /**
         * A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
         */
        public Builder addresses(JsonNullable<? extends List<TransactionAddressBuilder>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        /**
         * Detailed list of individual items included in this credit note.
         */
        public Builder transactionItems(List<CreditNoteItemCreateUpdate> transactionItems) {
            Utils.checkNotNull(transactionItems, "transactionItems");
            this.transactionItems = transactionItems;
            return this;
        }

        public CreditNoteCreate build() {

            return new CreditNoteCreate(
                externalId, date, status,
                description, totalAmount, marketplace,
                taxAmountImported, taxRateImported, taxableAmount,
                currency, addresses, transactionItems);
        }

    }
}
