/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class CreditNoteItemCreateUpdate {
    /**
     * Unique identifier for the credit note item in the external system.
     */
    @JsonProperty("external_id")
    private String externalId;

    /**
     * Date when the credit note item was issued or created.
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Brief explanation or details about the credit note item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Unique identifier for the associated product in the external system.
     */
    @JsonProperty("external_product_id")
    private String externalProductId;

    /**
     * Number of units or amount of the product being credited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<Double> quantity;

    /**
     * Total monetary value of the credit note item before taxes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Double> amount;

    /**
     * Pre-calculated tax amount for the item, if provided by the external system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount_imported")
    private Optional<Double> taxAmountImported;

    /**
     * Pre-calculated tax rate for the item, if provided by the external system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_imported")
    private Optional<Double> taxRateImported;

    /**
     * Portion of the item amount subject to taxation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private Optional<Double> taxableAmount;

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_exemption")
    private Optional<? extends TaxExemptionEnum> taxExemption;

    /**
     * Detailed breakdown of individual tax components applied to this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_items")
    private Optional<? extends List<TaxItemBuilder>> taxItems;

    @JsonCreator
    public CreditNoteItemCreateUpdate(
            @JsonProperty("external_id") String externalId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("external_product_id") String externalProductId,
            @JsonProperty("quantity") Optional<Double> quantity,
            @JsonProperty("amount") Optional<Double> amount,
            @JsonProperty("tax_amount_imported") Optional<Double> taxAmountImported,
            @JsonProperty("tax_rate_imported") Optional<Double> taxRateImported,
            @JsonProperty("taxable_amount") Optional<Double> taxableAmount,
            @JsonProperty("tax_exemption") Optional<? extends TaxExemptionEnum> taxExemption,
            @JsonProperty("tax_items") Optional<? extends List<TaxItemBuilder>> taxItems) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(externalProductId, "externalProductId");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(taxExemption, "taxExemption");
        Utils.checkNotNull(taxItems, "taxItems");
        this.externalId = externalId;
        this.date = date;
        this.description = description;
        this.externalProductId = externalProductId;
        this.quantity = quantity;
        this.amount = amount;
        this.taxAmountImported = taxAmountImported;
        this.taxRateImported = taxRateImported;
        this.taxableAmount = taxableAmount;
        this.taxExemption = taxExemption;
        this.taxItems = taxItems;
    }
    
    public CreditNoteItemCreateUpdate(
            String externalId,
            OffsetDateTime date,
            String externalProductId) {
        this(externalId, date, Optional.empty(),
            externalProductId, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for the credit note item in the external system.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * Date when the credit note item was issued or created.
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Brief explanation or details about the credit note item.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Unique identifier for the associated product in the external system.
     */
    @JsonIgnore
    public String externalProductId() {
        return externalProductId;
    }

    /**
     * Number of units or amount of the product being credited.
     */
    @JsonIgnore
    public Optional<Double> quantity() {
        return quantity;
    }

    /**
     * Total monetary value of the credit note item before taxes.
     */
    @JsonIgnore
    public Optional<Double> amount() {
        return amount;
    }

    /**
     * Pre-calculated tax amount for the item, if provided by the external system.
     */
    @JsonIgnore
    public Optional<Double> taxAmountImported() {
        return taxAmountImported;
    }

    /**
     * Pre-calculated tax rate for the item, if provided by the external system.
     */
    @JsonIgnore
    public Optional<Double> taxRateImported() {
        return taxRateImported;
    }

    /**
     * Portion of the item amount subject to taxation.
     */
    @JsonIgnore
    public Optional<Double> taxableAmount() {
        return taxableAmount;
    }

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxExemptionEnum> taxExemption() {
        return (Optional<TaxExemptionEnum>) taxExemption;
    }

    /**
     * Detailed breakdown of individual tax components applied to this item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TaxItemBuilder>> taxItems() {
        return (Optional<List<TaxItemBuilder>>) taxItems;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the credit note item in the external system.
     */
    public CreditNoteItemCreateUpdate withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Date when the credit note item was issued or created.
     */
    public CreditNoteItemCreateUpdate withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Brief explanation or details about the credit note item.
     */
    public CreditNoteItemCreateUpdate withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * Brief explanation or details about the credit note item.
     */
    public CreditNoteItemCreateUpdate withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Unique identifier for the associated product in the external system.
     */
    public CreditNoteItemCreateUpdate withExternalProductId(String externalProductId) {
        Utils.checkNotNull(externalProductId, "externalProductId");
        this.externalProductId = externalProductId;
        return this;
    }

    /**
     * Number of units or amount of the product being credited.
     */
    public CreditNoteItemCreateUpdate withQuantity(double quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }


    /**
     * Number of units or amount of the product being credited.
     */
    public CreditNoteItemCreateUpdate withQuantity(Optional<Double> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Total monetary value of the credit note item before taxes.
     */
    public CreditNoteItemCreateUpdate withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * Total monetary value of the credit note item before taxes.
     */
    public CreditNoteItemCreateUpdate withAmount(Optional<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Pre-calculated tax amount for the item, if provided by the external system.
     */
    public CreditNoteItemCreateUpdate withTaxAmountImported(double taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = Optional.ofNullable(taxAmountImported);
        return this;
    }


    /**
     * Pre-calculated tax amount for the item, if provided by the external system.
     */
    public CreditNoteItemCreateUpdate withTaxAmountImported(Optional<Double> taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = taxAmountImported;
        return this;
    }

    /**
     * Pre-calculated tax rate for the item, if provided by the external system.
     */
    public CreditNoteItemCreateUpdate withTaxRateImported(double taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = Optional.ofNullable(taxRateImported);
        return this;
    }


    /**
     * Pre-calculated tax rate for the item, if provided by the external system.
     */
    public CreditNoteItemCreateUpdate withTaxRateImported(Optional<Double> taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = taxRateImported;
        return this;
    }

    /**
     * Portion of the item amount subject to taxation.
     */
    public CreditNoteItemCreateUpdate withTaxableAmount(double taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = Optional.ofNullable(taxableAmount);
        return this;
    }


    /**
     * Portion of the item amount subject to taxation.
     */
    public CreditNoteItemCreateUpdate withTaxableAmount(Optional<Double> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    public CreditNoteItemCreateUpdate withTaxExemption(TaxExemptionEnum taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = Optional.ofNullable(taxExemption);
        return this;
    }


    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    public CreditNoteItemCreateUpdate withTaxExemption(Optional<? extends TaxExemptionEnum> taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = taxExemption;
        return this;
    }

    /**
     * Detailed breakdown of individual tax components applied to this item.
     */
    public CreditNoteItemCreateUpdate withTaxItems(List<TaxItemBuilder> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = Optional.ofNullable(taxItems);
        return this;
    }


    /**
     * Detailed breakdown of individual tax components applied to this item.
     */
    public CreditNoteItemCreateUpdate withTaxItems(Optional<? extends List<TaxItemBuilder>> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = taxItems;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreditNoteItemCreateUpdate other = (CreditNoteItemCreateUpdate) o;
        return 
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.externalProductId, other.externalProductId) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.taxAmountImported, other.taxAmountImported) &&
            Utils.enhancedDeepEquals(this.taxRateImported, other.taxRateImported) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.taxExemption, other.taxExemption) &&
            Utils.enhancedDeepEquals(this.taxItems, other.taxItems);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalId, date, description,
            externalProductId, quantity, amount,
            taxAmountImported, taxRateImported, taxableAmount,
            taxExemption, taxItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreditNoteItemCreateUpdate.class,
                "externalId", externalId,
                "date", date,
                "description", description,
                "externalProductId", externalProductId,
                "quantity", quantity,
                "amount", amount,
                "taxAmountImported", taxAmountImported,
                "taxRateImported", taxRateImported,
                "taxableAmount", taxableAmount,
                "taxExemption", taxExemption,
                "taxItems", taxItems);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String externalId;

        private OffsetDateTime date;

        private Optional<String> description = Optional.empty();

        private String externalProductId;

        private Optional<Double> quantity;

        private Optional<Double> amount;

        private Optional<Double> taxAmountImported = Optional.empty();

        private Optional<Double> taxRateImported = Optional.empty();

        private Optional<Double> taxableAmount = Optional.empty();

        private Optional<? extends TaxExemptionEnum> taxExemption = Optional.empty();

        private Optional<? extends List<TaxItemBuilder>> taxItems = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier for the credit note item in the external system.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Date when the credit note item was issued or created.
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Brief explanation or details about the credit note item.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Brief explanation or details about the credit note item.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Unique identifier for the associated product in the external system.
         */
        public Builder externalProductId(String externalProductId) {
            Utils.checkNotNull(externalProductId, "externalProductId");
            this.externalProductId = externalProductId;
            return this;
        }


        /**
         * Number of units or amount of the product being credited.
         */
        public Builder quantity(double quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * Number of units or amount of the product being credited.
         */
        public Builder quantity(Optional<Double> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * Total monetary value of the credit note item before taxes.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Total monetary value of the credit note item before taxes.
         */
        public Builder amount(Optional<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Pre-calculated tax amount for the item, if provided by the external system.
         */
        public Builder taxAmountImported(double taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = Optional.ofNullable(taxAmountImported);
            return this;
        }

        /**
         * Pre-calculated tax amount for the item, if provided by the external system.
         */
        public Builder taxAmountImported(Optional<Double> taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = taxAmountImported;
            return this;
        }


        /**
         * Pre-calculated tax rate for the item, if provided by the external system.
         */
        public Builder taxRateImported(double taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = Optional.ofNullable(taxRateImported);
            return this;
        }

        /**
         * Pre-calculated tax rate for the item, if provided by the external system.
         */
        public Builder taxRateImported(Optional<Double> taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = taxRateImported;
            return this;
        }


        /**
         * Portion of the item amount subject to taxation.
         */
        public Builder taxableAmount(double taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = Optional.ofNullable(taxableAmount);
            return this;
        }

        /**
         * Portion of the item amount subject to taxation.
         */
        public Builder taxableAmount(Optional<Double> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        /**
         * This enum is used to determine if a transaction is exempt from tax.
         */
        public Builder taxExemption(TaxExemptionEnum taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = Optional.ofNullable(taxExemption);
            return this;
        }

        /**
         * This enum is used to determine if a transaction is exempt from tax.
         */
        public Builder taxExemption(Optional<? extends TaxExemptionEnum> taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = taxExemption;
            return this;
        }


        /**
         * Detailed breakdown of individual tax components applied to this item.
         */
        public Builder taxItems(List<TaxItemBuilder> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = Optional.ofNullable(taxItems);
            return this;
        }

        /**
         * Detailed breakdown of individual tax components applied to this item.
         */
        public Builder taxItems(Optional<? extends List<TaxItemBuilder>> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = taxItems;
            return this;
        }

        public CreditNoteItemCreateUpdate build() {
            if (quantity == null) {
                quantity = _SINGLETON_VALUE_Quantity.value();
            }
            if (amount == null) {
                amount = _SINGLETON_VALUE_Amount.value();
            }

            return new CreditNoteItemCreateUpdate(
                externalId, date, description,
                externalProductId, quantity, amount,
                taxAmountImported, taxRateImported, taxableAmount,
                taxExemption, taxItems);
        }


        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Quantity =
                new LazySingletonValue<>(
                        "quantity",
                        "\"1.0\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Amount =
                new LazySingletonValue<>(
                        "amount",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});
    }
}
