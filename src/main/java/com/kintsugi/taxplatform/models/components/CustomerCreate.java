/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class CustomerCreate {
    /**
     * Customer's phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * Primary street address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_1")
    private Optional<String> street1;

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_2")
    private Optional<String> street2;

    /**
     * City where the customer resides.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * County or district of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private Optional<String> county;

    /**
     * State or province of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    /**
     * ZIP or Postal code of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private Optional<String> postalCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<? extends CountryCodeEnum> country;

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_address")
    private Optional<String> fullAddress;

    /**
     * Name of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * External identifier associated with the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private Optional<String> externalId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends StatusEnum> status;

    /**
     * Customer's email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends SourceEnum> source;

    /**
     * Identifier for the connection source, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_id")
    private Optional<String> connectionId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_status")
    private Optional<? extends AddressStatus> addressStatus;

    /**
     * Registration number of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_number")
    private Optional<String> registrationNumber;

    /**
     * External friendly identifier associated with the customer. We need it for netsuite.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_friendly_id")
    private Optional<String> externalFriendlyId;

    /**
     * Customer tax registrations associated with the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_tax_registrations")
    private Optional<? extends List<CustomerTaxRegistrationRead>> customerTaxRegistrations;

    @JsonCreator
    public CustomerCreate(
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("street_1") Optional<String> street1,
            @JsonProperty("street_2") Optional<String> street2,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("county") Optional<String> county,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("postal_code") Optional<String> postalCode,
            @JsonProperty("country") Optional<? extends CountryCodeEnum> country,
            @JsonProperty("full_address") Optional<String> fullAddress,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("external_id") Optional<String> externalId,
            @JsonProperty("status") Optional<? extends StatusEnum> status,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("source") Optional<? extends SourceEnum> source,
            @JsonProperty("connection_id") Optional<String> connectionId,
            @JsonProperty("address_status") Optional<? extends AddressStatus> addressStatus,
            @JsonProperty("registration_number") Optional<String> registrationNumber,
            @JsonProperty("external_friendly_id") Optional<String> externalFriendlyId,
            @JsonProperty("customer_tax_registrations") Optional<? extends List<CustomerTaxRegistrationRead>> customerTaxRegistrations) {
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(county, "county");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(fullAddress, "fullAddress");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(addressStatus, "addressStatus");
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        Utils.checkNotNull(customerTaxRegistrations, "customerTaxRegistrations");
        this.phone = phone;
        this.street1 = street1;
        this.street2 = street2;
        this.city = city;
        this.county = county;
        this.state = state;
        this.postalCode = postalCode;
        this.country = country;
        this.fullAddress = fullAddress;
        this.name = name;
        this.externalId = externalId;
        this.status = status;
        this.email = email;
        this.source = source;
        this.connectionId = connectionId;
        this.addressStatus = addressStatus;
        this.registrationNumber = registrationNumber;
        this.externalFriendlyId = externalFriendlyId;
        this.customerTaxRegistrations = customerTaxRegistrations;
    }
    
    public CustomerCreate() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Customer's phone number
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * Primary street address.
     */
    @JsonIgnore
    public Optional<String> street1() {
        return street1;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    @JsonIgnore
    public Optional<String> street2() {
        return street2;
    }

    /**
     * City where the customer resides.
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * County or district of the customer.
     */
    @JsonIgnore
    public Optional<String> county() {
        return county;
    }

    /**
     * State or province of the customer.
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountryCodeEnum> country() {
        return (Optional<CountryCodeEnum>) country;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    @JsonIgnore
    public Optional<String> fullAddress() {
        return fullAddress;
    }

    /**
     * Name of the customer.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * External identifier associated with the customer.
     */
    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StatusEnum> status() {
        return (Optional<StatusEnum>) status;
    }

    /**
     * Customer's email address
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceEnum> source() {
        return (Optional<SourceEnum>) source;
    }

    /**
     * Identifier for the connection source, if applicable.
     */
    @JsonIgnore
    public Optional<String> connectionId() {
        return connectionId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AddressStatus> addressStatus() {
        return (Optional<AddressStatus>) addressStatus;
    }

    /**
     * Registration number of the customer.
     */
    @JsonIgnore
    public Optional<String> registrationNumber() {
        return registrationNumber;
    }

    /**
     * External friendly identifier associated with the customer. We need it for netsuite.
     */
    @JsonIgnore
    public Optional<String> externalFriendlyId() {
        return externalFriendlyId;
    }

    /**
     * Customer tax registrations associated with the customer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomerTaxRegistrationRead>> customerTaxRegistrations() {
        return (Optional<List<CustomerTaxRegistrationRead>>) customerTaxRegistrations;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Customer's phone number
     */
    public CustomerCreate withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }


    /**
     * Customer's phone number
     */
    public CustomerCreate withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * Primary street address.
     */
    public CustomerCreate withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = Optional.ofNullable(street1);
        return this;
    }


    /**
     * Primary street address.
     */
    public CustomerCreate withStreet1(Optional<String> street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    public CustomerCreate withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = Optional.ofNullable(street2);
        return this;
    }


    /**
     * Additional street address details, such as an apartment or suite number.
     */
    public CustomerCreate withStreet2(Optional<String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    /**
     * City where the customer resides.
     */
    public CustomerCreate withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }


    /**
     * City where the customer resides.
     */
    public CustomerCreate withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * County or district of the customer.
     */
    public CustomerCreate withCounty(String county) {
        Utils.checkNotNull(county, "county");
        this.county = Optional.ofNullable(county);
        return this;
    }


    /**
     * County or district of the customer.
     */
    public CustomerCreate withCounty(Optional<String> county) {
        Utils.checkNotNull(county, "county");
        this.county = county;
        return this;
    }

    /**
     * State or province of the customer.
     */
    public CustomerCreate withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }


    /**
     * State or province of the customer.
     */
    public CustomerCreate withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    public CustomerCreate withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }


    /**
     * ZIP or Postal code of the customer.
     */
    public CustomerCreate withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    public CustomerCreate withCountry(CountryCodeEnum country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    public CustomerCreate withCountry(Optional<? extends CountryCodeEnum> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    public CustomerCreate withFullAddress(String fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = Optional.ofNullable(fullAddress);
        return this;
    }


    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    public CustomerCreate withFullAddress(Optional<String> fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = fullAddress;
        return this;
    }

    /**
     * Name of the customer.
     */
    public CustomerCreate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * Name of the customer.
     */
    public CustomerCreate withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * External identifier associated with the customer.
     */
    public CustomerCreate withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }


    /**
     * External identifier associated with the customer.
     */
    public CustomerCreate withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public CustomerCreate withStatus(StatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public CustomerCreate withStatus(Optional<? extends StatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Customer's email address
     */
    public CustomerCreate withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }


    /**
     * Customer's email address
     */
    public CustomerCreate withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public CustomerCreate withSource(SourceEnum source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }


    public CustomerCreate withSource(Optional<? extends SourceEnum> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Identifier for the connection source, if applicable.
     */
    public CustomerCreate withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = Optional.ofNullable(connectionId);
        return this;
    }


    /**
     * Identifier for the connection source, if applicable.
     */
    public CustomerCreate withConnectionId(Optional<String> connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    public CustomerCreate withAddressStatus(AddressStatus addressStatus) {
        Utils.checkNotNull(addressStatus, "addressStatus");
        this.addressStatus = Optional.ofNullable(addressStatus);
        return this;
    }


    public CustomerCreate withAddressStatus(Optional<? extends AddressStatus> addressStatus) {
        Utils.checkNotNull(addressStatus, "addressStatus");
        this.addressStatus = addressStatus;
        return this;
    }

    /**
     * Registration number of the customer.
     */
    public CustomerCreate withRegistrationNumber(String registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = Optional.ofNullable(registrationNumber);
        return this;
    }


    /**
     * Registration number of the customer.
     */
    public CustomerCreate withRegistrationNumber(Optional<String> registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = registrationNumber;
        return this;
    }

    /**
     * External friendly identifier associated with the customer. We need it for netsuite.
     */
    public CustomerCreate withExternalFriendlyId(String externalFriendlyId) {
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        this.externalFriendlyId = Optional.ofNullable(externalFriendlyId);
        return this;
    }


    /**
     * External friendly identifier associated with the customer. We need it for netsuite.
     */
    public CustomerCreate withExternalFriendlyId(Optional<String> externalFriendlyId) {
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        this.externalFriendlyId = externalFriendlyId;
        return this;
    }

    /**
     * Customer tax registrations associated with the customer.
     */
    public CustomerCreate withCustomerTaxRegistrations(List<CustomerTaxRegistrationRead> customerTaxRegistrations) {
        Utils.checkNotNull(customerTaxRegistrations, "customerTaxRegistrations");
        this.customerTaxRegistrations = Optional.ofNullable(customerTaxRegistrations);
        return this;
    }


    /**
     * Customer tax registrations associated with the customer.
     */
    public CustomerCreate withCustomerTaxRegistrations(Optional<? extends List<CustomerTaxRegistrationRead>> customerTaxRegistrations) {
        Utils.checkNotNull(customerTaxRegistrations, "customerTaxRegistrations");
        this.customerTaxRegistrations = customerTaxRegistrations;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomerCreate other = (CustomerCreate) o;
        return 
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.street1, other.street1) &&
            Utils.enhancedDeepEquals(this.street2, other.street2) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.county, other.county) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.fullAddress, other.fullAddress) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId) &&
            Utils.enhancedDeepEquals(this.addressStatus, other.addressStatus) &&
            Utils.enhancedDeepEquals(this.registrationNumber, other.registrationNumber) &&
            Utils.enhancedDeepEquals(this.externalFriendlyId, other.externalFriendlyId) &&
            Utils.enhancedDeepEquals(this.customerTaxRegistrations, other.customerTaxRegistrations);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            phone, street1, street2,
            city, county, state,
            postalCode, country, fullAddress,
            name, externalId, status,
            email, source, connectionId,
            addressStatus, registrationNumber, externalFriendlyId,
            customerTaxRegistrations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomerCreate.class,
                "phone", phone,
                "street1", street1,
                "street2", street2,
                "city", city,
                "county", county,
                "state", state,
                "postalCode", postalCode,
                "country", country,
                "fullAddress", fullAddress,
                "name", name,
                "externalId", externalId,
                "status", status,
                "email", email,
                "source", source,
                "connectionId", connectionId,
                "addressStatus", addressStatus,
                "registrationNumber", registrationNumber,
                "externalFriendlyId", externalFriendlyId,
                "customerTaxRegistrations", customerTaxRegistrations);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> phone = Optional.empty();

        private Optional<String> street1 = Optional.empty();

        private Optional<String> street2 = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> county = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        private Optional<? extends CountryCodeEnum> country = Optional.empty();

        private Optional<String> fullAddress = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Optional<? extends StatusEnum> status = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<? extends SourceEnum> source = Optional.empty();

        private Optional<String> connectionId = Optional.empty();

        private Optional<? extends AddressStatus> addressStatus = Optional.empty();

        private Optional<String> registrationNumber = Optional.empty();

        private Optional<String> externalFriendlyId = Optional.empty();

        private Optional<? extends List<CustomerTaxRegistrationRead>> customerTaxRegistrations = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Customer's phone number
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Customer's phone number
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }


        /**
         * Primary street address.
         */
        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = Optional.ofNullable(street1);
            return this;
        }

        /**
         * Primary street address.
         */
        public Builder street1(Optional<String> street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }


        /**
         * Additional street address details, such as an apartment or suite number.
         */
        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = Optional.ofNullable(street2);
            return this;
        }

        /**
         * Additional street address details, such as an apartment or suite number.
         */
        public Builder street2(Optional<String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }


        /**
         * City where the customer resides.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * City where the customer resides.
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * County or district of the customer.
         */
        public Builder county(String county) {
            Utils.checkNotNull(county, "county");
            this.county = Optional.ofNullable(county);
            return this;
        }

        /**
         * County or district of the customer.
         */
        public Builder county(Optional<String> county) {
            Utils.checkNotNull(county, "county");
            this.county = county;
            return this;
        }


        /**
         * State or province of the customer.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * State or province of the customer.
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * ZIP or Postal code of the customer.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * ZIP or Postal code of the customer.
         */
        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        public Builder country(CountryCodeEnum country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<? extends CountryCodeEnum> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Complete address string of the customer, which can be used as an alternative to individual fields.
         */
        public Builder fullAddress(String fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = Optional.ofNullable(fullAddress);
            return this;
        }

        /**
         * Complete address string of the customer, which can be used as an alternative to individual fields.
         */
        public Builder fullAddress(Optional<String> fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = fullAddress;
            return this;
        }


        /**
         * Name of the customer.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the customer.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * External identifier associated with the customer.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        /**
         * External identifier associated with the customer.
         */
        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        public Builder status(StatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends StatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Customer's email address
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * Customer's email address
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        public Builder source(SourceEnum source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Optional<? extends SourceEnum> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        /**
         * Identifier for the connection source, if applicable.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = Optional.ofNullable(connectionId);
            return this;
        }

        /**
         * Identifier for the connection source, if applicable.
         */
        public Builder connectionId(Optional<String> connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }


        public Builder addressStatus(AddressStatus addressStatus) {
            Utils.checkNotNull(addressStatus, "addressStatus");
            this.addressStatus = Optional.ofNullable(addressStatus);
            return this;
        }

        public Builder addressStatus(Optional<? extends AddressStatus> addressStatus) {
            Utils.checkNotNull(addressStatus, "addressStatus");
            this.addressStatus = addressStatus;
            return this;
        }


        /**
         * Registration number of the customer.
         */
        public Builder registrationNumber(String registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = Optional.ofNullable(registrationNumber);
            return this;
        }

        /**
         * Registration number of the customer.
         */
        public Builder registrationNumber(Optional<String> registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = registrationNumber;
            return this;
        }


        /**
         * External friendly identifier associated with the customer. We need it for netsuite.
         */
        public Builder externalFriendlyId(String externalFriendlyId) {
            Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
            this.externalFriendlyId = Optional.ofNullable(externalFriendlyId);
            return this;
        }

        /**
         * External friendly identifier associated with the customer. We need it for netsuite.
         */
        public Builder externalFriendlyId(Optional<String> externalFriendlyId) {
            Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
            this.externalFriendlyId = externalFriendlyId;
            return this;
        }


        /**
         * Customer tax registrations associated with the customer.
         */
        public Builder customerTaxRegistrations(List<CustomerTaxRegistrationRead> customerTaxRegistrations) {
            Utils.checkNotNull(customerTaxRegistrations, "customerTaxRegistrations");
            this.customerTaxRegistrations = Optional.ofNullable(customerTaxRegistrations);
            return this;
        }

        /**
         * Customer tax registrations associated with the customer.
         */
        public Builder customerTaxRegistrations(Optional<? extends List<CustomerTaxRegistrationRead>> customerTaxRegistrations) {
            Utils.checkNotNull(customerTaxRegistrations, "customerTaxRegistrations");
            this.customerTaxRegistrations = customerTaxRegistrations;
            return this;
        }

        public CustomerCreate build() {

            return new CustomerCreate(
                phone, street1, street2,
                city, county, state,
                postalCode, country, fullAddress,
                name, externalId, status,
                email, source, connectionId,
                addressStatus, registrationNumber, externalFriendlyId,
                customerTaxRegistrations);
        }

    }
}
