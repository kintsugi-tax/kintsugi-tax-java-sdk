/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;


public class CustomerTaxRegistrationRead {

    @JsonProperty("id")
    private String id;


    @JsonProperty("customer_id")
    private String customerId;


    @JsonProperty("country_code")
    private CountryCodeEnum countryCode;

    /**
     * Enum for customer tax registration types.
     */
    @JsonProperty("tax_type")
    private CustomerTaxTypeEnum taxType;


    @JsonProperty("tax_id")
    private String taxId;


    @JsonProperty("is_valid")
    private boolean isValid;

    @JsonCreator
    public CustomerTaxRegistrationRead(
            @JsonProperty("id") String id,
            @JsonProperty("customer_id") String customerId,
            @JsonProperty("country_code") CountryCodeEnum countryCode,
            @JsonProperty("tax_type") CustomerTaxTypeEnum taxType,
            @JsonProperty("tax_id") String taxId,
            @JsonProperty("is_valid") boolean isValid) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(taxType, "taxType");
        Utils.checkNotNull(taxId, "taxId");
        Utils.checkNotNull(isValid, "isValid");
        this.id = id;
        this.customerId = customerId;
        this.countryCode = countryCode;
        this.taxType = taxType;
        this.taxId = taxId;
        this.isValid = isValid;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    @JsonIgnore
    public CountryCodeEnum countryCode() {
        return countryCode;
    }

    /**
     * Enum for customer tax registration types.
     */
    @JsonIgnore
    public CustomerTaxTypeEnum taxType() {
        return taxType;
    }

    @JsonIgnore
    public String taxId() {
        return taxId;
    }

    @JsonIgnore
    public boolean isValid() {
        return isValid;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CustomerTaxRegistrationRead withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CustomerTaxRegistrationRead withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public CustomerTaxRegistrationRead withCountryCode(CountryCodeEnum countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Enum for customer tax registration types.
     */
    public CustomerTaxRegistrationRead withTaxType(CustomerTaxTypeEnum taxType) {
        Utils.checkNotNull(taxType, "taxType");
        this.taxType = taxType;
        return this;
    }

    public CustomerTaxRegistrationRead withTaxId(String taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = taxId;
        return this;
    }

    public CustomerTaxRegistrationRead withIsValid(boolean isValid) {
        Utils.checkNotNull(isValid, "isValid");
        this.isValid = isValid;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomerTaxRegistrationRead other = (CustomerTaxRegistrationRead) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.taxType, other.taxType) &&
            Utils.enhancedDeepEquals(this.taxId, other.taxId) &&
            Utils.enhancedDeepEquals(this.isValid, other.isValid);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, customerId, countryCode,
            taxType, taxId, isValid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomerTaxRegistrationRead.class,
                "id", id,
                "customerId", customerId,
                "countryCode", countryCode,
                "taxType", taxType,
                "taxId", taxId,
                "isValid", isValid);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String customerId;

        private CountryCodeEnum countryCode;

        private CustomerTaxTypeEnum taxType;

        private String taxId;

        private Boolean isValid;

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        public Builder countryCode(CountryCodeEnum countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }


        /**
         * Enum for customer tax registration types.
         */
        public Builder taxType(CustomerTaxTypeEnum taxType) {
            Utils.checkNotNull(taxType, "taxType");
            this.taxType = taxType;
            return this;
        }


        public Builder taxId(String taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = taxId;
            return this;
        }


        public Builder isValid(boolean isValid) {
            Utils.checkNotNull(isValid, "isValid");
            this.isValid = isValid;
            return this;
        }

        public CustomerTaxRegistrationRead build() {

            return new CustomerTaxRegistrationRead(
                id, customerId, countryCode,
                taxType, taxId, isValid);
        }

    }
}
