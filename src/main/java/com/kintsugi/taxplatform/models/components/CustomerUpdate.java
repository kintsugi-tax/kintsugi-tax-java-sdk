/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CustomerUpdate {
    /**
     * Phone number associated with the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<String> phone;

    /**
     * Primary street address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_1")
    private JsonNullable<String> street1;

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_2")
    private JsonNullable<String> street2;

    /**
     * City where the customer resides.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * County or district of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private JsonNullable<String> county;

    /**
     * State or province of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    /**
     * ZIP or Postal code of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<? extends CountryCodeEnum> country;

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_address")
    private JsonNullable<String> fullAddress;

    /**
     * Name of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * Status of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends StatusEnum> status;

    /**
     * Email address of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * Source of the customer's record
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private JsonNullable<? extends SourceEnum> source;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_status")
    private Optional<? extends AddressStatus> addressStatus;

    /**
     * External identifier associated with the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;

    @JsonCreator
    public CustomerUpdate(
            @JsonProperty("phone") JsonNullable<String> phone,
            @JsonProperty("street_1") JsonNullable<String> street1,
            @JsonProperty("street_2") JsonNullable<String> street2,
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("county") JsonNullable<String> county,
            @JsonProperty("state") JsonNullable<String> state,
            @JsonProperty("postal_code") JsonNullable<String> postalCode,
            @JsonProperty("country") JsonNullable<? extends CountryCodeEnum> country,
            @JsonProperty("full_address") JsonNullable<String> fullAddress,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("status") JsonNullable<? extends StatusEnum> status,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("source") JsonNullable<? extends SourceEnum> source,
            @JsonProperty("address_status") Optional<? extends AddressStatus> addressStatus,
            @JsonProperty("external_id") JsonNullable<String> externalId) {
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(county, "county");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(fullAddress, "fullAddress");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(addressStatus, "addressStatus");
        Utils.checkNotNull(externalId, "externalId");
        this.phone = phone;
        this.street1 = street1;
        this.street2 = street2;
        this.city = city;
        this.county = county;
        this.state = state;
        this.postalCode = postalCode;
        this.country = country;
        this.fullAddress = fullAddress;
        this.name = name;
        this.status = status;
        this.email = email;
        this.source = source;
        this.addressStatus = addressStatus;
        this.externalId = externalId;
    }
    
    public CustomerUpdate() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Phone number associated with the customer.
     */
    @JsonIgnore
    public JsonNullable<String> phone() {
        return phone;
    }

    /**
     * Primary street address.
     */
    @JsonIgnore
    public JsonNullable<String> street1() {
        return street1;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    @JsonIgnore
    public JsonNullable<String> street2() {
        return street2;
    }

    /**
     * City where the customer resides.
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    /**
     * County or district of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> county() {
        return county;
    }

    /**
     * State or province of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> state() {
        return state;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> postalCode() {
        return postalCode;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CountryCodeEnum> country() {
        return (JsonNullable<CountryCodeEnum>) country;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    @JsonIgnore
    public JsonNullable<String> fullAddress() {
        return fullAddress;
    }

    /**
     * Name of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * Status of the customer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StatusEnum> status() {
        return (JsonNullable<StatusEnum>) status;
    }

    /**
     * Email address of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    /**
     * Source of the customer's record
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SourceEnum> source() {
        return (JsonNullable<SourceEnum>) source;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AddressStatus> addressStatus() {
        return (Optional<AddressStatus>) addressStatus;
    }

    /**
     * External identifier associated with the customer
     */
    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Phone number associated with the customer.
     */
    public CustomerUpdate withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    /**
     * Phone number associated with the customer.
     */
    public CustomerUpdate withPhone(JsonNullable<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * Primary street address.
     */
    public CustomerUpdate withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = JsonNullable.of(street1);
        return this;
    }

    /**
     * Primary street address.
     */
    public CustomerUpdate withStreet1(JsonNullable<String> street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    public CustomerUpdate withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = JsonNullable.of(street2);
        return this;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    public CustomerUpdate withStreet2(JsonNullable<String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    /**
     * City where the customer resides.
     */
    public CustomerUpdate withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * City where the customer resides.
     */
    public CustomerUpdate withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * County or district of the customer.
     */
    public CustomerUpdate withCounty(String county) {
        Utils.checkNotNull(county, "county");
        this.county = JsonNullable.of(county);
        return this;
    }

    /**
     * County or district of the customer.
     */
    public CustomerUpdate withCounty(JsonNullable<String> county) {
        Utils.checkNotNull(county, "county");
        this.county = county;
        return this;
    }

    /**
     * State or province of the customer.
     */
    public CustomerUpdate withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = JsonNullable.of(state);
        return this;
    }

    /**
     * State or province of the customer.
     */
    public CustomerUpdate withState(JsonNullable<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    public CustomerUpdate withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    public CustomerUpdate withPostalCode(JsonNullable<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    public CustomerUpdate withCountry(CountryCodeEnum country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    public CustomerUpdate withCountry(JsonNullable<? extends CountryCodeEnum> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    public CustomerUpdate withFullAddress(String fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = JsonNullable.of(fullAddress);
        return this;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    public CustomerUpdate withFullAddress(JsonNullable<String> fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = fullAddress;
        return this;
    }

    /**
     * Name of the customer.
     */
    public CustomerUpdate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Name of the customer.
     */
    public CustomerUpdate withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Status of the customer.
     */
    public CustomerUpdate withStatus(StatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Status of the customer.
     */
    public CustomerUpdate withStatus(JsonNullable<? extends StatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Email address of the customer.
     */
    public CustomerUpdate withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * Email address of the customer.
     */
    public CustomerUpdate withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Source of the customer's record
     */
    public CustomerUpdate withSource(SourceEnum source) {
        Utils.checkNotNull(source, "source");
        this.source = JsonNullable.of(source);
        return this;
    }

    /**
     * Source of the customer's record
     */
    public CustomerUpdate withSource(JsonNullable<? extends SourceEnum> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public CustomerUpdate withAddressStatus(AddressStatus addressStatus) {
        Utils.checkNotNull(addressStatus, "addressStatus");
        this.addressStatus = Optional.ofNullable(addressStatus);
        return this;
    }


    public CustomerUpdate withAddressStatus(Optional<? extends AddressStatus> addressStatus) {
        Utils.checkNotNull(addressStatus, "addressStatus");
        this.addressStatus = addressStatus;
        return this;
    }

    /**
     * External identifier associated with the customer
     */
    public CustomerUpdate withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    /**
     * External identifier associated with the customer
     */
    public CustomerUpdate withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomerUpdate other = (CustomerUpdate) o;
        return 
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.street1, other.street1) &&
            Utils.enhancedDeepEquals(this.street2, other.street2) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.county, other.county) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.fullAddress, other.fullAddress) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.addressStatus, other.addressStatus) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            phone, street1, street2,
            city, county, state,
            postalCode, country, fullAddress,
            name, status, email,
            source, addressStatus, externalId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomerUpdate.class,
                "phone", phone,
                "street1", street1,
                "street2", street2,
                "city", city,
                "county", county,
                "state", state,
                "postalCode", postalCode,
                "country", country,
                "fullAddress", fullAddress,
                "name", name,
                "status", status,
                "email", email,
                "source", source,
                "addressStatus", addressStatus,
                "externalId", externalId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> phone = JsonNullable.undefined();

        private JsonNullable<String> street1 = JsonNullable.undefined();

        private JsonNullable<String> street2 = JsonNullable.undefined();

        private JsonNullable<String> city = JsonNullable.undefined();

        private JsonNullable<String> county = JsonNullable.undefined();

        private JsonNullable<String> state = JsonNullable.undefined();

        private JsonNullable<String> postalCode = JsonNullable.undefined();

        private JsonNullable<? extends CountryCodeEnum> country = JsonNullable.undefined();

        private JsonNullable<String> fullAddress = JsonNullable.undefined();

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<? extends StatusEnum> status = JsonNullable.undefined();

        private JsonNullable<String> email = JsonNullable.undefined();

        private JsonNullable<? extends SourceEnum> source = JsonNullable.undefined();

        private Optional<? extends AddressStatus> addressStatus = Optional.empty();

        private JsonNullable<String> externalId = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Phone number associated with the customer.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        /**
         * Phone number associated with the customer.
         */
        public Builder phone(JsonNullable<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }


        /**
         * Primary street address.
         */
        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = JsonNullable.of(street1);
            return this;
        }

        /**
         * Primary street address.
         */
        public Builder street1(JsonNullable<String> street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }


        /**
         * Additional street address details, such as an apartment or suite number.
         */
        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = JsonNullable.of(street2);
            return this;
        }

        /**
         * Additional street address details, such as an apartment or suite number.
         */
        public Builder street2(JsonNullable<String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }


        /**
         * City where the customer resides.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * City where the customer resides.
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * County or district of the customer.
         */
        public Builder county(String county) {
            Utils.checkNotNull(county, "county");
            this.county = JsonNullable.of(county);
            return this;
        }

        /**
         * County or district of the customer.
         */
        public Builder county(JsonNullable<String> county) {
            Utils.checkNotNull(county, "county");
            this.county = county;
            return this;
        }


        /**
         * State or province of the customer.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * State or province of the customer.
         */
        public Builder state(JsonNullable<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * ZIP or Postal code of the customer.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * ZIP or Postal code of the customer.
         */
        public Builder postalCode(JsonNullable<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        /**
         * Country code in ISO 3166-1 alpha-2 format
         */
        public Builder country(CountryCodeEnum country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country code in ISO 3166-1 alpha-2 format
         */
        public Builder country(JsonNullable<? extends CountryCodeEnum> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Complete address string of the customer, which can be used as an alternative to individual fields.
         */
        public Builder fullAddress(String fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = JsonNullable.of(fullAddress);
            return this;
        }

        /**
         * Complete address string of the customer, which can be used as an alternative to individual fields.
         */
        public Builder fullAddress(JsonNullable<String> fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = fullAddress;
            return this;
        }


        /**
         * Name of the customer.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Name of the customer.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * Status of the customer.
         */
        public Builder status(StatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Status of the customer.
         */
        public Builder status(JsonNullable<? extends StatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Email address of the customer.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * Email address of the customer.
         */
        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * Source of the customer's record
         */
        public Builder source(SourceEnum source) {
            Utils.checkNotNull(source, "source");
            this.source = JsonNullable.of(source);
            return this;
        }

        /**
         * Source of the customer's record
         */
        public Builder source(JsonNullable<? extends SourceEnum> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        public Builder addressStatus(AddressStatus addressStatus) {
            Utils.checkNotNull(addressStatus, "addressStatus");
            this.addressStatus = Optional.ofNullable(addressStatus);
            return this;
        }

        public Builder addressStatus(Optional<? extends AddressStatus> addressStatus) {
            Utils.checkNotNull(addressStatus, "addressStatus");
            this.addressStatus = addressStatus;
            return this;
        }


        /**
         * External identifier associated with the customer
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        /**
         * External identifier associated with the customer
         */
        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        public CustomerUpdate build() {

            return new CustomerUpdate(
                phone, street1, street2,
                city, county, state,
                postalCode, country, fullAddress,
                name, status, email,
                source, addressStatus, externalId);
        }

    }
}
