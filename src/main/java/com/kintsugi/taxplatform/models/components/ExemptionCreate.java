/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ExemptionCreate {

    @JsonProperty("exemption_type")
    private ExemptionType exemptionType;

    /**
     * The jurisdiction identifier for the exemption
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jurisdiction")
    private JsonNullable<String> jurisdiction;

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    private JsonNullable<? extends CountryCodeEnum> countryCode;

    /**
     * Start date for the exemption validity period (YYYY-MM-DD format)
     */
    @JsonProperty("start_date")
    private LocalDate startDate;

    /**
     * End date for the exemption validity period (YYYY-MM-DD format)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private JsonNullable<LocalDate> endDate;

    /**
     * Unique identifier for the customer associated with the exemption
     */
    @JsonProperty("customer_id")
    private String customerId;

    /**
     * Unique identifier for the transaction, if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_id")
    private JsonNullable<String> transactionId;

    /**
     * Indicates whether the exemption is for a reseller
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reseller")
    private Optional<Boolean> reseller;

    /**
     * Federal Employer Identification Number
     */
    @JsonProperty("FEIN")
    private String fein;

    /**
     * Sales tax ID for the exemption
     */
    @JsonProperty("sales_tax_id")
    private String salesTaxId;


    @JsonProperty("status")
    private ExemptionStatus status;

    @JsonCreator
    public ExemptionCreate(
            @JsonProperty("exemption_type") ExemptionType exemptionType,
            @JsonProperty("jurisdiction") JsonNullable<String> jurisdiction,
            @JsonProperty("country_code") JsonNullable<? extends CountryCodeEnum> countryCode,
            @JsonProperty("start_date") LocalDate startDate,
            @JsonProperty("end_date") JsonNullable<LocalDate> endDate,
            @JsonProperty("customer_id") String customerId,
            @JsonProperty("transaction_id") JsonNullable<String> transactionId,
            @JsonProperty("reseller") Optional<Boolean> reseller,
            @JsonProperty("FEIN") String fein,
            @JsonProperty("sales_tax_id") String salesTaxId,
            @JsonProperty("status") ExemptionStatus status) {
        Utils.checkNotNull(exemptionType, "exemptionType");
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(transactionId, "transactionId");
        Utils.checkNotNull(reseller, "reseller");
        Utils.checkNotNull(fein, "fein");
        Utils.checkNotNull(salesTaxId, "salesTaxId");
        Utils.checkNotNull(status, "status");
        this.exemptionType = exemptionType;
        this.jurisdiction = jurisdiction;
        this.countryCode = countryCode;
        this.startDate = startDate;
        this.endDate = endDate;
        this.customerId = customerId;
        this.transactionId = transactionId;
        this.reseller = reseller;
        this.fein = fein;
        this.salesTaxId = salesTaxId;
        this.status = status;
    }
    
    public ExemptionCreate(
            ExemptionType exemptionType,
            LocalDate startDate,
            String customerId,
            String fein,
            String salesTaxId,
            ExemptionStatus status) {
        this(exemptionType, JsonNullable.undefined(), JsonNullable.undefined(),
            startDate, JsonNullable.undefined(), customerId,
            JsonNullable.undefined(), Optional.empty(), fein,
            salesTaxId, status);
    }

    @JsonIgnore
    public ExemptionType exemptionType() {
        return exemptionType;
    }

    /**
     * The jurisdiction identifier for the exemption
     */
    @JsonIgnore
    public JsonNullable<String> jurisdiction() {
        return jurisdiction;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CountryCodeEnum> countryCode() {
        return (JsonNullable<CountryCodeEnum>) countryCode;
    }

    /**
     * Start date for the exemption validity period (YYYY-MM-DD format)
     */
    @JsonIgnore
    public LocalDate startDate() {
        return startDate;
    }

    /**
     * End date for the exemption validity period (YYYY-MM-DD format)
     */
    @JsonIgnore
    public JsonNullable<LocalDate> endDate() {
        return endDate;
    }

    /**
     * Unique identifier for the customer associated with the exemption
     */
    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    /**
     * Unique identifier for the transaction, if applicable
     */
    @JsonIgnore
    public JsonNullable<String> transactionId() {
        return transactionId;
    }

    /**
     * Indicates whether the exemption is for a reseller
     */
    @JsonIgnore
    public Optional<Boolean> reseller() {
        return reseller;
    }

    /**
     * Federal Employer Identification Number
     */
    @JsonIgnore
    public String fein() {
        return fein;
    }

    /**
     * Sales tax ID for the exemption
     */
    @JsonIgnore
    public String salesTaxId() {
        return salesTaxId;
    }

    @JsonIgnore
    public ExemptionStatus status() {
        return status;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ExemptionCreate withExemptionType(ExemptionType exemptionType) {
        Utils.checkNotNull(exemptionType, "exemptionType");
        this.exemptionType = exemptionType;
        return this;
    }

    /**
     * The jurisdiction identifier for the exemption
     */
    public ExemptionCreate withJurisdiction(String jurisdiction) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        this.jurisdiction = JsonNullable.of(jurisdiction);
        return this;
    }

    /**
     * The jurisdiction identifier for the exemption
     */
    public ExemptionCreate withJurisdiction(JsonNullable<String> jurisdiction) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        this.jurisdiction = jurisdiction;
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
     */
    public ExemptionCreate withCountryCode(CountryCodeEnum countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = JsonNullable.of(countryCode);
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
     */
    public ExemptionCreate withCountryCode(JsonNullable<? extends CountryCodeEnum> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Start date for the exemption validity period (YYYY-MM-DD format)
     */
    public ExemptionCreate withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * End date for the exemption validity period (YYYY-MM-DD format)
     */
    public ExemptionCreate withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = JsonNullable.of(endDate);
        return this;
    }

    /**
     * End date for the exemption validity period (YYYY-MM-DD format)
     */
    public ExemptionCreate withEndDate(JsonNullable<LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Unique identifier for the customer associated with the exemption
     */
    public ExemptionCreate withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * Unique identifier for the transaction, if applicable
     */
    public ExemptionCreate withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = JsonNullable.of(transactionId);
        return this;
    }

    /**
     * Unique identifier for the transaction, if applicable
     */
    public ExemptionCreate withTransactionId(JsonNullable<String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    /**
     * Indicates whether the exemption is for a reseller
     */
    public ExemptionCreate withReseller(boolean reseller) {
        Utils.checkNotNull(reseller, "reseller");
        this.reseller = Optional.ofNullable(reseller);
        return this;
    }


    /**
     * Indicates whether the exemption is for a reseller
     */
    public ExemptionCreate withReseller(Optional<Boolean> reseller) {
        Utils.checkNotNull(reseller, "reseller");
        this.reseller = reseller;
        return this;
    }

    /**
     * Federal Employer Identification Number
     */
    public ExemptionCreate withFein(String fein) {
        Utils.checkNotNull(fein, "fein");
        this.fein = fein;
        return this;
    }

    /**
     * Sales tax ID for the exemption
     */
    public ExemptionCreate withSalesTaxId(String salesTaxId) {
        Utils.checkNotNull(salesTaxId, "salesTaxId");
        this.salesTaxId = salesTaxId;
        return this;
    }

    public ExemptionCreate withStatus(ExemptionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExemptionCreate other = (ExemptionCreate) o;
        return 
            Utils.enhancedDeepEquals(this.exemptionType, other.exemptionType) &&
            Utils.enhancedDeepEquals(this.jurisdiction, other.jurisdiction) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.transactionId, other.transactionId) &&
            Utils.enhancedDeepEquals(this.reseller, other.reseller) &&
            Utils.enhancedDeepEquals(this.fein, other.fein) &&
            Utils.enhancedDeepEquals(this.salesTaxId, other.salesTaxId) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            exemptionType, jurisdiction, countryCode,
            startDate, endDate, customerId,
            transactionId, reseller, fein,
            salesTaxId, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExemptionCreate.class,
                "exemptionType", exemptionType,
                "jurisdiction", jurisdiction,
                "countryCode", countryCode,
                "startDate", startDate,
                "endDate", endDate,
                "customerId", customerId,
                "transactionId", transactionId,
                "reseller", reseller,
                "fein", fein,
                "salesTaxId", salesTaxId,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ExemptionType exemptionType;

        private JsonNullable<String> jurisdiction = JsonNullable.undefined();

        private JsonNullable<? extends CountryCodeEnum> countryCode = JsonNullable.undefined();

        private LocalDate startDate;

        private JsonNullable<LocalDate> endDate = JsonNullable.undefined();

        private String customerId;

        private JsonNullable<String> transactionId = JsonNullable.undefined();

        private Optional<Boolean> reseller;

        private String fein;

        private String salesTaxId;

        private ExemptionStatus status;

        private Builder() {
          // force use of static builder() method
        }


        public Builder exemptionType(ExemptionType exemptionType) {
            Utils.checkNotNull(exemptionType, "exemptionType");
            this.exemptionType = exemptionType;
            return this;
        }


        /**
         * The jurisdiction identifier for the exemption
         */
        public Builder jurisdiction(String jurisdiction) {
            Utils.checkNotNull(jurisdiction, "jurisdiction");
            this.jurisdiction = JsonNullable.of(jurisdiction);
            return this;
        }

        /**
         * The jurisdiction identifier for the exemption
         */
        public Builder jurisdiction(JsonNullable<String> jurisdiction) {
            Utils.checkNotNull(jurisdiction, "jurisdiction");
            this.jurisdiction = jurisdiction;
            return this;
        }


        /**
         * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
         */
        public Builder countryCode(CountryCodeEnum countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = JsonNullable.of(countryCode);
            return this;
        }

        /**
         * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
         */
        public Builder countryCode(JsonNullable<? extends CountryCodeEnum> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }


        /**
         * Start date for the exemption validity period (YYYY-MM-DD format)
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * End date for the exemption validity period (YYYY-MM-DD format)
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * End date for the exemption validity period (YYYY-MM-DD format)
         */
        public Builder endDate(JsonNullable<LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * Unique identifier for the customer associated with the exemption
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * Unique identifier for the transaction, if applicable
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = JsonNullable.of(transactionId);
            return this;
        }

        /**
         * Unique identifier for the transaction, if applicable
         */
        public Builder transactionId(JsonNullable<String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }


        /**
         * Indicates whether the exemption is for a reseller
         */
        public Builder reseller(boolean reseller) {
            Utils.checkNotNull(reseller, "reseller");
            this.reseller = Optional.ofNullable(reseller);
            return this;
        }

        /**
         * Indicates whether the exemption is for a reseller
         */
        public Builder reseller(Optional<Boolean> reseller) {
            Utils.checkNotNull(reseller, "reseller");
            this.reseller = reseller;
            return this;
        }


        /**
         * Federal Employer Identification Number
         */
        public Builder fein(String fein) {
            Utils.checkNotNull(fein, "fein");
            this.fein = fein;
            return this;
        }


        /**
         * Sales tax ID for the exemption
         */
        public Builder salesTaxId(String salesTaxId) {
            Utils.checkNotNull(salesTaxId, "salesTaxId");
            this.salesTaxId = salesTaxId;
            return this;
        }


        public Builder status(ExemptionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public ExemptionCreate build() {
            if (reseller == null) {
                reseller = _SINGLETON_VALUE_Reseller.value();
            }

            return new ExemptionCreate(
                exemptionType, jurisdiction, countryCode,
                startDate, endDate, customerId,
                transactionId, reseller, fein,
                salesTaxId, status);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Reseller =
                new LazySingletonValue<>(
                        "reseller",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
