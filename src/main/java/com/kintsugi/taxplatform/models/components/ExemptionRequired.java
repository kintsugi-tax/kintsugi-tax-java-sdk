/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;


public class ExemptionRequired {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jurisdiction")
    private JsonNullable<String> jurisdiction;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private JsonNullable<String> customerId;


    @JsonProperty("organization_id")
    private String organizationId;


    @JsonProperty("exemption_type")
    private ExemptionType exemptionType;


    @JsonProperty("start_date")
    private OffsetDateTime startDate;


    @JsonProperty("status")
    private ExemptionStatus status;


    @JsonProperty("reseller")
    private boolean reseller;

    @JsonCreator
    public ExemptionRequired(
            @JsonProperty("jurisdiction") JsonNullable<String> jurisdiction,
            @JsonProperty("customer_id") JsonNullable<String> customerId,
            @JsonProperty("organization_id") String organizationId,
            @JsonProperty("exemption_type") ExemptionType exemptionType,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("status") ExemptionStatus status,
            @JsonProperty("reseller") boolean reseller) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(exemptionType, "exemptionType");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(reseller, "reseller");
        this.jurisdiction = jurisdiction;
        this.customerId = customerId;
        this.organizationId = organizationId;
        this.exemptionType = exemptionType;
        this.startDate = startDate;
        this.status = status;
        this.reseller = reseller;
    }
    
    public ExemptionRequired(
            String organizationId,
            ExemptionType exemptionType,
            OffsetDateTime startDate,
            ExemptionStatus status,
            boolean reseller) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), organizationId,
            exemptionType, startDate, status,
            reseller);
    }

    @JsonIgnore
    public JsonNullable<String> jurisdiction() {
        return jurisdiction;
    }

    @JsonIgnore
    public JsonNullable<String> customerId() {
        return customerId;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public ExemptionType exemptionType() {
        return exemptionType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    @JsonIgnore
    public ExemptionStatus status() {
        return status;
    }

    @JsonIgnore
    public boolean reseller() {
        return reseller;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ExemptionRequired withJurisdiction(String jurisdiction) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        this.jurisdiction = JsonNullable.of(jurisdiction);
        return this;
    }

    public ExemptionRequired withJurisdiction(JsonNullable<String> jurisdiction) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        this.jurisdiction = jurisdiction;
        return this;
    }

    public ExemptionRequired withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = JsonNullable.of(customerId);
        return this;
    }

    public ExemptionRequired withCustomerId(JsonNullable<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public ExemptionRequired withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public ExemptionRequired withExemptionType(ExemptionType exemptionType) {
        Utils.checkNotNull(exemptionType, "exemptionType");
        this.exemptionType = exemptionType;
        return this;
    }

    public ExemptionRequired withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    public ExemptionRequired withStatus(ExemptionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ExemptionRequired withReseller(boolean reseller) {
        Utils.checkNotNull(reseller, "reseller");
        this.reseller = reseller;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExemptionRequired other = (ExemptionRequired) o;
        return 
            Utils.enhancedDeepEquals(this.jurisdiction, other.jurisdiction) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.exemptionType, other.exemptionType) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.reseller, other.reseller);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            jurisdiction, customerId, organizationId,
            exemptionType, startDate, status,
            reseller);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExemptionRequired.class,
                "jurisdiction", jurisdiction,
                "customerId", customerId,
                "organizationId", organizationId,
                "exemptionType", exemptionType,
                "startDate", startDate,
                "status", status,
                "reseller", reseller);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> jurisdiction = JsonNullable.undefined();

        private JsonNullable<String> customerId = JsonNullable.undefined();

        private String organizationId;

        private ExemptionType exemptionType;

        private OffsetDateTime startDate;

        private ExemptionStatus status;

        private Boolean reseller;

        private Builder() {
          // force use of static builder() method
        }


        public Builder jurisdiction(String jurisdiction) {
            Utils.checkNotNull(jurisdiction, "jurisdiction");
            this.jurisdiction = JsonNullable.of(jurisdiction);
            return this;
        }

        public Builder jurisdiction(JsonNullable<String> jurisdiction) {
            Utils.checkNotNull(jurisdiction, "jurisdiction");
            this.jurisdiction = jurisdiction;
            return this;
        }


        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = JsonNullable.of(customerId);
            return this;
        }

        public Builder customerId(JsonNullable<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        public Builder exemptionType(ExemptionType exemptionType) {
            Utils.checkNotNull(exemptionType, "exemptionType");
            this.exemptionType = exemptionType;
            return this;
        }


        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        public Builder status(ExemptionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder reseller(boolean reseller) {
            Utils.checkNotNull(reseller, "reseller");
            this.reseller = reseller;
            return this;
        }

        public ExemptionRequired build() {

            return new ExemptionRequired(
                jurisdiction, customerId, organizationId,
                exemptionType, startDate, status,
                reseller);
        }

    }
}
