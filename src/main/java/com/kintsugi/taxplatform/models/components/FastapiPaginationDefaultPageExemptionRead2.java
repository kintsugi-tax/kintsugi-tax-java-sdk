/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class FastapiPaginationDefaultPageExemptionRead2 {

    @JsonProperty("items")
    private List<BackendSrcExemptionsModelsExemptionRead> items;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("total")
    private Optional<Long> total;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("page")
    private Optional<Long> page;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("size")
    private Optional<Long> size;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pages")
    private JsonNullable<Long> pages;

    @JsonCreator
    public FastapiPaginationDefaultPageExemptionRead2(
            @JsonProperty("items") List<BackendSrcExemptionsModelsExemptionRead> items,
            @JsonProperty("total") Optional<Long> total,
            @JsonProperty("page") Optional<Long> page,
            @JsonProperty("size") Optional<Long> size,
            @JsonProperty("pages") JsonNullable<Long> pages) {
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(pages, "pages");
        this.items = items;
        this.total = total;
        this.page = page;
        this.size = size;
        this.pages = pages;
    }
    
    public FastapiPaginationDefaultPageExemptionRead2(
            List<BackendSrcExemptionsModelsExemptionRead> items) {
        this(items, Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined());
    }

    @JsonIgnore
    public List<BackendSrcExemptionsModelsExemptionRead> items() {
        return items;
    }

    @JsonIgnore
    public Optional<Long> total() {
        return total;
    }

    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    @JsonIgnore
    public JsonNullable<Long> pages() {
        return pages;
    }

    public static Builder builder() {
        return new Builder();
    }


    public FastapiPaginationDefaultPageExemptionRead2 withItems(List<BackendSrcExemptionsModelsExemptionRead> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    public FastapiPaginationDefaultPageExemptionRead2 withTotal(long total) {
        Utils.checkNotNull(total, "total");
        this.total = Optional.ofNullable(total);
        return this;
    }


    public FastapiPaginationDefaultPageExemptionRead2 withTotal(Optional<Long> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    public FastapiPaginationDefaultPageExemptionRead2 withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    public FastapiPaginationDefaultPageExemptionRead2 withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    public FastapiPaginationDefaultPageExemptionRead2 withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    public FastapiPaginationDefaultPageExemptionRead2 withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public FastapiPaginationDefaultPageExemptionRead2 withPages(long pages) {
        Utils.checkNotNull(pages, "pages");
        this.pages = JsonNullable.of(pages);
        return this;
    }

    public FastapiPaginationDefaultPageExemptionRead2 withPages(JsonNullable<Long> pages) {
        Utils.checkNotNull(pages, "pages");
        this.pages = pages;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FastapiPaginationDefaultPageExemptionRead2 other = (FastapiPaginationDefaultPageExemptionRead2) o;
        return 
            Utils.enhancedDeepEquals(this.items, other.items) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.pages, other.pages);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            items, total, page,
            size, pages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FastapiPaginationDefaultPageExemptionRead2.class,
                "items", items,
                "total", total,
                "page", page,
                "size", size,
                "pages", pages);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<BackendSrcExemptionsModelsExemptionRead> items;

        private Optional<Long> total = Optional.empty();

        private Optional<Long> page = Optional.empty();

        private Optional<Long> size = Optional.empty();

        private JsonNullable<Long> pages = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder items(List<BackendSrcExemptionsModelsExemptionRead> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }


        public Builder total(long total) {
            Utils.checkNotNull(total, "total");
            this.total = Optional.ofNullable(total);
            return this;
        }

        public Builder total(Optional<Long> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }


        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }


        public Builder pages(long pages) {
            Utils.checkNotNull(pages, "pages");
            this.pages = JsonNullable.of(pages);
            return this;
        }

        public Builder pages(JsonNullable<Long> pages) {
            Utils.checkNotNull(pages, "pages");
            this.pages = pages;
            return this;
        }

        public FastapiPaginationDefaultPageExemptionRead2 build() {

            return new FastapiPaginationDefaultPageExemptionRead2(
                items, total, page,
                size, pages);
        }

    }
}
