/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.Optional;


public class FilingDetailsRead {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends FilingStatusEnum> status;

    /**
     * The start date of the filing period.
     */
    @JsonProperty("start_date")
    private LocalDate startDate;

    /**
     * The end date of the filing period.
     */
    @JsonProperty("end_date")
    private LocalDate endDate;

    /**
     * The due date of the filing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private Optional<String> dueDate;

    /**
     * The date the filing was completed, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_filed")
    private Optional<String> dateFiled;

    /**
     * Indicates if the filing was done manually.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_manual")
    private Optional<Boolean> isManual;

    /**
     * The code of the state associated with the filing (e.g., IA, NY).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state_code")
    private Optional<String> stateCode;

    /**
     * The name of the state associated with the filing
     *         (e.g., Iowa, New York).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state_name")
    private Optional<String> stateName;


    @JsonProperty("country_code")
    private CountryCodeEnum countryCode;

    /**
     * The associated JIRA issue key for tracking the filing,
     *         if available. Can be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jira_issue_key")
    private Optional<String> jiraIssueKey;

    /**
     * Indicates if the filing was auto-approved. Defaults to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_approved")
    private Optional<Boolean> autoApproved;

    /**
     * The calculated amount for the filing. Defaults to 0.00.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_calculated")
    private Optional<String> amountCalculated;

    /**
     * Adjusted amount, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_adjusted")
    private Optional<String> amountAdjusted;

    /**
     * Discounts applied to the filing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_discounts")
    private Optional<String> amountDiscounts;

    /**
     * Discounts applied to the amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_fees")
    private Optional<String> amountFees;

    /**
     * Penalties applied to the filing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_penalties")
    private Optional<String> amountPenalties;

    /**
     * Total tax collected during the filing period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_tax_collected")
    private Optional<String> amountTaxCollected;

    /**
     * Total sales amount during the filing period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_sales")
    private Optional<String> amountSales;

    /**
     * Total taxable amount during the filing period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_taxable_sales")
    private Optional<String> totalTaxableSales;

    /**
     * Final amount due for the filing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * Total tax liability for the filing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_liability")
    private Optional<String> totalTaxLiability;

    /**
     * Total number of transactions associated with the filing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_count")
    private Optional<Long> transactionCount;

    /**
     * Notes or comments related to the filing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal_notes")
    private Optional<String> internalNotes;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recent_details_report_link")
    private Optional<String> recentDetailsReportLink;

    /**
     * The amount of tax remitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_remitted")
    private Optional<String> taxRemitted;

    /**
     * Return confirmation ID, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_confirmation_id")
    private Optional<String> returnConfirmationId;

    /**
     * Payment confirmation ID, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_confirmation_id")
    private Optional<String> paymentConfirmationId;

    /**
     * Indicates if the filing can be approved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_approval")
    private Optional<Boolean> blockApproval;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends CurrencyEnum> currency;

    /**
     * Unique identifier for the filing.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Identifier for the registration associated with the filing.
     */
    @JsonProperty("registration_id")
    private String registrationId;

    /**
     * List of attachments associated with the filing, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    private Optional<? extends Attachments> attachments;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credits_utilized")
    private Optional<String> creditsUtilized;

    @JsonCreator
    public FilingDetailsRead(
            @JsonProperty("status") Optional<? extends FilingStatusEnum> status,
            @JsonProperty("start_date") LocalDate startDate,
            @JsonProperty("end_date") LocalDate endDate,
            @JsonProperty("due_date") Optional<String> dueDate,
            @JsonProperty("date_filed") Optional<String> dateFiled,
            @JsonProperty("is_manual") Optional<Boolean> isManual,
            @JsonProperty("state_code") Optional<String> stateCode,
            @JsonProperty("state_name") Optional<String> stateName,
            @JsonProperty("country_code") CountryCodeEnum countryCode,
            @JsonProperty("jira_issue_key") Optional<String> jiraIssueKey,
            @JsonProperty("auto_approved") Optional<Boolean> autoApproved,
            @JsonProperty("amount_calculated") Optional<String> amountCalculated,
            @JsonProperty("amount_adjusted") Optional<String> amountAdjusted,
            @JsonProperty("amount_discounts") Optional<String> amountDiscounts,
            @JsonProperty("amount_fees") Optional<String> amountFees,
            @JsonProperty("amount_penalties") Optional<String> amountPenalties,
            @JsonProperty("amount_tax_collected") Optional<String> amountTaxCollected,
            @JsonProperty("amount_sales") Optional<String> amountSales,
            @JsonProperty("total_taxable_sales") Optional<String> totalTaxableSales,
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("total_tax_liability") Optional<String> totalTaxLiability,
            @JsonProperty("transaction_count") Optional<Long> transactionCount,
            @JsonProperty("internal_notes") Optional<String> internalNotes,
            @JsonProperty("recent_details_report_link") Optional<String> recentDetailsReportLink,
            @JsonProperty("tax_remitted") Optional<String> taxRemitted,
            @JsonProperty("return_confirmation_id") Optional<String> returnConfirmationId,
            @JsonProperty("payment_confirmation_id") Optional<String> paymentConfirmationId,
            @JsonProperty("block_approval") Optional<Boolean> blockApproval,
            @JsonProperty("currency") Optional<? extends CurrencyEnum> currency,
            @JsonProperty("id") String id,
            @JsonProperty("registration_id") String registrationId,
            @JsonProperty("attachments") Optional<? extends Attachments> attachments,
            @JsonProperty("credits_utilized") Optional<String> creditsUtilized) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(dateFiled, "dateFiled");
        Utils.checkNotNull(isManual, "isManual");
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(stateName, "stateName");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(jiraIssueKey, "jiraIssueKey");
        Utils.checkNotNull(autoApproved, "autoApproved");
        Utils.checkNotNull(amountCalculated, "amountCalculated");
        Utils.checkNotNull(amountAdjusted, "amountAdjusted");
        Utils.checkNotNull(amountDiscounts, "amountDiscounts");
        Utils.checkNotNull(amountFees, "amountFees");
        Utils.checkNotNull(amountPenalties, "amountPenalties");
        Utils.checkNotNull(amountTaxCollected, "amountTaxCollected");
        Utils.checkNotNull(amountSales, "amountSales");
        Utils.checkNotNull(totalTaxableSales, "totalTaxableSales");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(totalTaxLiability, "totalTaxLiability");
        Utils.checkNotNull(transactionCount, "transactionCount");
        Utils.checkNotNull(internalNotes, "internalNotes");
        Utils.checkNotNull(recentDetailsReportLink, "recentDetailsReportLink");
        Utils.checkNotNull(taxRemitted, "taxRemitted");
        Utils.checkNotNull(returnConfirmationId, "returnConfirmationId");
        Utils.checkNotNull(paymentConfirmationId, "paymentConfirmationId");
        Utils.checkNotNull(blockApproval, "blockApproval");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(registrationId, "registrationId");
        Utils.checkNotNull(attachments, "attachments");
        Utils.checkNotNull(creditsUtilized, "creditsUtilized");
        this.status = status;
        this.startDate = startDate;
        this.endDate = endDate;
        this.dueDate = dueDate;
        this.dateFiled = dateFiled;
        this.isManual = isManual;
        this.stateCode = stateCode;
        this.stateName = stateName;
        this.countryCode = countryCode;
        this.jiraIssueKey = jiraIssueKey;
        this.autoApproved = autoApproved;
        this.amountCalculated = amountCalculated;
        this.amountAdjusted = amountAdjusted;
        this.amountDiscounts = amountDiscounts;
        this.amountFees = amountFees;
        this.amountPenalties = amountPenalties;
        this.amountTaxCollected = amountTaxCollected;
        this.amountSales = amountSales;
        this.totalTaxableSales = totalTaxableSales;
        this.amount = amount;
        this.totalTaxLiability = totalTaxLiability;
        this.transactionCount = transactionCount;
        this.internalNotes = internalNotes;
        this.recentDetailsReportLink = recentDetailsReportLink;
        this.taxRemitted = taxRemitted;
        this.returnConfirmationId = returnConfirmationId;
        this.paymentConfirmationId = paymentConfirmationId;
        this.blockApproval = blockApproval;
        this.currency = currency;
        this.id = id;
        this.registrationId = registrationId;
        this.attachments = attachments;
        this.creditsUtilized = creditsUtilized;
    }
    
    public FilingDetailsRead(
            LocalDate startDate,
            LocalDate endDate,
            CountryCodeEnum countryCode,
            String id,
            String registrationId) {
        this(Optional.empty(), startDate, endDate,
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), countryCode,
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), id,
            registrationId, Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FilingStatusEnum> status() {
        return (Optional<FilingStatusEnum>) status;
    }

    /**
     * The start date of the filing period.
     */
    @JsonIgnore
    public LocalDate startDate() {
        return startDate;
    }

    /**
     * The end date of the filing period.
     */
    @JsonIgnore
    public LocalDate endDate() {
        return endDate;
    }

    /**
     * The due date of the filing.
     */
    @JsonIgnore
    public Optional<String> dueDate() {
        return dueDate;
    }

    /**
     * The date the filing was completed, if applicable.
     */
    @JsonIgnore
    public Optional<String> dateFiled() {
        return dateFiled;
    }

    /**
     * Indicates if the filing was done manually.
     */
    @JsonIgnore
    public Optional<Boolean> isManual() {
        return isManual;
    }

    /**
     * The code of the state associated with the filing (e.g., IA, NY).
     */
    @JsonIgnore
    public Optional<String> stateCode() {
        return stateCode;
    }

    /**
     * The name of the state associated with the filing
     *         (e.g., Iowa, New York).
     */
    @JsonIgnore
    public Optional<String> stateName() {
        return stateName;
    }

    @JsonIgnore
    public CountryCodeEnum countryCode() {
        return countryCode;
    }

    /**
     * The associated JIRA issue key for tracking the filing,
     *         if available. Can be null.
     */
    @JsonIgnore
    public Optional<String> jiraIssueKey() {
        return jiraIssueKey;
    }

    /**
     * Indicates if the filing was auto-approved. Defaults to false.
     */
    @JsonIgnore
    public Optional<Boolean> autoApproved() {
        return autoApproved;
    }

    /**
     * The calculated amount for the filing. Defaults to 0.00.
     */
    @JsonIgnore
    public Optional<String> amountCalculated() {
        return amountCalculated;
    }

    /**
     * Adjusted amount, if any.
     */
    @JsonIgnore
    public Optional<String> amountAdjusted() {
        return amountAdjusted;
    }

    /**
     * Discounts applied to the filing.
     */
    @JsonIgnore
    public Optional<String> amountDiscounts() {
        return amountDiscounts;
    }

    /**
     * Discounts applied to the amount.
     */
    @JsonIgnore
    public Optional<String> amountFees() {
        return amountFees;
    }

    /**
     * Penalties applied to the filing.
     */
    @JsonIgnore
    public Optional<String> amountPenalties() {
        return amountPenalties;
    }

    /**
     * Total tax collected during the filing period.
     */
    @JsonIgnore
    public Optional<String> amountTaxCollected() {
        return amountTaxCollected;
    }

    /**
     * Total sales amount during the filing period.
     */
    @JsonIgnore
    public Optional<String> amountSales() {
        return amountSales;
    }

    /**
     * Total taxable amount during the filing period.
     */
    @JsonIgnore
    public Optional<String> totalTaxableSales() {
        return totalTaxableSales;
    }

    /**
     * Final amount due for the filing.
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * Total tax liability for the filing.
     */
    @JsonIgnore
    public Optional<String> totalTaxLiability() {
        return totalTaxLiability;
    }

    /**
     * Total number of transactions associated with the filing.
     */
    @JsonIgnore
    public Optional<Long> transactionCount() {
        return transactionCount;
    }

    /**
     * Notes or comments related to the filing.
     */
    @JsonIgnore
    public Optional<String> internalNotes() {
        return internalNotes;
    }

    @JsonIgnore
    public Optional<String> recentDetailsReportLink() {
        return recentDetailsReportLink;
    }

    /**
     * The amount of tax remitted.
     */
    @JsonIgnore
    public Optional<String> taxRemitted() {
        return taxRemitted;
    }

    /**
     * Return confirmation ID, if applicable.
     */
    @JsonIgnore
    public Optional<String> returnConfirmationId() {
        return returnConfirmationId;
    }

    /**
     * Payment confirmation ID, if applicable.
     */
    @JsonIgnore
    public Optional<String> paymentConfirmationId() {
        return paymentConfirmationId;
    }

    /**
     * Indicates if the filing can be approved.
     */
    @JsonIgnore
    public Optional<Boolean> blockApproval() {
        return blockApproval;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CurrencyEnum> currency() {
        return (Optional<CurrencyEnum>) currency;
    }

    /**
     * Unique identifier for the filing.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Identifier for the registration associated with the filing.
     */
    @JsonIgnore
    public String registrationId() {
        return registrationId;
    }

    /**
     * List of attachments associated with the filing, if any.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Attachments> attachments() {
        return (Optional<Attachments>) attachments;
    }

    @JsonIgnore
    public Optional<String> creditsUtilized() {
        return creditsUtilized;
    }

    public static Builder builder() {
        return new Builder();
    }


    public FilingDetailsRead withStatus(FilingStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public FilingDetailsRead withStatus(Optional<? extends FilingStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The start date of the filing period.
     */
    public FilingDetailsRead withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The end date of the filing period.
     */
    public FilingDetailsRead withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * The due date of the filing.
     */
    public FilingDetailsRead withDueDate(String dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = Optional.ofNullable(dueDate);
        return this;
    }


    /**
     * The due date of the filing.
     */
    public FilingDetailsRead withDueDate(Optional<String> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * The date the filing was completed, if applicable.
     */
    public FilingDetailsRead withDateFiled(String dateFiled) {
        Utils.checkNotNull(dateFiled, "dateFiled");
        this.dateFiled = Optional.ofNullable(dateFiled);
        return this;
    }


    /**
     * The date the filing was completed, if applicable.
     */
    public FilingDetailsRead withDateFiled(Optional<String> dateFiled) {
        Utils.checkNotNull(dateFiled, "dateFiled");
        this.dateFiled = dateFiled;
        return this;
    }

    /**
     * Indicates if the filing was done manually.
     */
    public FilingDetailsRead withIsManual(boolean isManual) {
        Utils.checkNotNull(isManual, "isManual");
        this.isManual = Optional.ofNullable(isManual);
        return this;
    }


    /**
     * Indicates if the filing was done manually.
     */
    public FilingDetailsRead withIsManual(Optional<Boolean> isManual) {
        Utils.checkNotNull(isManual, "isManual");
        this.isManual = isManual;
        return this;
    }

    /**
     * The code of the state associated with the filing (e.g., IA, NY).
     */
    public FilingDetailsRead withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = Optional.ofNullable(stateCode);
        return this;
    }


    /**
     * The code of the state associated with the filing (e.g., IA, NY).
     */
    public FilingDetailsRead withStateCode(Optional<String> stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    /**
     * The name of the state associated with the filing
     *         (e.g., Iowa, New York).
     */
    public FilingDetailsRead withStateName(String stateName) {
        Utils.checkNotNull(stateName, "stateName");
        this.stateName = Optional.ofNullable(stateName);
        return this;
    }


    /**
     * The name of the state associated with the filing
     *         (e.g., Iowa, New York).
     */
    public FilingDetailsRead withStateName(Optional<String> stateName) {
        Utils.checkNotNull(stateName, "stateName");
        this.stateName = stateName;
        return this;
    }

    public FilingDetailsRead withCountryCode(CountryCodeEnum countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * The associated JIRA issue key for tracking the filing,
     *         if available. Can be null.
     */
    public FilingDetailsRead withJiraIssueKey(String jiraIssueKey) {
        Utils.checkNotNull(jiraIssueKey, "jiraIssueKey");
        this.jiraIssueKey = Optional.ofNullable(jiraIssueKey);
        return this;
    }


    /**
     * The associated JIRA issue key for tracking the filing,
     *         if available. Can be null.
     */
    public FilingDetailsRead withJiraIssueKey(Optional<String> jiraIssueKey) {
        Utils.checkNotNull(jiraIssueKey, "jiraIssueKey");
        this.jiraIssueKey = jiraIssueKey;
        return this;
    }

    /**
     * Indicates if the filing was auto-approved. Defaults to false.
     */
    public FilingDetailsRead withAutoApproved(boolean autoApproved) {
        Utils.checkNotNull(autoApproved, "autoApproved");
        this.autoApproved = Optional.ofNullable(autoApproved);
        return this;
    }


    /**
     * Indicates if the filing was auto-approved. Defaults to false.
     */
    public FilingDetailsRead withAutoApproved(Optional<Boolean> autoApproved) {
        Utils.checkNotNull(autoApproved, "autoApproved");
        this.autoApproved = autoApproved;
        return this;
    }

    /**
     * The calculated amount for the filing. Defaults to 0.00.
     */
    public FilingDetailsRead withAmountCalculated(String amountCalculated) {
        Utils.checkNotNull(amountCalculated, "amountCalculated");
        this.amountCalculated = Optional.ofNullable(amountCalculated);
        return this;
    }


    /**
     * The calculated amount for the filing. Defaults to 0.00.
     */
    public FilingDetailsRead withAmountCalculated(Optional<String> amountCalculated) {
        Utils.checkNotNull(amountCalculated, "amountCalculated");
        this.amountCalculated = amountCalculated;
        return this;
    }

    /**
     * Adjusted amount, if any.
     */
    public FilingDetailsRead withAmountAdjusted(String amountAdjusted) {
        Utils.checkNotNull(amountAdjusted, "amountAdjusted");
        this.amountAdjusted = Optional.ofNullable(amountAdjusted);
        return this;
    }


    /**
     * Adjusted amount, if any.
     */
    public FilingDetailsRead withAmountAdjusted(Optional<String> amountAdjusted) {
        Utils.checkNotNull(amountAdjusted, "amountAdjusted");
        this.amountAdjusted = amountAdjusted;
        return this;
    }

    /**
     * Discounts applied to the filing.
     */
    public FilingDetailsRead withAmountDiscounts(String amountDiscounts) {
        Utils.checkNotNull(amountDiscounts, "amountDiscounts");
        this.amountDiscounts = Optional.ofNullable(amountDiscounts);
        return this;
    }


    /**
     * Discounts applied to the filing.
     */
    public FilingDetailsRead withAmountDiscounts(Optional<String> amountDiscounts) {
        Utils.checkNotNull(amountDiscounts, "amountDiscounts");
        this.amountDiscounts = amountDiscounts;
        return this;
    }

    /**
     * Discounts applied to the amount.
     */
    public FilingDetailsRead withAmountFees(String amountFees) {
        Utils.checkNotNull(amountFees, "amountFees");
        this.amountFees = Optional.ofNullable(amountFees);
        return this;
    }


    /**
     * Discounts applied to the amount.
     */
    public FilingDetailsRead withAmountFees(Optional<String> amountFees) {
        Utils.checkNotNull(amountFees, "amountFees");
        this.amountFees = amountFees;
        return this;
    }

    /**
     * Penalties applied to the filing.
     */
    public FilingDetailsRead withAmountPenalties(String amountPenalties) {
        Utils.checkNotNull(amountPenalties, "amountPenalties");
        this.amountPenalties = Optional.ofNullable(amountPenalties);
        return this;
    }


    /**
     * Penalties applied to the filing.
     */
    public FilingDetailsRead withAmountPenalties(Optional<String> amountPenalties) {
        Utils.checkNotNull(amountPenalties, "amountPenalties");
        this.amountPenalties = amountPenalties;
        return this;
    }

    /**
     * Total tax collected during the filing period.
     */
    public FilingDetailsRead withAmountTaxCollected(String amountTaxCollected) {
        Utils.checkNotNull(amountTaxCollected, "amountTaxCollected");
        this.amountTaxCollected = Optional.ofNullable(amountTaxCollected);
        return this;
    }


    /**
     * Total tax collected during the filing period.
     */
    public FilingDetailsRead withAmountTaxCollected(Optional<String> amountTaxCollected) {
        Utils.checkNotNull(amountTaxCollected, "amountTaxCollected");
        this.amountTaxCollected = amountTaxCollected;
        return this;
    }

    /**
     * Total sales amount during the filing period.
     */
    public FilingDetailsRead withAmountSales(String amountSales) {
        Utils.checkNotNull(amountSales, "amountSales");
        this.amountSales = Optional.ofNullable(amountSales);
        return this;
    }


    /**
     * Total sales amount during the filing period.
     */
    public FilingDetailsRead withAmountSales(Optional<String> amountSales) {
        Utils.checkNotNull(amountSales, "amountSales");
        this.amountSales = amountSales;
        return this;
    }

    /**
     * Total taxable amount during the filing period.
     */
    public FilingDetailsRead withTotalTaxableSales(String totalTaxableSales) {
        Utils.checkNotNull(totalTaxableSales, "totalTaxableSales");
        this.totalTaxableSales = Optional.ofNullable(totalTaxableSales);
        return this;
    }


    /**
     * Total taxable amount during the filing period.
     */
    public FilingDetailsRead withTotalTaxableSales(Optional<String> totalTaxableSales) {
        Utils.checkNotNull(totalTaxableSales, "totalTaxableSales");
        this.totalTaxableSales = totalTaxableSales;
        return this;
    }

    /**
     * Final amount due for the filing.
     */
    public FilingDetailsRead withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * Final amount due for the filing.
     */
    public FilingDetailsRead withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Total tax liability for the filing.
     */
    public FilingDetailsRead withTotalTaxLiability(String totalTaxLiability) {
        Utils.checkNotNull(totalTaxLiability, "totalTaxLiability");
        this.totalTaxLiability = Optional.ofNullable(totalTaxLiability);
        return this;
    }


    /**
     * Total tax liability for the filing.
     */
    public FilingDetailsRead withTotalTaxLiability(Optional<String> totalTaxLiability) {
        Utils.checkNotNull(totalTaxLiability, "totalTaxLiability");
        this.totalTaxLiability = totalTaxLiability;
        return this;
    }

    /**
     * Total number of transactions associated with the filing.
     */
    public FilingDetailsRead withTransactionCount(long transactionCount) {
        Utils.checkNotNull(transactionCount, "transactionCount");
        this.transactionCount = Optional.ofNullable(transactionCount);
        return this;
    }


    /**
     * Total number of transactions associated with the filing.
     */
    public FilingDetailsRead withTransactionCount(Optional<Long> transactionCount) {
        Utils.checkNotNull(transactionCount, "transactionCount");
        this.transactionCount = transactionCount;
        return this;
    }

    /**
     * Notes or comments related to the filing.
     */
    public FilingDetailsRead withInternalNotes(String internalNotes) {
        Utils.checkNotNull(internalNotes, "internalNotes");
        this.internalNotes = Optional.ofNullable(internalNotes);
        return this;
    }


    /**
     * Notes or comments related to the filing.
     */
    public FilingDetailsRead withInternalNotes(Optional<String> internalNotes) {
        Utils.checkNotNull(internalNotes, "internalNotes");
        this.internalNotes = internalNotes;
        return this;
    }

    public FilingDetailsRead withRecentDetailsReportLink(String recentDetailsReportLink) {
        Utils.checkNotNull(recentDetailsReportLink, "recentDetailsReportLink");
        this.recentDetailsReportLink = Optional.ofNullable(recentDetailsReportLink);
        return this;
    }


    public FilingDetailsRead withRecentDetailsReportLink(Optional<String> recentDetailsReportLink) {
        Utils.checkNotNull(recentDetailsReportLink, "recentDetailsReportLink");
        this.recentDetailsReportLink = recentDetailsReportLink;
        return this;
    }

    /**
     * The amount of tax remitted.
     */
    public FilingDetailsRead withTaxRemitted(String taxRemitted) {
        Utils.checkNotNull(taxRemitted, "taxRemitted");
        this.taxRemitted = Optional.ofNullable(taxRemitted);
        return this;
    }


    /**
     * The amount of tax remitted.
     */
    public FilingDetailsRead withTaxRemitted(Optional<String> taxRemitted) {
        Utils.checkNotNull(taxRemitted, "taxRemitted");
        this.taxRemitted = taxRemitted;
        return this;
    }

    /**
     * Return confirmation ID, if applicable.
     */
    public FilingDetailsRead withReturnConfirmationId(String returnConfirmationId) {
        Utils.checkNotNull(returnConfirmationId, "returnConfirmationId");
        this.returnConfirmationId = Optional.ofNullable(returnConfirmationId);
        return this;
    }


    /**
     * Return confirmation ID, if applicable.
     */
    public FilingDetailsRead withReturnConfirmationId(Optional<String> returnConfirmationId) {
        Utils.checkNotNull(returnConfirmationId, "returnConfirmationId");
        this.returnConfirmationId = returnConfirmationId;
        return this;
    }

    /**
     * Payment confirmation ID, if applicable.
     */
    public FilingDetailsRead withPaymentConfirmationId(String paymentConfirmationId) {
        Utils.checkNotNull(paymentConfirmationId, "paymentConfirmationId");
        this.paymentConfirmationId = Optional.ofNullable(paymentConfirmationId);
        return this;
    }


    /**
     * Payment confirmation ID, if applicable.
     */
    public FilingDetailsRead withPaymentConfirmationId(Optional<String> paymentConfirmationId) {
        Utils.checkNotNull(paymentConfirmationId, "paymentConfirmationId");
        this.paymentConfirmationId = paymentConfirmationId;
        return this;
    }

    /**
     * Indicates if the filing can be approved.
     */
    public FilingDetailsRead withBlockApproval(boolean blockApproval) {
        Utils.checkNotNull(blockApproval, "blockApproval");
        this.blockApproval = Optional.ofNullable(blockApproval);
        return this;
    }


    /**
     * Indicates if the filing can be approved.
     */
    public FilingDetailsRead withBlockApproval(Optional<Boolean> blockApproval) {
        Utils.checkNotNull(blockApproval, "blockApproval");
        this.blockApproval = blockApproval;
        return this;
    }

    public FilingDetailsRead withCurrency(CurrencyEnum currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public FilingDetailsRead withCurrency(Optional<? extends CurrencyEnum> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Unique identifier for the filing.
     */
    public FilingDetailsRead withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Identifier for the registration associated with the filing.
     */
    public FilingDetailsRead withRegistrationId(String registrationId) {
        Utils.checkNotNull(registrationId, "registrationId");
        this.registrationId = registrationId;
        return this;
    }

    /**
     * List of attachments associated with the filing, if any.
     */
    public FilingDetailsRead withAttachments(Attachments attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = Optional.ofNullable(attachments);
        return this;
    }


    /**
     * List of attachments associated with the filing, if any.
     */
    public FilingDetailsRead withAttachments(Optional<? extends Attachments> attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = attachments;
        return this;
    }

    public FilingDetailsRead withCreditsUtilized(String creditsUtilized) {
        Utils.checkNotNull(creditsUtilized, "creditsUtilized");
        this.creditsUtilized = Optional.ofNullable(creditsUtilized);
        return this;
    }


    public FilingDetailsRead withCreditsUtilized(Optional<String> creditsUtilized) {
        Utils.checkNotNull(creditsUtilized, "creditsUtilized");
        this.creditsUtilized = creditsUtilized;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FilingDetailsRead other = (FilingDetailsRead) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.dateFiled, other.dateFiled) &&
            Utils.enhancedDeepEquals(this.isManual, other.isManual) &&
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.stateName, other.stateName) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.jiraIssueKey, other.jiraIssueKey) &&
            Utils.enhancedDeepEquals(this.autoApproved, other.autoApproved) &&
            Utils.enhancedDeepEquals(this.amountCalculated, other.amountCalculated) &&
            Utils.enhancedDeepEquals(this.amountAdjusted, other.amountAdjusted) &&
            Utils.enhancedDeepEquals(this.amountDiscounts, other.amountDiscounts) &&
            Utils.enhancedDeepEquals(this.amountFees, other.amountFees) &&
            Utils.enhancedDeepEquals(this.amountPenalties, other.amountPenalties) &&
            Utils.enhancedDeepEquals(this.amountTaxCollected, other.amountTaxCollected) &&
            Utils.enhancedDeepEquals(this.amountSales, other.amountSales) &&
            Utils.enhancedDeepEquals(this.totalTaxableSales, other.totalTaxableSales) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.totalTaxLiability, other.totalTaxLiability) &&
            Utils.enhancedDeepEquals(this.transactionCount, other.transactionCount) &&
            Utils.enhancedDeepEquals(this.internalNotes, other.internalNotes) &&
            Utils.enhancedDeepEquals(this.recentDetailsReportLink, other.recentDetailsReportLink) &&
            Utils.enhancedDeepEquals(this.taxRemitted, other.taxRemitted) &&
            Utils.enhancedDeepEquals(this.returnConfirmationId, other.returnConfirmationId) &&
            Utils.enhancedDeepEquals(this.paymentConfirmationId, other.paymentConfirmationId) &&
            Utils.enhancedDeepEquals(this.blockApproval, other.blockApproval) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.registrationId, other.registrationId) &&
            Utils.enhancedDeepEquals(this.attachments, other.attachments) &&
            Utils.enhancedDeepEquals(this.creditsUtilized, other.creditsUtilized);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status, startDate, endDate,
            dueDate, dateFiled, isManual,
            stateCode, stateName, countryCode,
            jiraIssueKey, autoApproved, amountCalculated,
            amountAdjusted, amountDiscounts, amountFees,
            amountPenalties, amountTaxCollected, amountSales,
            totalTaxableSales, amount, totalTaxLiability,
            transactionCount, internalNotes, recentDetailsReportLink,
            taxRemitted, returnConfirmationId, paymentConfirmationId,
            blockApproval, currency, id,
            registrationId, attachments, creditsUtilized);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FilingDetailsRead.class,
                "status", status,
                "startDate", startDate,
                "endDate", endDate,
                "dueDate", dueDate,
                "dateFiled", dateFiled,
                "isManual", isManual,
                "stateCode", stateCode,
                "stateName", stateName,
                "countryCode", countryCode,
                "jiraIssueKey", jiraIssueKey,
                "autoApproved", autoApproved,
                "amountCalculated", amountCalculated,
                "amountAdjusted", amountAdjusted,
                "amountDiscounts", amountDiscounts,
                "amountFees", amountFees,
                "amountPenalties", amountPenalties,
                "amountTaxCollected", amountTaxCollected,
                "amountSales", amountSales,
                "totalTaxableSales", totalTaxableSales,
                "amount", amount,
                "totalTaxLiability", totalTaxLiability,
                "transactionCount", transactionCount,
                "internalNotes", internalNotes,
                "recentDetailsReportLink", recentDetailsReportLink,
                "taxRemitted", taxRemitted,
                "returnConfirmationId", returnConfirmationId,
                "paymentConfirmationId", paymentConfirmationId,
                "blockApproval", blockApproval,
                "currency", currency,
                "id", id,
                "registrationId", registrationId,
                "attachments", attachments,
                "creditsUtilized", creditsUtilized);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends FilingStatusEnum> status = Optional.empty();

        private LocalDate startDate;

        private LocalDate endDate;

        private Optional<String> dueDate = Optional.empty();

        private Optional<String> dateFiled = Optional.empty();

        private Optional<Boolean> isManual = Optional.empty();

        private Optional<String> stateCode = Optional.empty();

        private Optional<String> stateName = Optional.empty();

        private CountryCodeEnum countryCode;

        private Optional<String> jiraIssueKey = Optional.empty();

        private Optional<Boolean> autoApproved;

        private Optional<String> amountCalculated;

        private Optional<String> amountAdjusted;

        private Optional<String> amountDiscounts;

        private Optional<String> amountFees;

        private Optional<String> amountPenalties;

        private Optional<String> amountTaxCollected;

        private Optional<String> amountSales;

        private Optional<String> totalTaxableSales;

        private Optional<String> amount;

        private Optional<String> totalTaxLiability;

        private Optional<Long> transactionCount;

        private Optional<String> internalNotes = Optional.empty();

        private Optional<String> recentDetailsReportLink = Optional.empty();

        private Optional<String> taxRemitted;

        private Optional<String> returnConfirmationId = Optional.empty();

        private Optional<String> paymentConfirmationId = Optional.empty();

        private Optional<Boolean> blockApproval = Optional.empty();

        private Optional<? extends CurrencyEnum> currency = Optional.empty();

        private String id;

        private String registrationId;

        private Optional<? extends Attachments> attachments = Optional.empty();

        private Optional<String> creditsUtilized;

        private Builder() {
          // force use of static builder() method
        }


        public Builder status(FilingStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends FilingStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The start date of the filing period.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * The end date of the filing period.
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * The due date of the filing.
         */
        public Builder dueDate(String dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        /**
         * The due date of the filing.
         */
        public Builder dueDate(Optional<String> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }


        /**
         * The date the filing was completed, if applicable.
         */
        public Builder dateFiled(String dateFiled) {
            Utils.checkNotNull(dateFiled, "dateFiled");
            this.dateFiled = Optional.ofNullable(dateFiled);
            return this;
        }

        /**
         * The date the filing was completed, if applicable.
         */
        public Builder dateFiled(Optional<String> dateFiled) {
            Utils.checkNotNull(dateFiled, "dateFiled");
            this.dateFiled = dateFiled;
            return this;
        }


        /**
         * Indicates if the filing was done manually.
         */
        public Builder isManual(boolean isManual) {
            Utils.checkNotNull(isManual, "isManual");
            this.isManual = Optional.ofNullable(isManual);
            return this;
        }

        /**
         * Indicates if the filing was done manually.
         */
        public Builder isManual(Optional<Boolean> isManual) {
            Utils.checkNotNull(isManual, "isManual");
            this.isManual = isManual;
            return this;
        }


        /**
         * The code of the state associated with the filing (e.g., IA, NY).
         */
        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = Optional.ofNullable(stateCode);
            return this;
        }

        /**
         * The code of the state associated with the filing (e.g., IA, NY).
         */
        public Builder stateCode(Optional<String> stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        /**
         * The name of the state associated with the filing
         *         (e.g., Iowa, New York).
         */
        public Builder stateName(String stateName) {
            Utils.checkNotNull(stateName, "stateName");
            this.stateName = Optional.ofNullable(stateName);
            return this;
        }

        /**
         * The name of the state associated with the filing
         *         (e.g., Iowa, New York).
         */
        public Builder stateName(Optional<String> stateName) {
            Utils.checkNotNull(stateName, "stateName");
            this.stateName = stateName;
            return this;
        }


        public Builder countryCode(CountryCodeEnum countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }


        /**
         * The associated JIRA issue key for tracking the filing,
         *         if available. Can be null.
         */
        public Builder jiraIssueKey(String jiraIssueKey) {
            Utils.checkNotNull(jiraIssueKey, "jiraIssueKey");
            this.jiraIssueKey = Optional.ofNullable(jiraIssueKey);
            return this;
        }

        /**
         * The associated JIRA issue key for tracking the filing,
         *         if available. Can be null.
         */
        public Builder jiraIssueKey(Optional<String> jiraIssueKey) {
            Utils.checkNotNull(jiraIssueKey, "jiraIssueKey");
            this.jiraIssueKey = jiraIssueKey;
            return this;
        }


        /**
         * Indicates if the filing was auto-approved. Defaults to false.
         */
        public Builder autoApproved(boolean autoApproved) {
            Utils.checkNotNull(autoApproved, "autoApproved");
            this.autoApproved = Optional.ofNullable(autoApproved);
            return this;
        }

        /**
         * Indicates if the filing was auto-approved. Defaults to false.
         */
        public Builder autoApproved(Optional<Boolean> autoApproved) {
            Utils.checkNotNull(autoApproved, "autoApproved");
            this.autoApproved = autoApproved;
            return this;
        }


        /**
         * The calculated amount for the filing. Defaults to 0.00.
         */
        public Builder amountCalculated(String amountCalculated) {
            Utils.checkNotNull(amountCalculated, "amountCalculated");
            this.amountCalculated = Optional.ofNullable(amountCalculated);
            return this;
        }

        /**
         * The calculated amount for the filing. Defaults to 0.00.
         */
        public Builder amountCalculated(Optional<String> amountCalculated) {
            Utils.checkNotNull(amountCalculated, "amountCalculated");
            this.amountCalculated = amountCalculated;
            return this;
        }


        /**
         * Adjusted amount, if any.
         */
        public Builder amountAdjusted(String amountAdjusted) {
            Utils.checkNotNull(amountAdjusted, "amountAdjusted");
            this.amountAdjusted = Optional.ofNullable(amountAdjusted);
            return this;
        }

        /**
         * Adjusted amount, if any.
         */
        public Builder amountAdjusted(Optional<String> amountAdjusted) {
            Utils.checkNotNull(amountAdjusted, "amountAdjusted");
            this.amountAdjusted = amountAdjusted;
            return this;
        }


        /**
         * Discounts applied to the filing.
         */
        public Builder amountDiscounts(String amountDiscounts) {
            Utils.checkNotNull(amountDiscounts, "amountDiscounts");
            this.amountDiscounts = Optional.ofNullable(amountDiscounts);
            return this;
        }

        /**
         * Discounts applied to the filing.
         */
        public Builder amountDiscounts(Optional<String> amountDiscounts) {
            Utils.checkNotNull(amountDiscounts, "amountDiscounts");
            this.amountDiscounts = amountDiscounts;
            return this;
        }


        /**
         * Discounts applied to the amount.
         */
        public Builder amountFees(String amountFees) {
            Utils.checkNotNull(amountFees, "amountFees");
            this.amountFees = Optional.ofNullable(amountFees);
            return this;
        }

        /**
         * Discounts applied to the amount.
         */
        public Builder amountFees(Optional<String> amountFees) {
            Utils.checkNotNull(amountFees, "amountFees");
            this.amountFees = amountFees;
            return this;
        }


        /**
         * Penalties applied to the filing.
         */
        public Builder amountPenalties(String amountPenalties) {
            Utils.checkNotNull(amountPenalties, "amountPenalties");
            this.amountPenalties = Optional.ofNullable(amountPenalties);
            return this;
        }

        /**
         * Penalties applied to the filing.
         */
        public Builder amountPenalties(Optional<String> amountPenalties) {
            Utils.checkNotNull(amountPenalties, "amountPenalties");
            this.amountPenalties = amountPenalties;
            return this;
        }


        /**
         * Total tax collected during the filing period.
         */
        public Builder amountTaxCollected(String amountTaxCollected) {
            Utils.checkNotNull(amountTaxCollected, "amountTaxCollected");
            this.amountTaxCollected = Optional.ofNullable(amountTaxCollected);
            return this;
        }

        /**
         * Total tax collected during the filing period.
         */
        public Builder amountTaxCollected(Optional<String> amountTaxCollected) {
            Utils.checkNotNull(amountTaxCollected, "amountTaxCollected");
            this.amountTaxCollected = amountTaxCollected;
            return this;
        }


        /**
         * Total sales amount during the filing period.
         */
        public Builder amountSales(String amountSales) {
            Utils.checkNotNull(amountSales, "amountSales");
            this.amountSales = Optional.ofNullable(amountSales);
            return this;
        }

        /**
         * Total sales amount during the filing period.
         */
        public Builder amountSales(Optional<String> amountSales) {
            Utils.checkNotNull(amountSales, "amountSales");
            this.amountSales = amountSales;
            return this;
        }


        /**
         * Total taxable amount during the filing period.
         */
        public Builder totalTaxableSales(String totalTaxableSales) {
            Utils.checkNotNull(totalTaxableSales, "totalTaxableSales");
            this.totalTaxableSales = Optional.ofNullable(totalTaxableSales);
            return this;
        }

        /**
         * Total taxable amount during the filing period.
         */
        public Builder totalTaxableSales(Optional<String> totalTaxableSales) {
            Utils.checkNotNull(totalTaxableSales, "totalTaxableSales");
            this.totalTaxableSales = totalTaxableSales;
            return this;
        }


        /**
         * Final amount due for the filing.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Final amount due for the filing.
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Total tax liability for the filing.
         */
        public Builder totalTaxLiability(String totalTaxLiability) {
            Utils.checkNotNull(totalTaxLiability, "totalTaxLiability");
            this.totalTaxLiability = Optional.ofNullable(totalTaxLiability);
            return this;
        }

        /**
         * Total tax liability for the filing.
         */
        public Builder totalTaxLiability(Optional<String> totalTaxLiability) {
            Utils.checkNotNull(totalTaxLiability, "totalTaxLiability");
            this.totalTaxLiability = totalTaxLiability;
            return this;
        }


        /**
         * Total number of transactions associated with the filing.
         */
        public Builder transactionCount(long transactionCount) {
            Utils.checkNotNull(transactionCount, "transactionCount");
            this.transactionCount = Optional.ofNullable(transactionCount);
            return this;
        }

        /**
         * Total number of transactions associated with the filing.
         */
        public Builder transactionCount(Optional<Long> transactionCount) {
            Utils.checkNotNull(transactionCount, "transactionCount");
            this.transactionCount = transactionCount;
            return this;
        }


        /**
         * Notes or comments related to the filing.
         */
        public Builder internalNotes(String internalNotes) {
            Utils.checkNotNull(internalNotes, "internalNotes");
            this.internalNotes = Optional.ofNullable(internalNotes);
            return this;
        }

        /**
         * Notes or comments related to the filing.
         */
        public Builder internalNotes(Optional<String> internalNotes) {
            Utils.checkNotNull(internalNotes, "internalNotes");
            this.internalNotes = internalNotes;
            return this;
        }


        public Builder recentDetailsReportLink(String recentDetailsReportLink) {
            Utils.checkNotNull(recentDetailsReportLink, "recentDetailsReportLink");
            this.recentDetailsReportLink = Optional.ofNullable(recentDetailsReportLink);
            return this;
        }

        public Builder recentDetailsReportLink(Optional<String> recentDetailsReportLink) {
            Utils.checkNotNull(recentDetailsReportLink, "recentDetailsReportLink");
            this.recentDetailsReportLink = recentDetailsReportLink;
            return this;
        }


        /**
         * The amount of tax remitted.
         */
        public Builder taxRemitted(String taxRemitted) {
            Utils.checkNotNull(taxRemitted, "taxRemitted");
            this.taxRemitted = Optional.ofNullable(taxRemitted);
            return this;
        }

        /**
         * The amount of tax remitted.
         */
        public Builder taxRemitted(Optional<String> taxRemitted) {
            Utils.checkNotNull(taxRemitted, "taxRemitted");
            this.taxRemitted = taxRemitted;
            return this;
        }


        /**
         * Return confirmation ID, if applicable.
         */
        public Builder returnConfirmationId(String returnConfirmationId) {
            Utils.checkNotNull(returnConfirmationId, "returnConfirmationId");
            this.returnConfirmationId = Optional.ofNullable(returnConfirmationId);
            return this;
        }

        /**
         * Return confirmation ID, if applicable.
         */
        public Builder returnConfirmationId(Optional<String> returnConfirmationId) {
            Utils.checkNotNull(returnConfirmationId, "returnConfirmationId");
            this.returnConfirmationId = returnConfirmationId;
            return this;
        }


        /**
         * Payment confirmation ID, if applicable.
         */
        public Builder paymentConfirmationId(String paymentConfirmationId) {
            Utils.checkNotNull(paymentConfirmationId, "paymentConfirmationId");
            this.paymentConfirmationId = Optional.ofNullable(paymentConfirmationId);
            return this;
        }

        /**
         * Payment confirmation ID, if applicable.
         */
        public Builder paymentConfirmationId(Optional<String> paymentConfirmationId) {
            Utils.checkNotNull(paymentConfirmationId, "paymentConfirmationId");
            this.paymentConfirmationId = paymentConfirmationId;
            return this;
        }


        /**
         * Indicates if the filing can be approved.
         */
        public Builder blockApproval(boolean blockApproval) {
            Utils.checkNotNull(blockApproval, "blockApproval");
            this.blockApproval = Optional.ofNullable(blockApproval);
            return this;
        }

        /**
         * Indicates if the filing can be approved.
         */
        public Builder blockApproval(Optional<Boolean> blockApproval) {
            Utils.checkNotNull(blockApproval, "blockApproval");
            this.blockApproval = blockApproval;
            return this;
        }


        public Builder currency(CurrencyEnum currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<? extends CurrencyEnum> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Unique identifier for the filing.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Identifier for the registration associated with the filing.
         */
        public Builder registrationId(String registrationId) {
            Utils.checkNotNull(registrationId, "registrationId");
            this.registrationId = registrationId;
            return this;
        }


        /**
         * List of attachments associated with the filing, if any.
         */
        public Builder attachments(Attachments attachments) {
            Utils.checkNotNull(attachments, "attachments");
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        /**
         * List of attachments associated with the filing, if any.
         */
        public Builder attachments(Optional<? extends Attachments> attachments) {
            Utils.checkNotNull(attachments, "attachments");
            this.attachments = attachments;
            return this;
        }


        public Builder creditsUtilized(String creditsUtilized) {
            Utils.checkNotNull(creditsUtilized, "creditsUtilized");
            this.creditsUtilized = Optional.ofNullable(creditsUtilized);
            return this;
        }

        public Builder creditsUtilized(Optional<String> creditsUtilized) {
            Utils.checkNotNull(creditsUtilized, "creditsUtilized");
            this.creditsUtilized = creditsUtilized;
            return this;
        }

        public FilingDetailsRead build() {
            if (autoApproved == null) {
                autoApproved = _SINGLETON_VALUE_AutoApproved.value();
            }
            if (amountCalculated == null) {
                amountCalculated = _SINGLETON_VALUE_AmountCalculated.value();
            }
            if (amountAdjusted == null) {
                amountAdjusted = _SINGLETON_VALUE_AmountAdjusted.value();
            }
            if (amountDiscounts == null) {
                amountDiscounts = _SINGLETON_VALUE_AmountDiscounts.value();
            }
            if (amountFees == null) {
                amountFees = _SINGLETON_VALUE_AmountFees.value();
            }
            if (amountPenalties == null) {
                amountPenalties = _SINGLETON_VALUE_AmountPenalties.value();
            }
            if (amountTaxCollected == null) {
                amountTaxCollected = _SINGLETON_VALUE_AmountTaxCollected.value();
            }
            if (amountSales == null) {
                amountSales = _SINGLETON_VALUE_AmountSales.value();
            }
            if (totalTaxableSales == null) {
                totalTaxableSales = _SINGLETON_VALUE_TotalTaxableSales.value();
            }
            if (amount == null) {
                amount = _SINGLETON_VALUE_Amount.value();
            }
            if (totalTaxLiability == null) {
                totalTaxLiability = _SINGLETON_VALUE_TotalTaxLiability.value();
            }
            if (transactionCount == null) {
                transactionCount = _SINGLETON_VALUE_TransactionCount.value();
            }
            if (taxRemitted == null) {
                taxRemitted = _SINGLETON_VALUE_TaxRemitted.value();
            }
            if (creditsUtilized == null) {
                creditsUtilized = _SINGLETON_VALUE_CreditsUtilized.value();
            }

            return new FilingDetailsRead(
                status, startDate, endDate,
                dueDate, dateFiled, isManual,
                stateCode, stateName, countryCode,
                jiraIssueKey, autoApproved, amountCalculated,
                amountAdjusted, amountDiscounts, amountFees,
                amountPenalties, amountTaxCollected, amountSales,
                totalTaxableSales, amount, totalTaxLiability,
                transactionCount, internalNotes, recentDetailsReportLink,
                taxRemitted, returnConfirmationId, paymentConfirmationId,
                blockApproval, currency, id,
                registrationId, attachments, creditsUtilized);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_AutoApproved =
                new LazySingletonValue<>(
                        "auto_approved",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AmountCalculated =
                new LazySingletonValue<>(
                        "amount_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AmountAdjusted =
                new LazySingletonValue<>(
                        "amount_adjusted",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AmountDiscounts =
                new LazySingletonValue<>(
                        "amount_discounts",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AmountFees =
                new LazySingletonValue<>(
                        "amount_fees",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AmountPenalties =
                new LazySingletonValue<>(
                        "amount_penalties",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AmountTaxCollected =
                new LazySingletonValue<>(
                        "amount_tax_collected",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AmountSales =
                new LazySingletonValue<>(
                        "amount_sales",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TotalTaxableSales =
                new LazySingletonValue<>(
                        "total_taxable_sales",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Amount =
                new LazySingletonValue<>(
                        "amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TotalTaxLiability =
                new LazySingletonValue<>(
                        "total_tax_liability",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_TransactionCount =
                new LazySingletonValue<>(
                        "transaction_count",
                        "0",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxRemitted =
                new LazySingletonValue<>(
                        "tax_remitted",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_CreditsUtilized =
                new LazySingletonValue<>(
                        "credits_utilized",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});
    }
}
