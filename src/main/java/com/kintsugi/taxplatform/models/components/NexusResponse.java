/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class NexusResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_status")
    private Optional<? extends NexusStatusEnum> processingStatus;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends NexusStateEnum> status;


    @JsonProperty("country_code")
    private CountryCodeEnum countryCode;


    @JsonProperty("state_code")
    private String stateCode;


    @JsonProperty("state_name")
    private String stateName;


    @JsonProperty("treatment_of_exempt_transactions")
    private TreatmentEnum treatmentOfExemptTransactions;


    @JsonProperty("trigger")
    private String trigger;


    @JsonProperty("sales_or_transactions")
    private SalesOrTransactionsEnum salesOrTransactions;


    @JsonProperty("threshold_sales")
    private long thresholdSales;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("threshold_transactions")
    private Optional<Long> thresholdTransactions;


    @JsonProperty("start_date")
    private LocalDate startDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_count")
    private Optional<Long> transactionCount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions_amount")
    private Optional<String> transactionsAmount;

    /**
     * Deprecated: transaction_count now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous_transaction_count")
    @Deprecated
    private Optional<Long> previousTransactionCount;

    /**
     * Deprecated: transactions_amount now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous_transactions_amount")
    @Deprecated
    private Optional<String> previousTransactionsAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calculated_tax_liability")
    private JsonNullable<String> calculatedTaxLiability;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imported_tax_liability")
    private JsonNullable<String> importedTaxLiability;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_liability")
    private Optional<String> taxLiability;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nexus_met")
    private Optional<Boolean> nexusMet;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nexus_met_date")
    private JsonNullable<LocalDate> nexusMetDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("economic_nexus_met")
    private Optional<Boolean> economicNexusMet;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("economic_nexus_met_date")
    private JsonNullable<LocalDate> economicNexusMetDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("physical_nexus_met")
    private Optional<Boolean> physicalNexusMet;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("physical_nexus_met_date")
    private JsonNullable<LocalDate> physicalNexusMetDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collected_tax_nexus_met")
    private JsonNullable<Boolean> collectedTaxNexusMet;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collected_tax_nexus_met_date")
    private JsonNullable<LocalDate> collectedTaxNexusMetDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collected_tax_enabled")
    private Optional<Boolean> collectedTaxEnabled;


    @JsonProperty("period_model")
    private PeriodModelEnum periodModel;


    @JsonProperty("period_start_date")
    private LocalDate periodStartDate;


    @JsonProperty("period_end_date")
    private LocalDate periodEndDate;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("previous_period_start_date")
    private Optional<LocalDate> previousPeriodStartDate;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("previous_period_end_date")
    private Optional<LocalDate> previousPeriodEndDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earliest_transaction_date")
    private JsonNullable<OffsetDateTime> earliestTransactionDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("most_recent_transaction_date")
    private JsonNullable<OffsetDateTime> mostRecentTransactionDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earliest_collected_date")
    private Optional<OffsetDateTime> earliestCollectedDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("predicted_month_from_today")
    private JsonNullable<Long> predictedMonthFromToday;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vda_eligible")
    private JsonNullable<Boolean> vdaEligible;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidence_level")
    private JsonNullable<Double> confidenceLevel;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_processed_at")
    private JsonNullable<OffsetDateTime> lastProcessedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_tax_liability_processed_at")
    private JsonNullable<OffsetDateTime> lastTaxLiabilityProcessedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periods")
    private JsonNullable<? extends List<Map<String, Object>>> periods;

    /**
     * Currency code for the nexus (e.g., USD, CAD).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends CurrencyEnum> currency;


    @JsonProperty("id")
    private String id;


    @JsonProperty("created_at")
    private OffsetDateTime createdAt;


    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;


    @JsonProperty("organization_id")
    private String organizationId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration")
    private JsonNullable<? extends Map<String, Object>> registration;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_regime")
    private JsonNullable<? extends RegistrationsRegimeEnum> registrationRegime;


    @JsonProperty("is_vda_eligible")
    private boolean isVdaEligible;


    @JsonProperty("nexus_type")
    private NexusTypeEnum nexusType;


    @JsonProperty("total_transactions")
    private long totalTransactions;


    @JsonProperty("total_transactions_included")
    private long totalTransactionsIncluded;


    @JsonProperty("total_transactions_exempted")
    private long totalTransactionsExempted;


    @JsonProperty("total_transactions_marketplace")
    private long totalTransactionsMarketplace;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("marketplace_included")
    private Optional<Boolean> marketplaceIncluded;

    @JsonCreator
    public NexusResponse(
            @JsonProperty("processing_status") Optional<? extends NexusStatusEnum> processingStatus,
            @JsonProperty("status") Optional<? extends NexusStateEnum> status,
            @JsonProperty("country_code") CountryCodeEnum countryCode,
            @JsonProperty("state_code") String stateCode,
            @JsonProperty("state_name") String stateName,
            @JsonProperty("treatment_of_exempt_transactions") TreatmentEnum treatmentOfExemptTransactions,
            @JsonProperty("trigger") String trigger,
            @JsonProperty("sales_or_transactions") SalesOrTransactionsEnum salesOrTransactions,
            @JsonProperty("threshold_sales") long thresholdSales,
            @JsonProperty("threshold_transactions") Optional<Long> thresholdTransactions,
            @JsonProperty("start_date") LocalDate startDate,
            @JsonProperty("transaction_count") Optional<Long> transactionCount,
            @JsonProperty("transactions_amount") Optional<String> transactionsAmount,
            @JsonProperty("previous_transaction_count") Optional<Long> previousTransactionCount,
            @JsonProperty("previous_transactions_amount") Optional<String> previousTransactionsAmount,
            @JsonProperty("calculated_tax_liability") JsonNullable<String> calculatedTaxLiability,
            @JsonProperty("imported_tax_liability") JsonNullable<String> importedTaxLiability,
            @JsonProperty("tax_liability") Optional<String> taxLiability,
            @JsonProperty("nexus_met") Optional<Boolean> nexusMet,
            @JsonProperty("nexus_met_date") JsonNullable<LocalDate> nexusMetDate,
            @JsonProperty("economic_nexus_met") Optional<Boolean> economicNexusMet,
            @JsonProperty("economic_nexus_met_date") JsonNullable<LocalDate> economicNexusMetDate,
            @JsonProperty("physical_nexus_met") Optional<Boolean> physicalNexusMet,
            @JsonProperty("physical_nexus_met_date") JsonNullable<LocalDate> physicalNexusMetDate,
            @JsonProperty("collected_tax_nexus_met") JsonNullable<Boolean> collectedTaxNexusMet,
            @JsonProperty("collected_tax_nexus_met_date") JsonNullable<LocalDate> collectedTaxNexusMetDate,
            @JsonProperty("collected_tax_enabled") Optional<Boolean> collectedTaxEnabled,
            @JsonProperty("period_model") PeriodModelEnum periodModel,
            @JsonProperty("period_start_date") LocalDate periodStartDate,
            @JsonProperty("period_end_date") LocalDate periodEndDate,
            @JsonProperty("previous_period_start_date") Optional<LocalDate> previousPeriodStartDate,
            @JsonProperty("previous_period_end_date") Optional<LocalDate> previousPeriodEndDate,
            @JsonProperty("earliest_transaction_date") JsonNullable<OffsetDateTime> earliestTransactionDate,
            @JsonProperty("most_recent_transaction_date") JsonNullable<OffsetDateTime> mostRecentTransactionDate,
            @JsonProperty("earliest_collected_date") Optional<OffsetDateTime> earliestCollectedDate,
            @JsonProperty("predicted_month_from_today") JsonNullable<Long> predictedMonthFromToday,
            @JsonProperty("vda_eligible") JsonNullable<Boolean> vdaEligible,
            @JsonProperty("confidence_level") JsonNullable<Double> confidenceLevel,
            @JsonProperty("last_processed_at") JsonNullable<OffsetDateTime> lastProcessedAt,
            @JsonProperty("last_tax_liability_processed_at") JsonNullable<OffsetDateTime> lastTaxLiabilityProcessedAt,
            @JsonProperty("periods") JsonNullable<? extends List<Map<String, Object>>> periods,
            @JsonProperty("currency") JsonNullable<? extends CurrencyEnum> currency,
            @JsonProperty("id") String id,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("organization_id") String organizationId,
            @JsonProperty("registration") JsonNullable<? extends Map<String, Object>> registration,
            @JsonProperty("registration_regime") JsonNullable<? extends RegistrationsRegimeEnum> registrationRegime,
            @JsonProperty("is_vda_eligible") boolean isVdaEligible,
            @JsonProperty("nexus_type") NexusTypeEnum nexusType,
            @JsonProperty("total_transactions") long totalTransactions,
            @JsonProperty("total_transactions_included") long totalTransactionsIncluded,
            @JsonProperty("total_transactions_exempted") long totalTransactionsExempted,
            @JsonProperty("total_transactions_marketplace") long totalTransactionsMarketplace,
            @JsonProperty("marketplace_included") Optional<Boolean> marketplaceIncluded) {
        Utils.checkNotNull(processingStatus, "processingStatus");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(stateName, "stateName");
        Utils.checkNotNull(treatmentOfExemptTransactions, "treatmentOfExemptTransactions");
        Utils.checkNotNull(trigger, "trigger");
        Utils.checkNotNull(salesOrTransactions, "salesOrTransactions");
        Utils.checkNotNull(thresholdSales, "thresholdSales");
        Utils.checkNotNull(thresholdTransactions, "thresholdTransactions");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(transactionCount, "transactionCount");
        Utils.checkNotNull(transactionsAmount, "transactionsAmount");
        Utils.checkNotNull(previousTransactionCount, "previousTransactionCount");
        Utils.checkNotNull(previousTransactionsAmount, "previousTransactionsAmount");
        Utils.checkNotNull(calculatedTaxLiability, "calculatedTaxLiability");
        Utils.checkNotNull(importedTaxLiability, "importedTaxLiability");
        Utils.checkNotNull(taxLiability, "taxLiability");
        Utils.checkNotNull(nexusMet, "nexusMet");
        Utils.checkNotNull(nexusMetDate, "nexusMetDate");
        Utils.checkNotNull(economicNexusMet, "economicNexusMet");
        Utils.checkNotNull(economicNexusMetDate, "economicNexusMetDate");
        Utils.checkNotNull(physicalNexusMet, "physicalNexusMet");
        Utils.checkNotNull(physicalNexusMetDate, "physicalNexusMetDate");
        Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
        Utils.checkNotNull(collectedTaxNexusMetDate, "collectedTaxNexusMetDate");
        Utils.checkNotNull(collectedTaxEnabled, "collectedTaxEnabled");
        Utils.checkNotNull(periodModel, "periodModel");
        Utils.checkNotNull(periodStartDate, "periodStartDate");
        Utils.checkNotNull(periodEndDate, "periodEndDate");
        Utils.checkNotNull(previousPeriodStartDate, "previousPeriodStartDate");
        Utils.checkNotNull(previousPeriodEndDate, "previousPeriodEndDate");
        Utils.checkNotNull(earliestTransactionDate, "earliestTransactionDate");
        Utils.checkNotNull(mostRecentTransactionDate, "mostRecentTransactionDate");
        Utils.checkNotNull(earliestCollectedDate, "earliestCollectedDate");
        Utils.checkNotNull(predictedMonthFromToday, "predictedMonthFromToday");
        Utils.checkNotNull(vdaEligible, "vdaEligible");
        Utils.checkNotNull(confidenceLevel, "confidenceLevel");
        Utils.checkNotNull(lastProcessedAt, "lastProcessedAt");
        Utils.checkNotNull(lastTaxLiabilityProcessedAt, "lastTaxLiabilityProcessedAt");
        Utils.checkNotNull(periods, "periods");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(registration, "registration");
        Utils.checkNotNull(registrationRegime, "registrationRegime");
        Utils.checkNotNull(isVdaEligible, "isVdaEligible");
        Utils.checkNotNull(nexusType, "nexusType");
        Utils.checkNotNull(totalTransactions, "totalTransactions");
        Utils.checkNotNull(totalTransactionsIncluded, "totalTransactionsIncluded");
        Utils.checkNotNull(totalTransactionsExempted, "totalTransactionsExempted");
        Utils.checkNotNull(totalTransactionsMarketplace, "totalTransactionsMarketplace");
        Utils.checkNotNull(marketplaceIncluded, "marketplaceIncluded");
        this.processingStatus = processingStatus;
        this.status = status;
        this.countryCode = countryCode;
        this.stateCode = stateCode;
        this.stateName = stateName;
        this.treatmentOfExemptTransactions = treatmentOfExemptTransactions;
        this.trigger = trigger;
        this.salesOrTransactions = salesOrTransactions;
        this.thresholdSales = thresholdSales;
        this.thresholdTransactions = thresholdTransactions;
        this.startDate = startDate;
        this.transactionCount = transactionCount;
        this.transactionsAmount = transactionsAmount;
        this.previousTransactionCount = previousTransactionCount;
        this.previousTransactionsAmount = previousTransactionsAmount;
        this.calculatedTaxLiability = calculatedTaxLiability;
        this.importedTaxLiability = importedTaxLiability;
        this.taxLiability = taxLiability;
        this.nexusMet = nexusMet;
        this.nexusMetDate = nexusMetDate;
        this.economicNexusMet = economicNexusMet;
        this.economicNexusMetDate = economicNexusMetDate;
        this.physicalNexusMet = physicalNexusMet;
        this.physicalNexusMetDate = physicalNexusMetDate;
        this.collectedTaxNexusMet = collectedTaxNexusMet;
        this.collectedTaxNexusMetDate = collectedTaxNexusMetDate;
        this.collectedTaxEnabled = collectedTaxEnabled;
        this.periodModel = periodModel;
        this.periodStartDate = periodStartDate;
        this.periodEndDate = periodEndDate;
        this.previousPeriodStartDate = previousPeriodStartDate;
        this.previousPeriodEndDate = previousPeriodEndDate;
        this.earliestTransactionDate = earliestTransactionDate;
        this.mostRecentTransactionDate = mostRecentTransactionDate;
        this.earliestCollectedDate = earliestCollectedDate;
        this.predictedMonthFromToday = predictedMonthFromToday;
        this.vdaEligible = vdaEligible;
        this.confidenceLevel = confidenceLevel;
        this.lastProcessedAt = lastProcessedAt;
        this.lastTaxLiabilityProcessedAt = lastTaxLiabilityProcessedAt;
        this.periods = periods;
        this.currency = currency;
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.organizationId = organizationId;
        this.registration = registration;
        this.registrationRegime = registrationRegime;
        this.isVdaEligible = isVdaEligible;
        this.nexusType = nexusType;
        this.totalTransactions = totalTransactions;
        this.totalTransactionsIncluded = totalTransactionsIncluded;
        this.totalTransactionsExempted = totalTransactionsExempted;
        this.totalTransactionsMarketplace = totalTransactionsMarketplace;
        this.marketplaceIncluded = marketplaceIncluded;
    }
    
    public NexusResponse(
            CountryCodeEnum countryCode,
            String stateCode,
            String stateName,
            TreatmentEnum treatmentOfExemptTransactions,
            String trigger,
            SalesOrTransactionsEnum salesOrTransactions,
            long thresholdSales,
            LocalDate startDate,
            PeriodModelEnum periodModel,
            LocalDate periodStartDate,
            LocalDate periodEndDate,
            String id,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            String organizationId,
            boolean isVdaEligible,
            NexusTypeEnum nexusType,
            long totalTransactions,
            long totalTransactionsIncluded,
            long totalTransactionsExempted,
            long totalTransactionsMarketplace) {
        this(Optional.empty(), Optional.empty(), countryCode,
            stateCode, stateName, treatmentOfExemptTransactions,
            trigger, salesOrTransactions, thresholdSales,
            Optional.empty(), startDate, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            periodModel, periodStartDate, periodEndDate,
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            id, createdAt, updatedAt,
            organizationId, JsonNullable.undefined(), JsonNullable.undefined(),
            isVdaEligible, nexusType, totalTransactions,
            totalTransactionsIncluded, totalTransactionsExempted, totalTransactionsMarketplace,
            Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NexusStatusEnum> processingStatus() {
        return (Optional<NexusStatusEnum>) processingStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NexusStateEnum> status() {
        return (Optional<NexusStateEnum>) status;
    }

    @JsonIgnore
    public CountryCodeEnum countryCode() {
        return countryCode;
    }

    @JsonIgnore
    public String stateCode() {
        return stateCode;
    }

    @JsonIgnore
    public String stateName() {
        return stateName;
    }

    @JsonIgnore
    public TreatmentEnum treatmentOfExemptTransactions() {
        return treatmentOfExemptTransactions;
    }

    @JsonIgnore
    public String trigger() {
        return trigger;
    }

    @JsonIgnore
    public SalesOrTransactionsEnum salesOrTransactions() {
        return salesOrTransactions;
    }

    @JsonIgnore
    public long thresholdSales() {
        return thresholdSales;
    }

    @JsonIgnore
    public Optional<Long> thresholdTransactions() {
        return thresholdTransactions;
    }

    @JsonIgnore
    public LocalDate startDate() {
        return startDate;
    }

    @JsonIgnore
    public Optional<Long> transactionCount() {
        return transactionCount;
    }

    @JsonIgnore
    public Optional<String> transactionsAmount() {
        return transactionsAmount;
    }

    /**
     * Deprecated: transaction_count now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Long> previousTransactionCount() {
        return previousTransactionCount;
    }

    /**
     * Deprecated: transactions_amount now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> previousTransactionsAmount() {
        return previousTransactionsAmount;
    }

    @JsonIgnore
    public JsonNullable<String> calculatedTaxLiability() {
        return calculatedTaxLiability;
    }

    @JsonIgnore
    public JsonNullable<String> importedTaxLiability() {
        return importedTaxLiability;
    }

    @JsonIgnore
    public Optional<String> taxLiability() {
        return taxLiability;
    }

    @JsonIgnore
    public Optional<Boolean> nexusMet() {
        return nexusMet;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> nexusMetDate() {
        return nexusMetDate;
    }

    @JsonIgnore
    public Optional<Boolean> economicNexusMet() {
        return economicNexusMet;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> economicNexusMetDate() {
        return economicNexusMetDate;
    }

    @JsonIgnore
    public Optional<Boolean> physicalNexusMet() {
        return physicalNexusMet;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> physicalNexusMetDate() {
        return physicalNexusMetDate;
    }

    @JsonIgnore
    public JsonNullable<Boolean> collectedTaxNexusMet() {
        return collectedTaxNexusMet;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> collectedTaxNexusMetDate() {
        return collectedTaxNexusMetDate;
    }

    @JsonIgnore
    public Optional<Boolean> collectedTaxEnabled() {
        return collectedTaxEnabled;
    }

    @JsonIgnore
    public PeriodModelEnum periodModel() {
        return periodModel;
    }

    @JsonIgnore
    public LocalDate periodStartDate() {
        return periodStartDate;
    }

    @JsonIgnore
    public LocalDate periodEndDate() {
        return periodEndDate;
    }

    @JsonIgnore
    public Optional<LocalDate> previousPeriodStartDate() {
        return previousPeriodStartDate;
    }

    @JsonIgnore
    public Optional<LocalDate> previousPeriodEndDate() {
        return previousPeriodEndDate;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> earliestTransactionDate() {
        return earliestTransactionDate;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> mostRecentTransactionDate() {
        return mostRecentTransactionDate;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> earliestCollectedDate() {
        return earliestCollectedDate;
    }

    @JsonIgnore
    public JsonNullable<Long> predictedMonthFromToday() {
        return predictedMonthFromToday;
    }

    @JsonIgnore
    public JsonNullable<Boolean> vdaEligible() {
        return vdaEligible;
    }

    @JsonIgnore
    public JsonNullable<Double> confidenceLevel() {
        return confidenceLevel;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastProcessedAt() {
        return lastProcessedAt;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastTaxLiabilityProcessedAt() {
        return lastTaxLiabilityProcessedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Map<String, Object>>> periods() {
        return (JsonNullable<List<Map<String, Object>>>) periods;
    }

    /**
     * Currency code for the nexus (e.g., USD, CAD).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyEnum> currency() {
        return (JsonNullable<CurrencyEnum>) currency;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> registration() {
        return (JsonNullable<Map<String, Object>>) registration;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<RegistrationsRegimeEnum> registrationRegime() {
        return (JsonNullable<RegistrationsRegimeEnum>) registrationRegime;
    }

    @JsonIgnore
    public boolean isVdaEligible() {
        return isVdaEligible;
    }

    @JsonIgnore
    public NexusTypeEnum nexusType() {
        return nexusType;
    }

    @JsonIgnore
    public long totalTransactions() {
        return totalTransactions;
    }

    @JsonIgnore
    public long totalTransactionsIncluded() {
        return totalTransactionsIncluded;
    }

    @JsonIgnore
    public long totalTransactionsExempted() {
        return totalTransactionsExempted;
    }

    @JsonIgnore
    public long totalTransactionsMarketplace() {
        return totalTransactionsMarketplace;
    }

    @JsonIgnore
    public Optional<Boolean> marketplaceIncluded() {
        return marketplaceIncluded;
    }

    public static Builder builder() {
        return new Builder();
    }


    public NexusResponse withProcessingStatus(NexusStatusEnum processingStatus) {
        Utils.checkNotNull(processingStatus, "processingStatus");
        this.processingStatus = Optional.ofNullable(processingStatus);
        return this;
    }


    public NexusResponse withProcessingStatus(Optional<? extends NexusStatusEnum> processingStatus) {
        Utils.checkNotNull(processingStatus, "processingStatus");
        this.processingStatus = processingStatus;
        return this;
    }

    public NexusResponse withStatus(NexusStateEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public NexusResponse withStatus(Optional<? extends NexusStateEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public NexusResponse withCountryCode(CountryCodeEnum countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    public NexusResponse withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    public NexusResponse withStateName(String stateName) {
        Utils.checkNotNull(stateName, "stateName");
        this.stateName = stateName;
        return this;
    }

    public NexusResponse withTreatmentOfExemptTransactions(TreatmentEnum treatmentOfExemptTransactions) {
        Utils.checkNotNull(treatmentOfExemptTransactions, "treatmentOfExemptTransactions");
        this.treatmentOfExemptTransactions = treatmentOfExemptTransactions;
        return this;
    }

    public NexusResponse withTrigger(String trigger) {
        Utils.checkNotNull(trigger, "trigger");
        this.trigger = trigger;
        return this;
    }

    public NexusResponse withSalesOrTransactions(SalesOrTransactionsEnum salesOrTransactions) {
        Utils.checkNotNull(salesOrTransactions, "salesOrTransactions");
        this.salesOrTransactions = salesOrTransactions;
        return this;
    }

    public NexusResponse withThresholdSales(long thresholdSales) {
        Utils.checkNotNull(thresholdSales, "thresholdSales");
        this.thresholdSales = thresholdSales;
        return this;
    }

    public NexusResponse withThresholdTransactions(long thresholdTransactions) {
        Utils.checkNotNull(thresholdTransactions, "thresholdTransactions");
        this.thresholdTransactions = Optional.ofNullable(thresholdTransactions);
        return this;
    }


    public NexusResponse withThresholdTransactions(Optional<Long> thresholdTransactions) {
        Utils.checkNotNull(thresholdTransactions, "thresholdTransactions");
        this.thresholdTransactions = thresholdTransactions;
        return this;
    }

    public NexusResponse withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    public NexusResponse withTransactionCount(long transactionCount) {
        Utils.checkNotNull(transactionCount, "transactionCount");
        this.transactionCount = Optional.ofNullable(transactionCount);
        return this;
    }


    public NexusResponse withTransactionCount(Optional<Long> transactionCount) {
        Utils.checkNotNull(transactionCount, "transactionCount");
        this.transactionCount = transactionCount;
        return this;
    }

    public NexusResponse withTransactionsAmount(String transactionsAmount) {
        Utils.checkNotNull(transactionsAmount, "transactionsAmount");
        this.transactionsAmount = Optional.ofNullable(transactionsAmount);
        return this;
    }


    public NexusResponse withTransactionsAmount(Optional<String> transactionsAmount) {
        Utils.checkNotNull(transactionsAmount, "transactionsAmount");
        this.transactionsAmount = transactionsAmount;
        return this;
    }

    /**
     * Deprecated: transaction_count now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public NexusResponse withPreviousTransactionCount(long previousTransactionCount) {
        Utils.checkNotNull(previousTransactionCount, "previousTransactionCount");
        this.previousTransactionCount = Optional.ofNullable(previousTransactionCount);
        return this;
    }


    /**
     * Deprecated: transaction_count now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public NexusResponse withPreviousTransactionCount(Optional<Long> previousTransactionCount) {
        Utils.checkNotNull(previousTransactionCount, "previousTransactionCount");
        this.previousTransactionCount = previousTransactionCount;
        return this;
    }

    /**
     * Deprecated: transactions_amount now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public NexusResponse withPreviousTransactionsAmount(String previousTransactionsAmount) {
        Utils.checkNotNull(previousTransactionsAmount, "previousTransactionsAmount");
        this.previousTransactionsAmount = Optional.ofNullable(previousTransactionsAmount);
        return this;
    }


    /**
     * Deprecated: transactions_amount now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public NexusResponse withPreviousTransactionsAmount(Optional<String> previousTransactionsAmount) {
        Utils.checkNotNull(previousTransactionsAmount, "previousTransactionsAmount");
        this.previousTransactionsAmount = previousTransactionsAmount;
        return this;
    }

    public NexusResponse withCalculatedTaxLiability(String calculatedTaxLiability) {
        Utils.checkNotNull(calculatedTaxLiability, "calculatedTaxLiability");
        this.calculatedTaxLiability = JsonNullable.of(calculatedTaxLiability);
        return this;
    }

    public NexusResponse withCalculatedTaxLiability(JsonNullable<String> calculatedTaxLiability) {
        Utils.checkNotNull(calculatedTaxLiability, "calculatedTaxLiability");
        this.calculatedTaxLiability = calculatedTaxLiability;
        return this;
    }

    public NexusResponse withImportedTaxLiability(String importedTaxLiability) {
        Utils.checkNotNull(importedTaxLiability, "importedTaxLiability");
        this.importedTaxLiability = JsonNullable.of(importedTaxLiability);
        return this;
    }

    public NexusResponse withImportedTaxLiability(JsonNullable<String> importedTaxLiability) {
        Utils.checkNotNull(importedTaxLiability, "importedTaxLiability");
        this.importedTaxLiability = importedTaxLiability;
        return this;
    }

    public NexusResponse withTaxLiability(String taxLiability) {
        Utils.checkNotNull(taxLiability, "taxLiability");
        this.taxLiability = Optional.ofNullable(taxLiability);
        return this;
    }


    public NexusResponse withTaxLiability(Optional<String> taxLiability) {
        Utils.checkNotNull(taxLiability, "taxLiability");
        this.taxLiability = taxLiability;
        return this;
    }

    public NexusResponse withNexusMet(boolean nexusMet) {
        Utils.checkNotNull(nexusMet, "nexusMet");
        this.nexusMet = Optional.ofNullable(nexusMet);
        return this;
    }


    public NexusResponse withNexusMet(Optional<Boolean> nexusMet) {
        Utils.checkNotNull(nexusMet, "nexusMet");
        this.nexusMet = nexusMet;
        return this;
    }

    public NexusResponse withNexusMetDate(LocalDate nexusMetDate) {
        Utils.checkNotNull(nexusMetDate, "nexusMetDate");
        this.nexusMetDate = JsonNullable.of(nexusMetDate);
        return this;
    }

    public NexusResponse withNexusMetDate(JsonNullable<LocalDate> nexusMetDate) {
        Utils.checkNotNull(nexusMetDate, "nexusMetDate");
        this.nexusMetDate = nexusMetDate;
        return this;
    }

    public NexusResponse withEconomicNexusMet(boolean economicNexusMet) {
        Utils.checkNotNull(economicNexusMet, "economicNexusMet");
        this.economicNexusMet = Optional.ofNullable(economicNexusMet);
        return this;
    }


    public NexusResponse withEconomicNexusMet(Optional<Boolean> economicNexusMet) {
        Utils.checkNotNull(economicNexusMet, "economicNexusMet");
        this.economicNexusMet = economicNexusMet;
        return this;
    }

    public NexusResponse withEconomicNexusMetDate(LocalDate economicNexusMetDate) {
        Utils.checkNotNull(economicNexusMetDate, "economicNexusMetDate");
        this.economicNexusMetDate = JsonNullable.of(economicNexusMetDate);
        return this;
    }

    public NexusResponse withEconomicNexusMetDate(JsonNullable<LocalDate> economicNexusMetDate) {
        Utils.checkNotNull(economicNexusMetDate, "economicNexusMetDate");
        this.economicNexusMetDate = economicNexusMetDate;
        return this;
    }

    public NexusResponse withPhysicalNexusMet(boolean physicalNexusMet) {
        Utils.checkNotNull(physicalNexusMet, "physicalNexusMet");
        this.physicalNexusMet = Optional.ofNullable(physicalNexusMet);
        return this;
    }


    public NexusResponse withPhysicalNexusMet(Optional<Boolean> physicalNexusMet) {
        Utils.checkNotNull(physicalNexusMet, "physicalNexusMet");
        this.physicalNexusMet = physicalNexusMet;
        return this;
    }

    public NexusResponse withPhysicalNexusMetDate(LocalDate physicalNexusMetDate) {
        Utils.checkNotNull(physicalNexusMetDate, "physicalNexusMetDate");
        this.physicalNexusMetDate = JsonNullable.of(physicalNexusMetDate);
        return this;
    }

    public NexusResponse withPhysicalNexusMetDate(JsonNullable<LocalDate> physicalNexusMetDate) {
        Utils.checkNotNull(physicalNexusMetDate, "physicalNexusMetDate");
        this.physicalNexusMetDate = physicalNexusMetDate;
        return this;
    }

    public NexusResponse withCollectedTaxNexusMet(boolean collectedTaxNexusMet) {
        Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
        this.collectedTaxNexusMet = JsonNullable.of(collectedTaxNexusMet);
        return this;
    }

    public NexusResponse withCollectedTaxNexusMet(JsonNullable<Boolean> collectedTaxNexusMet) {
        Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
        this.collectedTaxNexusMet = collectedTaxNexusMet;
        return this;
    }

    public NexusResponse withCollectedTaxNexusMetDate(LocalDate collectedTaxNexusMetDate) {
        Utils.checkNotNull(collectedTaxNexusMetDate, "collectedTaxNexusMetDate");
        this.collectedTaxNexusMetDate = JsonNullable.of(collectedTaxNexusMetDate);
        return this;
    }

    public NexusResponse withCollectedTaxNexusMetDate(JsonNullable<LocalDate> collectedTaxNexusMetDate) {
        Utils.checkNotNull(collectedTaxNexusMetDate, "collectedTaxNexusMetDate");
        this.collectedTaxNexusMetDate = collectedTaxNexusMetDate;
        return this;
    }

    public NexusResponse withCollectedTaxEnabled(boolean collectedTaxEnabled) {
        Utils.checkNotNull(collectedTaxEnabled, "collectedTaxEnabled");
        this.collectedTaxEnabled = Optional.ofNullable(collectedTaxEnabled);
        return this;
    }


    public NexusResponse withCollectedTaxEnabled(Optional<Boolean> collectedTaxEnabled) {
        Utils.checkNotNull(collectedTaxEnabled, "collectedTaxEnabled");
        this.collectedTaxEnabled = collectedTaxEnabled;
        return this;
    }

    public NexusResponse withPeriodModel(PeriodModelEnum periodModel) {
        Utils.checkNotNull(periodModel, "periodModel");
        this.periodModel = periodModel;
        return this;
    }

    public NexusResponse withPeriodStartDate(LocalDate periodStartDate) {
        Utils.checkNotNull(periodStartDate, "periodStartDate");
        this.periodStartDate = periodStartDate;
        return this;
    }

    public NexusResponse withPeriodEndDate(LocalDate periodEndDate) {
        Utils.checkNotNull(periodEndDate, "periodEndDate");
        this.periodEndDate = periodEndDate;
        return this;
    }

    public NexusResponse withPreviousPeriodStartDate(LocalDate previousPeriodStartDate) {
        Utils.checkNotNull(previousPeriodStartDate, "previousPeriodStartDate");
        this.previousPeriodStartDate = Optional.ofNullable(previousPeriodStartDate);
        return this;
    }


    public NexusResponse withPreviousPeriodStartDate(Optional<LocalDate> previousPeriodStartDate) {
        Utils.checkNotNull(previousPeriodStartDate, "previousPeriodStartDate");
        this.previousPeriodStartDate = previousPeriodStartDate;
        return this;
    }

    public NexusResponse withPreviousPeriodEndDate(LocalDate previousPeriodEndDate) {
        Utils.checkNotNull(previousPeriodEndDate, "previousPeriodEndDate");
        this.previousPeriodEndDate = Optional.ofNullable(previousPeriodEndDate);
        return this;
    }


    public NexusResponse withPreviousPeriodEndDate(Optional<LocalDate> previousPeriodEndDate) {
        Utils.checkNotNull(previousPeriodEndDate, "previousPeriodEndDate");
        this.previousPeriodEndDate = previousPeriodEndDate;
        return this;
    }

    public NexusResponse withEarliestTransactionDate(OffsetDateTime earliestTransactionDate) {
        Utils.checkNotNull(earliestTransactionDate, "earliestTransactionDate");
        this.earliestTransactionDate = JsonNullable.of(earliestTransactionDate);
        return this;
    }

    public NexusResponse withEarliestTransactionDate(JsonNullable<OffsetDateTime> earliestTransactionDate) {
        Utils.checkNotNull(earliestTransactionDate, "earliestTransactionDate");
        this.earliestTransactionDate = earliestTransactionDate;
        return this;
    }

    public NexusResponse withMostRecentTransactionDate(OffsetDateTime mostRecentTransactionDate) {
        Utils.checkNotNull(mostRecentTransactionDate, "mostRecentTransactionDate");
        this.mostRecentTransactionDate = JsonNullable.of(mostRecentTransactionDate);
        return this;
    }

    public NexusResponse withMostRecentTransactionDate(JsonNullable<OffsetDateTime> mostRecentTransactionDate) {
        Utils.checkNotNull(mostRecentTransactionDate, "mostRecentTransactionDate");
        this.mostRecentTransactionDate = mostRecentTransactionDate;
        return this;
    }

    public NexusResponse withEarliestCollectedDate(OffsetDateTime earliestCollectedDate) {
        Utils.checkNotNull(earliestCollectedDate, "earliestCollectedDate");
        this.earliestCollectedDate = Optional.ofNullable(earliestCollectedDate);
        return this;
    }


    public NexusResponse withEarliestCollectedDate(Optional<OffsetDateTime> earliestCollectedDate) {
        Utils.checkNotNull(earliestCollectedDate, "earliestCollectedDate");
        this.earliestCollectedDate = earliestCollectedDate;
        return this;
    }

    public NexusResponse withPredictedMonthFromToday(long predictedMonthFromToday) {
        Utils.checkNotNull(predictedMonthFromToday, "predictedMonthFromToday");
        this.predictedMonthFromToday = JsonNullable.of(predictedMonthFromToday);
        return this;
    }

    public NexusResponse withPredictedMonthFromToday(JsonNullable<Long> predictedMonthFromToday) {
        Utils.checkNotNull(predictedMonthFromToday, "predictedMonthFromToday");
        this.predictedMonthFromToday = predictedMonthFromToday;
        return this;
    }

    public NexusResponse withVdaEligible(boolean vdaEligible) {
        Utils.checkNotNull(vdaEligible, "vdaEligible");
        this.vdaEligible = JsonNullable.of(vdaEligible);
        return this;
    }

    public NexusResponse withVdaEligible(JsonNullable<Boolean> vdaEligible) {
        Utils.checkNotNull(vdaEligible, "vdaEligible");
        this.vdaEligible = vdaEligible;
        return this;
    }

    public NexusResponse withConfidenceLevel(double confidenceLevel) {
        Utils.checkNotNull(confidenceLevel, "confidenceLevel");
        this.confidenceLevel = JsonNullable.of(confidenceLevel);
        return this;
    }

    public NexusResponse withConfidenceLevel(JsonNullable<Double> confidenceLevel) {
        Utils.checkNotNull(confidenceLevel, "confidenceLevel");
        this.confidenceLevel = confidenceLevel;
        return this;
    }

    public NexusResponse withLastProcessedAt(OffsetDateTime lastProcessedAt) {
        Utils.checkNotNull(lastProcessedAt, "lastProcessedAt");
        this.lastProcessedAt = JsonNullable.of(lastProcessedAt);
        return this;
    }

    public NexusResponse withLastProcessedAt(JsonNullable<OffsetDateTime> lastProcessedAt) {
        Utils.checkNotNull(lastProcessedAt, "lastProcessedAt");
        this.lastProcessedAt = lastProcessedAt;
        return this;
    }

    public NexusResponse withLastTaxLiabilityProcessedAt(OffsetDateTime lastTaxLiabilityProcessedAt) {
        Utils.checkNotNull(lastTaxLiabilityProcessedAt, "lastTaxLiabilityProcessedAt");
        this.lastTaxLiabilityProcessedAt = JsonNullable.of(lastTaxLiabilityProcessedAt);
        return this;
    }

    public NexusResponse withLastTaxLiabilityProcessedAt(JsonNullable<OffsetDateTime> lastTaxLiabilityProcessedAt) {
        Utils.checkNotNull(lastTaxLiabilityProcessedAt, "lastTaxLiabilityProcessedAt");
        this.lastTaxLiabilityProcessedAt = lastTaxLiabilityProcessedAt;
        return this;
    }

    public NexusResponse withPeriods(List<Map<String, Object>> periods) {
        Utils.checkNotNull(periods, "periods");
        this.periods = JsonNullable.of(periods);
        return this;
    }

    public NexusResponse withPeriods(JsonNullable<? extends List<Map<String, Object>>> periods) {
        Utils.checkNotNull(periods, "periods");
        this.periods = periods;
        return this;
    }

    /**
     * Currency code for the nexus (e.g., USD, CAD).
     */
    public NexusResponse withCurrency(CurrencyEnum currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Currency code for the nexus (e.g., USD, CAD).
     */
    public NexusResponse withCurrency(JsonNullable<? extends CurrencyEnum> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public NexusResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public NexusResponse withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public NexusResponse withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public NexusResponse withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public NexusResponse withRegistration(Map<String, Object> registration) {
        Utils.checkNotNull(registration, "registration");
        this.registration = JsonNullable.of(registration);
        return this;
    }

    public NexusResponse withRegistration(JsonNullable<? extends Map<String, Object>> registration) {
        Utils.checkNotNull(registration, "registration");
        this.registration = registration;
        return this;
    }

    public NexusResponse withRegistrationRegime(RegistrationsRegimeEnum registrationRegime) {
        Utils.checkNotNull(registrationRegime, "registrationRegime");
        this.registrationRegime = JsonNullable.of(registrationRegime);
        return this;
    }

    public NexusResponse withRegistrationRegime(JsonNullable<? extends RegistrationsRegimeEnum> registrationRegime) {
        Utils.checkNotNull(registrationRegime, "registrationRegime");
        this.registrationRegime = registrationRegime;
        return this;
    }

    public NexusResponse withIsVdaEligible(boolean isVdaEligible) {
        Utils.checkNotNull(isVdaEligible, "isVdaEligible");
        this.isVdaEligible = isVdaEligible;
        return this;
    }

    public NexusResponse withNexusType(NexusTypeEnum nexusType) {
        Utils.checkNotNull(nexusType, "nexusType");
        this.nexusType = nexusType;
        return this;
    }

    public NexusResponse withTotalTransactions(long totalTransactions) {
        Utils.checkNotNull(totalTransactions, "totalTransactions");
        this.totalTransactions = totalTransactions;
        return this;
    }

    public NexusResponse withTotalTransactionsIncluded(long totalTransactionsIncluded) {
        Utils.checkNotNull(totalTransactionsIncluded, "totalTransactionsIncluded");
        this.totalTransactionsIncluded = totalTransactionsIncluded;
        return this;
    }

    public NexusResponse withTotalTransactionsExempted(long totalTransactionsExempted) {
        Utils.checkNotNull(totalTransactionsExempted, "totalTransactionsExempted");
        this.totalTransactionsExempted = totalTransactionsExempted;
        return this;
    }

    public NexusResponse withTotalTransactionsMarketplace(long totalTransactionsMarketplace) {
        Utils.checkNotNull(totalTransactionsMarketplace, "totalTransactionsMarketplace");
        this.totalTransactionsMarketplace = totalTransactionsMarketplace;
        return this;
    }

    public NexusResponse withMarketplaceIncluded(boolean marketplaceIncluded) {
        Utils.checkNotNull(marketplaceIncluded, "marketplaceIncluded");
        this.marketplaceIncluded = Optional.ofNullable(marketplaceIncluded);
        return this;
    }


    public NexusResponse withMarketplaceIncluded(Optional<Boolean> marketplaceIncluded) {
        Utils.checkNotNull(marketplaceIncluded, "marketplaceIncluded");
        this.marketplaceIncluded = marketplaceIncluded;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NexusResponse other = (NexusResponse) o;
        return 
            Utils.enhancedDeepEquals(this.processingStatus, other.processingStatus) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.stateName, other.stateName) &&
            Utils.enhancedDeepEquals(this.treatmentOfExemptTransactions, other.treatmentOfExemptTransactions) &&
            Utils.enhancedDeepEquals(this.trigger, other.trigger) &&
            Utils.enhancedDeepEquals(this.salesOrTransactions, other.salesOrTransactions) &&
            Utils.enhancedDeepEquals(this.thresholdSales, other.thresholdSales) &&
            Utils.enhancedDeepEquals(this.thresholdTransactions, other.thresholdTransactions) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.transactionCount, other.transactionCount) &&
            Utils.enhancedDeepEquals(this.transactionsAmount, other.transactionsAmount) &&
            Utils.enhancedDeepEquals(this.previousTransactionCount, other.previousTransactionCount) &&
            Utils.enhancedDeepEquals(this.previousTransactionsAmount, other.previousTransactionsAmount) &&
            Utils.enhancedDeepEquals(this.calculatedTaxLiability, other.calculatedTaxLiability) &&
            Utils.enhancedDeepEquals(this.importedTaxLiability, other.importedTaxLiability) &&
            Utils.enhancedDeepEquals(this.taxLiability, other.taxLiability) &&
            Utils.enhancedDeepEquals(this.nexusMet, other.nexusMet) &&
            Utils.enhancedDeepEquals(this.nexusMetDate, other.nexusMetDate) &&
            Utils.enhancedDeepEquals(this.economicNexusMet, other.economicNexusMet) &&
            Utils.enhancedDeepEquals(this.economicNexusMetDate, other.economicNexusMetDate) &&
            Utils.enhancedDeepEquals(this.physicalNexusMet, other.physicalNexusMet) &&
            Utils.enhancedDeepEquals(this.physicalNexusMetDate, other.physicalNexusMetDate) &&
            Utils.enhancedDeepEquals(this.collectedTaxNexusMet, other.collectedTaxNexusMet) &&
            Utils.enhancedDeepEquals(this.collectedTaxNexusMetDate, other.collectedTaxNexusMetDate) &&
            Utils.enhancedDeepEquals(this.collectedTaxEnabled, other.collectedTaxEnabled) &&
            Utils.enhancedDeepEquals(this.periodModel, other.periodModel) &&
            Utils.enhancedDeepEquals(this.periodStartDate, other.periodStartDate) &&
            Utils.enhancedDeepEquals(this.periodEndDate, other.periodEndDate) &&
            Utils.enhancedDeepEquals(this.previousPeriodStartDate, other.previousPeriodStartDate) &&
            Utils.enhancedDeepEquals(this.previousPeriodEndDate, other.previousPeriodEndDate) &&
            Utils.enhancedDeepEquals(this.earliestTransactionDate, other.earliestTransactionDate) &&
            Utils.enhancedDeepEquals(this.mostRecentTransactionDate, other.mostRecentTransactionDate) &&
            Utils.enhancedDeepEquals(this.earliestCollectedDate, other.earliestCollectedDate) &&
            Utils.enhancedDeepEquals(this.predictedMonthFromToday, other.predictedMonthFromToday) &&
            Utils.enhancedDeepEquals(this.vdaEligible, other.vdaEligible) &&
            Utils.enhancedDeepEquals(this.confidenceLevel, other.confidenceLevel) &&
            Utils.enhancedDeepEquals(this.lastProcessedAt, other.lastProcessedAt) &&
            Utils.enhancedDeepEquals(this.lastTaxLiabilityProcessedAt, other.lastTaxLiabilityProcessedAt) &&
            Utils.enhancedDeepEquals(this.periods, other.periods) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.registration, other.registration) &&
            Utils.enhancedDeepEquals(this.registrationRegime, other.registrationRegime) &&
            Utils.enhancedDeepEquals(this.isVdaEligible, other.isVdaEligible) &&
            Utils.enhancedDeepEquals(this.nexusType, other.nexusType) &&
            Utils.enhancedDeepEquals(this.totalTransactions, other.totalTransactions) &&
            Utils.enhancedDeepEquals(this.totalTransactionsIncluded, other.totalTransactionsIncluded) &&
            Utils.enhancedDeepEquals(this.totalTransactionsExempted, other.totalTransactionsExempted) &&
            Utils.enhancedDeepEquals(this.totalTransactionsMarketplace, other.totalTransactionsMarketplace) &&
            Utils.enhancedDeepEquals(this.marketplaceIncluded, other.marketplaceIncluded);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            processingStatus, status, countryCode,
            stateCode, stateName, treatmentOfExemptTransactions,
            trigger, salesOrTransactions, thresholdSales,
            thresholdTransactions, startDate, transactionCount,
            transactionsAmount, previousTransactionCount, previousTransactionsAmount,
            calculatedTaxLiability, importedTaxLiability, taxLiability,
            nexusMet, nexusMetDate, economicNexusMet,
            economicNexusMetDate, physicalNexusMet, physicalNexusMetDate,
            collectedTaxNexusMet, collectedTaxNexusMetDate, collectedTaxEnabled,
            periodModel, periodStartDate, periodEndDate,
            previousPeriodStartDate, previousPeriodEndDate, earliestTransactionDate,
            mostRecentTransactionDate, earliestCollectedDate, predictedMonthFromToday,
            vdaEligible, confidenceLevel, lastProcessedAt,
            lastTaxLiabilityProcessedAt, periods, currency,
            id, createdAt, updatedAt,
            organizationId, registration, registrationRegime,
            isVdaEligible, nexusType, totalTransactions,
            totalTransactionsIncluded, totalTransactionsExempted, totalTransactionsMarketplace,
            marketplaceIncluded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NexusResponse.class,
                "processingStatus", processingStatus,
                "status", status,
                "countryCode", countryCode,
                "stateCode", stateCode,
                "stateName", stateName,
                "treatmentOfExemptTransactions", treatmentOfExemptTransactions,
                "trigger", trigger,
                "salesOrTransactions", salesOrTransactions,
                "thresholdSales", thresholdSales,
                "thresholdTransactions", thresholdTransactions,
                "startDate", startDate,
                "transactionCount", transactionCount,
                "transactionsAmount", transactionsAmount,
                "previousTransactionCount", previousTransactionCount,
                "previousTransactionsAmount", previousTransactionsAmount,
                "calculatedTaxLiability", calculatedTaxLiability,
                "importedTaxLiability", importedTaxLiability,
                "taxLiability", taxLiability,
                "nexusMet", nexusMet,
                "nexusMetDate", nexusMetDate,
                "economicNexusMet", economicNexusMet,
                "economicNexusMetDate", economicNexusMetDate,
                "physicalNexusMet", physicalNexusMet,
                "physicalNexusMetDate", physicalNexusMetDate,
                "collectedTaxNexusMet", collectedTaxNexusMet,
                "collectedTaxNexusMetDate", collectedTaxNexusMetDate,
                "collectedTaxEnabled", collectedTaxEnabled,
                "periodModel", periodModel,
                "periodStartDate", periodStartDate,
                "periodEndDate", periodEndDate,
                "previousPeriodStartDate", previousPeriodStartDate,
                "previousPeriodEndDate", previousPeriodEndDate,
                "earliestTransactionDate", earliestTransactionDate,
                "mostRecentTransactionDate", mostRecentTransactionDate,
                "earliestCollectedDate", earliestCollectedDate,
                "predictedMonthFromToday", predictedMonthFromToday,
                "vdaEligible", vdaEligible,
                "confidenceLevel", confidenceLevel,
                "lastProcessedAt", lastProcessedAt,
                "lastTaxLiabilityProcessedAt", lastTaxLiabilityProcessedAt,
                "periods", periods,
                "currency", currency,
                "id", id,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "organizationId", organizationId,
                "registration", registration,
                "registrationRegime", registrationRegime,
                "isVdaEligible", isVdaEligible,
                "nexusType", nexusType,
                "totalTransactions", totalTransactions,
                "totalTransactionsIncluded", totalTransactionsIncluded,
                "totalTransactionsExempted", totalTransactionsExempted,
                "totalTransactionsMarketplace", totalTransactionsMarketplace,
                "marketplaceIncluded", marketplaceIncluded);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends NexusStatusEnum> processingStatus = Optional.empty();

        private Optional<? extends NexusStateEnum> status = Optional.empty();

        private CountryCodeEnum countryCode;

        private String stateCode;

        private String stateName;

        private TreatmentEnum treatmentOfExemptTransactions;

        private String trigger;

        private SalesOrTransactionsEnum salesOrTransactions;

        private Long thresholdSales;

        private Optional<Long> thresholdTransactions = Optional.empty();

        private LocalDate startDate;

        private Optional<Long> transactionCount;

        private Optional<String> transactionsAmount;

        @Deprecated
        private Optional<Long> previousTransactionCount;

        @Deprecated
        private Optional<String> previousTransactionsAmount;

        private JsonNullable<String> calculatedTaxLiability = JsonNullable.undefined();

        private JsonNullable<String> importedTaxLiability = JsonNullable.undefined();

        private Optional<String> taxLiability;

        private Optional<Boolean> nexusMet;

        private JsonNullable<LocalDate> nexusMetDate = JsonNullable.undefined();

        private Optional<Boolean> economicNexusMet;

        private JsonNullable<LocalDate> economicNexusMetDate = JsonNullable.undefined();

        private Optional<Boolean> physicalNexusMet;

        private JsonNullable<LocalDate> physicalNexusMetDate = JsonNullable.undefined();

        private JsonNullable<Boolean> collectedTaxNexusMet = JsonNullable.undefined();

        private JsonNullable<LocalDate> collectedTaxNexusMetDate = JsonNullable.undefined();

        private Optional<Boolean> collectedTaxEnabled;

        private PeriodModelEnum periodModel;

        private LocalDate periodStartDate;

        private LocalDate periodEndDate;

        private Optional<LocalDate> previousPeriodStartDate = Optional.empty();

        private Optional<LocalDate> previousPeriodEndDate = Optional.empty();

        private JsonNullable<OffsetDateTime> earliestTransactionDate = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> mostRecentTransactionDate = JsonNullable.undefined();

        private Optional<OffsetDateTime> earliestCollectedDate;

        private JsonNullable<Long> predictedMonthFromToday = JsonNullable.undefined();

        private JsonNullable<Boolean> vdaEligible = JsonNullable.undefined();

        private JsonNullable<Double> confidenceLevel = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> lastProcessedAt = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> lastTaxLiabilityProcessedAt = JsonNullable.undefined();

        private JsonNullable<? extends List<Map<String, Object>>> periods = JsonNullable.undefined();

        private JsonNullable<? extends CurrencyEnum> currency = JsonNullable.undefined();

        private String id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private String organizationId;

        private JsonNullable<? extends Map<String, Object>> registration = JsonNullable.undefined();

        private JsonNullable<? extends RegistrationsRegimeEnum> registrationRegime = JsonNullable.undefined();

        private Boolean isVdaEligible;

        private NexusTypeEnum nexusType;

        private Long totalTransactions;

        private Long totalTransactionsIncluded;

        private Long totalTransactionsExempted;

        private Long totalTransactionsMarketplace;

        private Optional<Boolean> marketplaceIncluded = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder processingStatus(NexusStatusEnum processingStatus) {
            Utils.checkNotNull(processingStatus, "processingStatus");
            this.processingStatus = Optional.ofNullable(processingStatus);
            return this;
        }

        public Builder processingStatus(Optional<? extends NexusStatusEnum> processingStatus) {
            Utils.checkNotNull(processingStatus, "processingStatus");
            this.processingStatus = processingStatus;
            return this;
        }


        public Builder status(NexusStateEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends NexusStateEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder countryCode(CountryCodeEnum countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }


        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        public Builder stateName(String stateName) {
            Utils.checkNotNull(stateName, "stateName");
            this.stateName = stateName;
            return this;
        }


        public Builder treatmentOfExemptTransactions(TreatmentEnum treatmentOfExemptTransactions) {
            Utils.checkNotNull(treatmentOfExemptTransactions, "treatmentOfExemptTransactions");
            this.treatmentOfExemptTransactions = treatmentOfExemptTransactions;
            return this;
        }


        public Builder trigger(String trigger) {
            Utils.checkNotNull(trigger, "trigger");
            this.trigger = trigger;
            return this;
        }


        public Builder salesOrTransactions(SalesOrTransactionsEnum salesOrTransactions) {
            Utils.checkNotNull(salesOrTransactions, "salesOrTransactions");
            this.salesOrTransactions = salesOrTransactions;
            return this;
        }


        public Builder thresholdSales(long thresholdSales) {
            Utils.checkNotNull(thresholdSales, "thresholdSales");
            this.thresholdSales = thresholdSales;
            return this;
        }


        public Builder thresholdTransactions(long thresholdTransactions) {
            Utils.checkNotNull(thresholdTransactions, "thresholdTransactions");
            this.thresholdTransactions = Optional.ofNullable(thresholdTransactions);
            return this;
        }

        public Builder thresholdTransactions(Optional<Long> thresholdTransactions) {
            Utils.checkNotNull(thresholdTransactions, "thresholdTransactions");
            this.thresholdTransactions = thresholdTransactions;
            return this;
        }


        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        public Builder transactionCount(long transactionCount) {
            Utils.checkNotNull(transactionCount, "transactionCount");
            this.transactionCount = Optional.ofNullable(transactionCount);
            return this;
        }

        public Builder transactionCount(Optional<Long> transactionCount) {
            Utils.checkNotNull(transactionCount, "transactionCount");
            this.transactionCount = transactionCount;
            return this;
        }


        public Builder transactionsAmount(String transactionsAmount) {
            Utils.checkNotNull(transactionsAmount, "transactionsAmount");
            this.transactionsAmount = Optional.ofNullable(transactionsAmount);
            return this;
        }

        public Builder transactionsAmount(Optional<String> transactionsAmount) {
            Utils.checkNotNull(transactionsAmount, "transactionsAmount");
            this.transactionsAmount = transactionsAmount;
            return this;
        }


        /**
         * Deprecated: transaction_count now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder previousTransactionCount(long previousTransactionCount) {
            Utils.checkNotNull(previousTransactionCount, "previousTransactionCount");
            this.previousTransactionCount = Optional.ofNullable(previousTransactionCount);
            return this;
        }

        /**
         * Deprecated: transaction_count now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder previousTransactionCount(Optional<Long> previousTransactionCount) {
            Utils.checkNotNull(previousTransactionCount, "previousTransactionCount");
            this.previousTransactionCount = previousTransactionCount;
            return this;
        }


        /**
         * Deprecated: transactions_amount now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder previousTransactionsAmount(String previousTransactionsAmount) {
            Utils.checkNotNull(previousTransactionsAmount, "previousTransactionsAmount");
            this.previousTransactionsAmount = Optional.ofNullable(previousTransactionsAmount);
            return this;
        }

        /**
         * Deprecated: transactions_amount now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder previousTransactionsAmount(Optional<String> previousTransactionsAmount) {
            Utils.checkNotNull(previousTransactionsAmount, "previousTransactionsAmount");
            this.previousTransactionsAmount = previousTransactionsAmount;
            return this;
        }


        public Builder calculatedTaxLiability(String calculatedTaxLiability) {
            Utils.checkNotNull(calculatedTaxLiability, "calculatedTaxLiability");
            this.calculatedTaxLiability = JsonNullable.of(calculatedTaxLiability);
            return this;
        }

        public Builder calculatedTaxLiability(JsonNullable<String> calculatedTaxLiability) {
            Utils.checkNotNull(calculatedTaxLiability, "calculatedTaxLiability");
            this.calculatedTaxLiability = calculatedTaxLiability;
            return this;
        }


        public Builder importedTaxLiability(String importedTaxLiability) {
            Utils.checkNotNull(importedTaxLiability, "importedTaxLiability");
            this.importedTaxLiability = JsonNullable.of(importedTaxLiability);
            return this;
        }

        public Builder importedTaxLiability(JsonNullable<String> importedTaxLiability) {
            Utils.checkNotNull(importedTaxLiability, "importedTaxLiability");
            this.importedTaxLiability = importedTaxLiability;
            return this;
        }


        public Builder taxLiability(String taxLiability) {
            Utils.checkNotNull(taxLiability, "taxLiability");
            this.taxLiability = Optional.ofNullable(taxLiability);
            return this;
        }

        public Builder taxLiability(Optional<String> taxLiability) {
            Utils.checkNotNull(taxLiability, "taxLiability");
            this.taxLiability = taxLiability;
            return this;
        }


        public Builder nexusMet(boolean nexusMet) {
            Utils.checkNotNull(nexusMet, "nexusMet");
            this.nexusMet = Optional.ofNullable(nexusMet);
            return this;
        }

        public Builder nexusMet(Optional<Boolean> nexusMet) {
            Utils.checkNotNull(nexusMet, "nexusMet");
            this.nexusMet = nexusMet;
            return this;
        }


        public Builder nexusMetDate(LocalDate nexusMetDate) {
            Utils.checkNotNull(nexusMetDate, "nexusMetDate");
            this.nexusMetDate = JsonNullable.of(nexusMetDate);
            return this;
        }

        public Builder nexusMetDate(JsonNullable<LocalDate> nexusMetDate) {
            Utils.checkNotNull(nexusMetDate, "nexusMetDate");
            this.nexusMetDate = nexusMetDate;
            return this;
        }


        public Builder economicNexusMet(boolean economicNexusMet) {
            Utils.checkNotNull(economicNexusMet, "economicNexusMet");
            this.economicNexusMet = Optional.ofNullable(economicNexusMet);
            return this;
        }

        public Builder economicNexusMet(Optional<Boolean> economicNexusMet) {
            Utils.checkNotNull(economicNexusMet, "economicNexusMet");
            this.economicNexusMet = economicNexusMet;
            return this;
        }


        public Builder economicNexusMetDate(LocalDate economicNexusMetDate) {
            Utils.checkNotNull(economicNexusMetDate, "economicNexusMetDate");
            this.economicNexusMetDate = JsonNullable.of(economicNexusMetDate);
            return this;
        }

        public Builder economicNexusMetDate(JsonNullable<LocalDate> economicNexusMetDate) {
            Utils.checkNotNull(economicNexusMetDate, "economicNexusMetDate");
            this.economicNexusMetDate = economicNexusMetDate;
            return this;
        }


        public Builder physicalNexusMet(boolean physicalNexusMet) {
            Utils.checkNotNull(physicalNexusMet, "physicalNexusMet");
            this.physicalNexusMet = Optional.ofNullable(physicalNexusMet);
            return this;
        }

        public Builder physicalNexusMet(Optional<Boolean> physicalNexusMet) {
            Utils.checkNotNull(physicalNexusMet, "physicalNexusMet");
            this.physicalNexusMet = physicalNexusMet;
            return this;
        }


        public Builder physicalNexusMetDate(LocalDate physicalNexusMetDate) {
            Utils.checkNotNull(physicalNexusMetDate, "physicalNexusMetDate");
            this.physicalNexusMetDate = JsonNullable.of(physicalNexusMetDate);
            return this;
        }

        public Builder physicalNexusMetDate(JsonNullable<LocalDate> physicalNexusMetDate) {
            Utils.checkNotNull(physicalNexusMetDate, "physicalNexusMetDate");
            this.physicalNexusMetDate = physicalNexusMetDate;
            return this;
        }


        public Builder collectedTaxNexusMet(boolean collectedTaxNexusMet) {
            Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
            this.collectedTaxNexusMet = JsonNullable.of(collectedTaxNexusMet);
            return this;
        }

        public Builder collectedTaxNexusMet(JsonNullable<Boolean> collectedTaxNexusMet) {
            Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
            this.collectedTaxNexusMet = collectedTaxNexusMet;
            return this;
        }


        public Builder collectedTaxNexusMetDate(LocalDate collectedTaxNexusMetDate) {
            Utils.checkNotNull(collectedTaxNexusMetDate, "collectedTaxNexusMetDate");
            this.collectedTaxNexusMetDate = JsonNullable.of(collectedTaxNexusMetDate);
            return this;
        }

        public Builder collectedTaxNexusMetDate(JsonNullable<LocalDate> collectedTaxNexusMetDate) {
            Utils.checkNotNull(collectedTaxNexusMetDate, "collectedTaxNexusMetDate");
            this.collectedTaxNexusMetDate = collectedTaxNexusMetDate;
            return this;
        }


        public Builder collectedTaxEnabled(boolean collectedTaxEnabled) {
            Utils.checkNotNull(collectedTaxEnabled, "collectedTaxEnabled");
            this.collectedTaxEnabled = Optional.ofNullable(collectedTaxEnabled);
            return this;
        }

        public Builder collectedTaxEnabled(Optional<Boolean> collectedTaxEnabled) {
            Utils.checkNotNull(collectedTaxEnabled, "collectedTaxEnabled");
            this.collectedTaxEnabled = collectedTaxEnabled;
            return this;
        }


        public Builder periodModel(PeriodModelEnum periodModel) {
            Utils.checkNotNull(periodModel, "periodModel");
            this.periodModel = periodModel;
            return this;
        }


        public Builder periodStartDate(LocalDate periodStartDate) {
            Utils.checkNotNull(periodStartDate, "periodStartDate");
            this.periodStartDate = periodStartDate;
            return this;
        }


        public Builder periodEndDate(LocalDate periodEndDate) {
            Utils.checkNotNull(periodEndDate, "periodEndDate");
            this.periodEndDate = periodEndDate;
            return this;
        }


        public Builder previousPeriodStartDate(LocalDate previousPeriodStartDate) {
            Utils.checkNotNull(previousPeriodStartDate, "previousPeriodStartDate");
            this.previousPeriodStartDate = Optional.ofNullable(previousPeriodStartDate);
            return this;
        }

        public Builder previousPeriodStartDate(Optional<LocalDate> previousPeriodStartDate) {
            Utils.checkNotNull(previousPeriodStartDate, "previousPeriodStartDate");
            this.previousPeriodStartDate = previousPeriodStartDate;
            return this;
        }


        public Builder previousPeriodEndDate(LocalDate previousPeriodEndDate) {
            Utils.checkNotNull(previousPeriodEndDate, "previousPeriodEndDate");
            this.previousPeriodEndDate = Optional.ofNullable(previousPeriodEndDate);
            return this;
        }

        public Builder previousPeriodEndDate(Optional<LocalDate> previousPeriodEndDate) {
            Utils.checkNotNull(previousPeriodEndDate, "previousPeriodEndDate");
            this.previousPeriodEndDate = previousPeriodEndDate;
            return this;
        }


        public Builder earliestTransactionDate(OffsetDateTime earliestTransactionDate) {
            Utils.checkNotNull(earliestTransactionDate, "earliestTransactionDate");
            this.earliestTransactionDate = JsonNullable.of(earliestTransactionDate);
            return this;
        }

        public Builder earliestTransactionDate(JsonNullable<OffsetDateTime> earliestTransactionDate) {
            Utils.checkNotNull(earliestTransactionDate, "earliestTransactionDate");
            this.earliestTransactionDate = earliestTransactionDate;
            return this;
        }


        public Builder mostRecentTransactionDate(OffsetDateTime mostRecentTransactionDate) {
            Utils.checkNotNull(mostRecentTransactionDate, "mostRecentTransactionDate");
            this.mostRecentTransactionDate = JsonNullable.of(mostRecentTransactionDate);
            return this;
        }

        public Builder mostRecentTransactionDate(JsonNullable<OffsetDateTime> mostRecentTransactionDate) {
            Utils.checkNotNull(mostRecentTransactionDate, "mostRecentTransactionDate");
            this.mostRecentTransactionDate = mostRecentTransactionDate;
            return this;
        }


        public Builder earliestCollectedDate(OffsetDateTime earliestCollectedDate) {
            Utils.checkNotNull(earliestCollectedDate, "earliestCollectedDate");
            this.earliestCollectedDate = Optional.ofNullable(earliestCollectedDate);
            return this;
        }

        public Builder earliestCollectedDate(Optional<OffsetDateTime> earliestCollectedDate) {
            Utils.checkNotNull(earliestCollectedDate, "earliestCollectedDate");
            this.earliestCollectedDate = earliestCollectedDate;
            return this;
        }


        public Builder predictedMonthFromToday(long predictedMonthFromToday) {
            Utils.checkNotNull(predictedMonthFromToday, "predictedMonthFromToday");
            this.predictedMonthFromToday = JsonNullable.of(predictedMonthFromToday);
            return this;
        }

        public Builder predictedMonthFromToday(JsonNullable<Long> predictedMonthFromToday) {
            Utils.checkNotNull(predictedMonthFromToday, "predictedMonthFromToday");
            this.predictedMonthFromToday = predictedMonthFromToday;
            return this;
        }


        public Builder vdaEligible(boolean vdaEligible) {
            Utils.checkNotNull(vdaEligible, "vdaEligible");
            this.vdaEligible = JsonNullable.of(vdaEligible);
            return this;
        }

        public Builder vdaEligible(JsonNullable<Boolean> vdaEligible) {
            Utils.checkNotNull(vdaEligible, "vdaEligible");
            this.vdaEligible = vdaEligible;
            return this;
        }


        public Builder confidenceLevel(double confidenceLevel) {
            Utils.checkNotNull(confidenceLevel, "confidenceLevel");
            this.confidenceLevel = JsonNullable.of(confidenceLevel);
            return this;
        }

        public Builder confidenceLevel(JsonNullable<Double> confidenceLevel) {
            Utils.checkNotNull(confidenceLevel, "confidenceLevel");
            this.confidenceLevel = confidenceLevel;
            return this;
        }


        public Builder lastProcessedAt(OffsetDateTime lastProcessedAt) {
            Utils.checkNotNull(lastProcessedAt, "lastProcessedAt");
            this.lastProcessedAt = JsonNullable.of(lastProcessedAt);
            return this;
        }

        public Builder lastProcessedAt(JsonNullable<OffsetDateTime> lastProcessedAt) {
            Utils.checkNotNull(lastProcessedAt, "lastProcessedAt");
            this.lastProcessedAt = lastProcessedAt;
            return this;
        }


        public Builder lastTaxLiabilityProcessedAt(OffsetDateTime lastTaxLiabilityProcessedAt) {
            Utils.checkNotNull(lastTaxLiabilityProcessedAt, "lastTaxLiabilityProcessedAt");
            this.lastTaxLiabilityProcessedAt = JsonNullable.of(lastTaxLiabilityProcessedAt);
            return this;
        }

        public Builder lastTaxLiabilityProcessedAt(JsonNullable<OffsetDateTime> lastTaxLiabilityProcessedAt) {
            Utils.checkNotNull(lastTaxLiabilityProcessedAt, "lastTaxLiabilityProcessedAt");
            this.lastTaxLiabilityProcessedAt = lastTaxLiabilityProcessedAt;
            return this;
        }


        public Builder periods(List<Map<String, Object>> periods) {
            Utils.checkNotNull(periods, "periods");
            this.periods = JsonNullable.of(periods);
            return this;
        }

        public Builder periods(JsonNullable<? extends List<Map<String, Object>>> periods) {
            Utils.checkNotNull(periods, "periods");
            this.periods = periods;
            return this;
        }


        /**
         * Currency code for the nexus (e.g., USD, CAD).
         */
        public Builder currency(CurrencyEnum currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Currency code for the nexus (e.g., USD, CAD).
         */
        public Builder currency(JsonNullable<? extends CurrencyEnum> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        public Builder registration(Map<String, Object> registration) {
            Utils.checkNotNull(registration, "registration");
            this.registration = JsonNullable.of(registration);
            return this;
        }

        public Builder registration(JsonNullable<? extends Map<String, Object>> registration) {
            Utils.checkNotNull(registration, "registration");
            this.registration = registration;
            return this;
        }


        public Builder registrationRegime(RegistrationsRegimeEnum registrationRegime) {
            Utils.checkNotNull(registrationRegime, "registrationRegime");
            this.registrationRegime = JsonNullable.of(registrationRegime);
            return this;
        }

        public Builder registrationRegime(JsonNullable<? extends RegistrationsRegimeEnum> registrationRegime) {
            Utils.checkNotNull(registrationRegime, "registrationRegime");
            this.registrationRegime = registrationRegime;
            return this;
        }


        public Builder isVdaEligible(boolean isVdaEligible) {
            Utils.checkNotNull(isVdaEligible, "isVdaEligible");
            this.isVdaEligible = isVdaEligible;
            return this;
        }


        public Builder nexusType(NexusTypeEnum nexusType) {
            Utils.checkNotNull(nexusType, "nexusType");
            this.nexusType = nexusType;
            return this;
        }


        public Builder totalTransactions(long totalTransactions) {
            Utils.checkNotNull(totalTransactions, "totalTransactions");
            this.totalTransactions = totalTransactions;
            return this;
        }


        public Builder totalTransactionsIncluded(long totalTransactionsIncluded) {
            Utils.checkNotNull(totalTransactionsIncluded, "totalTransactionsIncluded");
            this.totalTransactionsIncluded = totalTransactionsIncluded;
            return this;
        }


        public Builder totalTransactionsExempted(long totalTransactionsExempted) {
            Utils.checkNotNull(totalTransactionsExempted, "totalTransactionsExempted");
            this.totalTransactionsExempted = totalTransactionsExempted;
            return this;
        }


        public Builder totalTransactionsMarketplace(long totalTransactionsMarketplace) {
            Utils.checkNotNull(totalTransactionsMarketplace, "totalTransactionsMarketplace");
            this.totalTransactionsMarketplace = totalTransactionsMarketplace;
            return this;
        }


        public Builder marketplaceIncluded(boolean marketplaceIncluded) {
            Utils.checkNotNull(marketplaceIncluded, "marketplaceIncluded");
            this.marketplaceIncluded = Optional.ofNullable(marketplaceIncluded);
            return this;
        }

        public Builder marketplaceIncluded(Optional<Boolean> marketplaceIncluded) {
            Utils.checkNotNull(marketplaceIncluded, "marketplaceIncluded");
            this.marketplaceIncluded = marketplaceIncluded;
            return this;
        }

        public NexusResponse build() {
            if (transactionCount == null) {
                transactionCount = _SINGLETON_VALUE_TransactionCount.value();
            }
            if (transactionsAmount == null) {
                transactionsAmount = _SINGLETON_VALUE_TransactionsAmount.value();
            }
            if (previousTransactionCount == null) {
                previousTransactionCount = _SINGLETON_VALUE_PreviousTransactionCount.value();
            }
            if (previousTransactionsAmount == null) {
                previousTransactionsAmount = _SINGLETON_VALUE_PreviousTransactionsAmount.value();
            }
            if (taxLiability == null) {
                taxLiability = _SINGLETON_VALUE_TaxLiability.value();
            }
            if (nexusMet == null) {
                nexusMet = _SINGLETON_VALUE_NexusMet.value();
            }
            if (economicNexusMet == null) {
                economicNexusMet = _SINGLETON_VALUE_EconomicNexusMet.value();
            }
            if (physicalNexusMet == null) {
                physicalNexusMet = _SINGLETON_VALUE_PhysicalNexusMet.value();
            }
            if (collectedTaxEnabled == null) {
                collectedTaxEnabled = _SINGLETON_VALUE_CollectedTaxEnabled.value();
            }
            if (earliestCollectedDate == null) {
                earliestCollectedDate = _SINGLETON_VALUE_EarliestCollectedDate.value();
            }

            return new NexusResponse(
                processingStatus, status, countryCode,
                stateCode, stateName, treatmentOfExemptTransactions,
                trigger, salesOrTransactions, thresholdSales,
                thresholdTransactions, startDate, transactionCount,
                transactionsAmount, previousTransactionCount, previousTransactionsAmount,
                calculatedTaxLiability, importedTaxLiability, taxLiability,
                nexusMet, nexusMetDate, economicNexusMet,
                economicNexusMetDate, physicalNexusMet, physicalNexusMetDate,
                collectedTaxNexusMet, collectedTaxNexusMetDate, collectedTaxEnabled,
                periodModel, periodStartDate, periodEndDate,
                previousPeriodStartDate, previousPeriodEndDate, earliestTransactionDate,
                mostRecentTransactionDate, earliestCollectedDate, predictedMonthFromToday,
                vdaEligible, confidenceLevel, lastProcessedAt,
                lastTaxLiabilityProcessedAt, periods, currency,
                id, createdAt, updatedAt,
                organizationId, registration, registrationRegime,
                isVdaEligible, nexusType, totalTransactions,
                totalTransactionsIncluded, totalTransactionsExempted, totalTransactionsMarketplace,
                marketplaceIncluded);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_TransactionCount =
                new LazySingletonValue<>(
                        "transaction_count",
                        "0",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TransactionsAmount =
                new LazySingletonValue<>(
                        "transactions_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_PreviousTransactionCount =
                new LazySingletonValue<>(
                        "previous_transaction_count",
                        "0",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_PreviousTransactionsAmount =
                new LazySingletonValue<>(
                        "previous_transactions_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxLiability =
                new LazySingletonValue<>(
                        "tax_liability",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_NexusMet =
                new LazySingletonValue<>(
                        "nexus_met",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_EconomicNexusMet =
                new LazySingletonValue<>(
                        "economic_nexus_met",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_PhysicalNexusMet =
                new LazySingletonValue<>(
                        "physical_nexus_met",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_CollectedTaxEnabled =
                new LazySingletonValue<>(
                        "collected_tax_enabled",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<OffsetDateTime>> _SINGLETON_VALUE_EarliestCollectedDate =
                new LazySingletonValue<>(
                        "earliest_collected_date",
                        "\"2018-01-01T00:00:00\"",
                        new TypeReference<Optional<OffsetDateTime>>() {});
    }
}
