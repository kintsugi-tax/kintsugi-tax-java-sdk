/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ProductCreateManual {
    /**
     * A unique external identifier for the product.
     */
    @JsonProperty("external_id")
    private String externalId;

    /**
     * The name of the product.
     */
    @JsonProperty("name")
    private String name;

    /**
     * A description of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ProductStatusEnum> status;

    /**
     * The high-level category of the product.
     */
    @JsonProperty("product_category")
    private ProductCreateManualProductCategory productCategory;

    /**
     * The subcategory of the product.
     */
    @JsonProperty("product_subcategory")
    private ProductCreateManualProductSubcategory productSubcategory;

    /**
     * Specifies whether the product is tax-exempt.
     */
    @JsonProperty("tax_exempt")
    private boolean taxExempt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends SourceEnum> source;

    @JsonCreator
    public ProductCreateManual(
            @JsonProperty("external_id") String externalId,
            @JsonProperty("name") String name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("status") Optional<? extends ProductStatusEnum> status,
            @JsonProperty("product_category") ProductCreateManualProductCategory productCategory,
            @JsonProperty("product_subcategory") ProductCreateManualProductSubcategory productSubcategory,
            @JsonProperty("tax_exempt") boolean taxExempt,
            @JsonProperty("source") Optional<? extends SourceEnum> source) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(productCategory, "productCategory");
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        Utils.checkNotNull(taxExempt, "taxExempt");
        Utils.checkNotNull(source, "source");
        this.externalId = externalId;
        this.name = name;
        this.description = description;
        this.status = status;
        this.productCategory = productCategory;
        this.productSubcategory = productSubcategory;
        this.taxExempt = taxExempt;
        this.source = source;
    }
    
    public ProductCreateManual(
            String externalId,
            String name,
            ProductCreateManualProductCategory productCategory,
            ProductCreateManualProductSubcategory productSubcategory,
            boolean taxExempt) {
        this(externalId, name, JsonNullable.undefined(),
            Optional.empty(), productCategory, productSubcategory,
            taxExempt, Optional.empty());
    }

    /**
     * A unique external identifier for the product.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * The name of the product.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A description of the product.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductStatusEnum> status() {
        return (Optional<ProductStatusEnum>) status;
    }

    /**
     * The high-level category of the product.
     */
    @JsonIgnore
    public ProductCreateManualProductCategory productCategory() {
        return productCategory;
    }

    /**
     * The subcategory of the product.
     */
    @JsonIgnore
    public ProductCreateManualProductSubcategory productSubcategory() {
        return productSubcategory;
    }

    /**
     * Specifies whether the product is tax-exempt.
     */
    @JsonIgnore
    public boolean taxExempt() {
        return taxExempt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceEnum> source() {
        return (Optional<SourceEnum>) source;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique external identifier for the product.
     */
    public ProductCreateManual withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * The name of the product.
     */
    public ProductCreateManual withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A description of the product.
     */
    public ProductCreateManual withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the product.
     */
    public ProductCreateManual withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ProductCreateManual withStatus(ProductStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public ProductCreateManual withStatus(Optional<? extends ProductStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The high-level category of the product.
     */
    public ProductCreateManual withProductCategory(ProductCreateManualProductCategory productCategory) {
        Utils.checkNotNull(productCategory, "productCategory");
        this.productCategory = productCategory;
        return this;
    }

    /**
     * The subcategory of the product.
     */
    public ProductCreateManual withProductSubcategory(ProductCreateManualProductSubcategory productSubcategory) {
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        this.productSubcategory = productSubcategory;
        return this;
    }

    /**
     * Specifies whether the product is tax-exempt.
     */
    public ProductCreateManual withTaxExempt(boolean taxExempt) {
        Utils.checkNotNull(taxExempt, "taxExempt");
        this.taxExempt = taxExempt;
        return this;
    }

    public ProductCreateManual withSource(SourceEnum source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }


    public ProductCreateManual withSource(Optional<? extends SourceEnum> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductCreateManual other = (ProductCreateManual) o;
        return 
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.productCategory, other.productCategory) &&
            Utils.enhancedDeepEquals(this.productSubcategory, other.productSubcategory) &&
            Utils.enhancedDeepEquals(this.taxExempt, other.taxExempt) &&
            Utils.enhancedDeepEquals(this.source, other.source);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalId, name, description,
            status, productCategory, productSubcategory,
            taxExempt, source);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductCreateManual.class,
                "externalId", externalId,
                "name", name,
                "description", description,
                "status", status,
                "productCategory", productCategory,
                "productSubcategory", productSubcategory,
                "taxExempt", taxExempt,
                "source", source);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String externalId;

        private String name;

        private JsonNullable<String> description = JsonNullable.undefined();

        private Optional<? extends ProductStatusEnum> status = Optional.empty();

        private ProductCreateManualProductCategory productCategory;

        private ProductCreateManualProductSubcategory productSubcategory;

        private Boolean taxExempt;

        private Optional<? extends SourceEnum> source = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique external identifier for the product.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * The name of the product.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * A description of the product.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the product.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder status(ProductStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends ProductStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The high-level category of the product.
         */
        public Builder productCategory(ProductCreateManualProductCategory productCategory) {
            Utils.checkNotNull(productCategory, "productCategory");
            this.productCategory = productCategory;
            return this;
        }


        /**
         * The subcategory of the product.
         */
        public Builder productSubcategory(ProductCreateManualProductSubcategory productSubcategory) {
            Utils.checkNotNull(productSubcategory, "productSubcategory");
            this.productSubcategory = productSubcategory;
            return this;
        }


        /**
         * Specifies whether the product is tax-exempt.
         */
        public Builder taxExempt(boolean taxExempt) {
            Utils.checkNotNull(taxExempt, "taxExempt");
            this.taxExempt = taxExempt;
            return this;
        }


        public Builder source(SourceEnum source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Optional<? extends SourceEnum> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public ProductCreateManual build() {

            return new ProductCreateManual(
                externalId, name, description,
                status, productCategory, productSubcategory,
                taxExempt, source);
        }

    }
}
