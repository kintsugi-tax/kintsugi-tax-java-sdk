/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class ProductRead {

    @JsonProperty("id")
    private String id;


    @JsonProperty("external_id")
    private String externalId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("sku")
    private Optional<? extends List<String>> sku;


    @JsonProperty("code")
    private Code code;


    @JsonProperty("name")
    private String name;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonProperty("status")
    private ProductStatusEnum status;


    @JsonProperty("product_category")
    private ProductReadProductCategory productCategory;


    @JsonProperty("product_subcategory")
    private ProductReadProductSubcategory productSubcategory;


    @JsonProperty("tax_exempt")
    private boolean taxExempt;


    @JsonProperty("source")
    private SourceEnum source;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("connection_id")
    private Optional<String> connectionId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("classification_failed")
    private Optional<Boolean> classificationFailed;

    @JsonCreator
    public ProductRead(
            @JsonProperty("id") String id,
            @JsonProperty("external_id") String externalId,
            @JsonProperty("sku") Optional<? extends List<String>> sku,
            @JsonProperty("code") Code code,
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("status") ProductStatusEnum status,
            @JsonProperty("product_category") ProductReadProductCategory productCategory,
            @JsonProperty("product_subcategory") ProductReadProductSubcategory productSubcategory,
            @JsonProperty("tax_exempt") boolean taxExempt,
            @JsonProperty("source") SourceEnum source,
            @JsonProperty("connection_id") Optional<String> connectionId,
            @JsonProperty("classification_failed") Optional<Boolean> classificationFailed) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(productCategory, "productCategory");
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        Utils.checkNotNull(taxExempt, "taxExempt");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.id = id;
        this.externalId = externalId;
        this.sku = sku;
        this.code = code;
        this.name = name;
        this.description = description;
        this.status = status;
        this.productCategory = productCategory;
        this.productSubcategory = productSubcategory;
        this.taxExempt = taxExempt;
        this.source = source;
        this.connectionId = connectionId;
        this.classificationFailed = classificationFailed;
    }
    
    public ProductRead(
            String id,
            String externalId,
            Code code,
            String name,
            ProductStatusEnum status,
            ProductReadProductCategory productCategory,
            ProductReadProductSubcategory productSubcategory,
            boolean taxExempt,
            SourceEnum source) {
        this(id, externalId, Optional.empty(),
            code, name, Optional.empty(),
            status, productCategory, productSubcategory,
            taxExempt, source, Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> sku() {
        return (Optional<List<String>>) sku;
    }

    @JsonIgnore
    public Code code() {
        return code;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public ProductStatusEnum status() {
        return status;
    }

    @JsonIgnore
    public ProductReadProductCategory productCategory() {
        return productCategory;
    }

    @JsonIgnore
    public ProductReadProductSubcategory productSubcategory() {
        return productSubcategory;
    }

    @JsonIgnore
    public boolean taxExempt() {
        return taxExempt;
    }

    @JsonIgnore
    public SourceEnum source() {
        return source;
    }

    @JsonIgnore
    public Optional<String> connectionId() {
        return connectionId;
    }

    @JsonIgnore
    public Optional<Boolean> classificationFailed() {
        return classificationFailed;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ProductRead withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ProductRead withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public ProductRead withSku(List<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }


    public ProductRead withSku(Optional<? extends List<String>> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public ProductRead withCode(Code code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public ProductRead withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ProductRead withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public ProductRead withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ProductRead withStatus(ProductStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ProductRead withProductCategory(ProductReadProductCategory productCategory) {
        Utils.checkNotNull(productCategory, "productCategory");
        this.productCategory = productCategory;
        return this;
    }

    public ProductRead withProductSubcategory(ProductReadProductSubcategory productSubcategory) {
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        this.productSubcategory = productSubcategory;
        return this;
    }

    public ProductRead withTaxExempt(boolean taxExempt) {
        Utils.checkNotNull(taxExempt, "taxExempt");
        this.taxExempt = taxExempt;
        return this;
    }

    public ProductRead withSource(SourceEnum source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public ProductRead withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = Optional.ofNullable(connectionId);
        return this;
    }


    public ProductRead withConnectionId(Optional<String> connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    public ProductRead withClassificationFailed(boolean classificationFailed) {
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.classificationFailed = Optional.ofNullable(classificationFailed);
        return this;
    }


    public ProductRead withClassificationFailed(Optional<Boolean> classificationFailed) {
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.classificationFailed = classificationFailed;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductRead other = (ProductRead) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.productCategory, other.productCategory) &&
            Utils.enhancedDeepEquals(this.productSubcategory, other.productSubcategory) &&
            Utils.enhancedDeepEquals(this.taxExempt, other.taxExempt) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId) &&
            Utils.enhancedDeepEquals(this.classificationFailed, other.classificationFailed);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, externalId, sku,
            code, name, description,
            status, productCategory, productSubcategory,
            taxExempt, source, connectionId,
            classificationFailed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductRead.class,
                "id", id,
                "externalId", externalId,
                "sku", sku,
                "code", code,
                "name", name,
                "description", description,
                "status", status,
                "productCategory", productCategory,
                "productSubcategory", productSubcategory,
                "taxExempt", taxExempt,
                "source", source,
                "connectionId", connectionId,
                "classificationFailed", classificationFailed);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String externalId;

        private Optional<? extends List<String>> sku = Optional.empty();

        private Code code;

        private String name;

        private Optional<String> description = Optional.empty();

        private ProductStatusEnum status;

        private ProductReadProductCategory productCategory;

        private ProductReadProductSubcategory productSubcategory;

        private Boolean taxExempt;

        private SourceEnum source;

        private Optional<String> connectionId = Optional.empty();

        private Optional<Boolean> classificationFailed = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        public Builder sku(List<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        public Builder sku(Optional<? extends List<String>> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }


        public Builder code(Code code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder status(ProductStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder productCategory(ProductReadProductCategory productCategory) {
            Utils.checkNotNull(productCategory, "productCategory");
            this.productCategory = productCategory;
            return this;
        }


        public Builder productSubcategory(ProductReadProductSubcategory productSubcategory) {
            Utils.checkNotNull(productSubcategory, "productSubcategory");
            this.productSubcategory = productSubcategory;
            return this;
        }


        public Builder taxExempt(boolean taxExempt) {
            Utils.checkNotNull(taxExempt, "taxExempt");
            this.taxExempt = taxExempt;
            return this;
        }


        public Builder source(SourceEnum source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = Optional.ofNullable(connectionId);
            return this;
        }

        public Builder connectionId(Optional<String> connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }


        public Builder classificationFailed(boolean classificationFailed) {
            Utils.checkNotNull(classificationFailed, "classificationFailed");
            this.classificationFailed = Optional.ofNullable(classificationFailed);
            return this;
        }

        public Builder classificationFailed(Optional<Boolean> classificationFailed) {
            Utils.checkNotNull(classificationFailed, "classificationFailed");
            this.classificationFailed = classificationFailed;
            return this;
        }

        public ProductRead build() {

            return new ProductRead(
                id, externalId, sku,
                code, name, description,
                status, productCategory, productSubcategory,
                taxExempt, source, connectionId,
                classificationFailed);
        }

    }
}
