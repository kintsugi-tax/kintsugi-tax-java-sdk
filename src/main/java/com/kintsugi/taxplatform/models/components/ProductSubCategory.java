/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ProductSubCategory {
    /**
     * Name of the product subcategory
     * (e.g., ORAL_HYGIENE, MEDICAL_DEVICES, etc.)
     */
    @JsonProperty("name")
    private String name;

    /**
     * Description of the subcategory in the context of sales tax
     */
    @JsonProperty("description")
    private String description;

    /**
     * Example products or services within the subcategory
     */
    @JsonProperty("example")
    private String example;

    /**
     * Indicates if the subcategory is a frequent subcategory used by the organization. This field is
     * deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_frequent")
    private Optional<Boolean> isFrequent;

    @JsonCreator
    public ProductSubCategory(
            @JsonProperty("name") String name,
            @JsonProperty("description") String description,
            @JsonProperty("example") String example,
            @JsonProperty("is_frequent") Optional<Boolean> isFrequent) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(example, "example");
        Utils.checkNotNull(isFrequent, "isFrequent");
        this.name = name;
        this.description = description;
        this.example = example;
        this.isFrequent = isFrequent;
    }
    
    public ProductSubCategory(
            String name,
            String description,
            String example) {
        this(name, description, example,
            Optional.empty());
    }

    /**
     * Name of the product subcategory
     * (e.g., ORAL_HYGIENE, MEDICAL_DEVICES, etc.)
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Description of the subcategory in the context of sales tax
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * Example products or services within the subcategory
     */
    @JsonIgnore
    public String example() {
        return example;
    }

    /**
     * Indicates if the subcategory is a frequent subcategory used by the organization. This field is
     * deprecated.
     */
    @JsonIgnore
    public Optional<Boolean> isFrequent() {
        return isFrequent;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of the product subcategory
     * (e.g., ORAL_HYGIENE, MEDICAL_DEVICES, etc.)
     */
    public ProductSubCategory withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Description of the subcategory in the context of sales tax
     */
    public ProductSubCategory withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Example products or services within the subcategory
     */
    public ProductSubCategory withExample(String example) {
        Utils.checkNotNull(example, "example");
        this.example = example;
        return this;
    }

    /**
     * Indicates if the subcategory is a frequent subcategory used by the organization. This field is
     * deprecated.
     */
    public ProductSubCategory withIsFrequent(boolean isFrequent) {
        Utils.checkNotNull(isFrequent, "isFrequent");
        this.isFrequent = Optional.ofNullable(isFrequent);
        return this;
    }


    /**
     * Indicates if the subcategory is a frequent subcategory used by the organization. This field is
     * deprecated.
     */
    public ProductSubCategory withIsFrequent(Optional<Boolean> isFrequent) {
        Utils.checkNotNull(isFrequent, "isFrequent");
        this.isFrequent = isFrequent;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductSubCategory other = (ProductSubCategory) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.example, other.example) &&
            Utils.enhancedDeepEquals(this.isFrequent, other.isFrequent);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, example,
            isFrequent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductSubCategory.class,
                "name", name,
                "description", description,
                "example", example,
                "isFrequent", isFrequent);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private String description;

        private String example;

        private Optional<Boolean> isFrequent;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Name of the product subcategory
         * (e.g., ORAL_HYGIENE, MEDICAL_DEVICES, etc.)
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * Description of the subcategory in the context of sales tax
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Example products or services within the subcategory
         */
        public Builder example(String example) {
            Utils.checkNotNull(example, "example");
            this.example = example;
            return this;
        }


        /**
         * Indicates if the subcategory is a frequent subcategory used by the organization. This field is
         * deprecated.
         */
        public Builder isFrequent(boolean isFrequent) {
            Utils.checkNotNull(isFrequent, "isFrequent");
            this.isFrequent = Optional.ofNullable(isFrequent);
            return this;
        }

        /**
         * Indicates if the subcategory is a frequent subcategory used by the organization. This field is
         * deprecated.
         */
        public Builder isFrequent(Optional<Boolean> isFrequent) {
            Utils.checkNotNull(isFrequent, "isFrequent");
            this.isFrequent = isFrequent;
            return this;
        }

        public ProductSubCategory build() {
            if (isFrequent == null) {
                isFrequent = _SINGLETON_VALUE_IsFrequent.value();
            }

            return new ProductSubCategory(
                name, description, example,
                isFrequent);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IsFrequent =
                new LazySingletonValue<>(
                        "is_frequent",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
