/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class ProductUpdate {
    /**
     * The unique identifier of the product to be updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * External identifier provided for the product,
     * typically by the source system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private Optional<String> externalId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<? extends List<String>> sku;

    /**
     * Name of the product.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Description of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ProductStatusEnum> status;


    @JsonProperty("product_category")
    private ProductCategoryEnum productCategory;


    @JsonProperty("product_subcategory")
    private ProductSubCategoryEnum productSubcategory;

    /**
     * Indicates whether the product is tax-exempt.
     */
    @JsonProperty("tax_exempt")
    private boolean taxExempt;

    /**
     * Indicates if the product classification failed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification_failed")
    private Optional<Boolean> classificationFailed;

    @JsonCreator
    public ProductUpdate(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("external_id") Optional<String> externalId,
            @JsonProperty("sku") Optional<? extends List<String>> sku,
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("status") Optional<? extends ProductStatusEnum> status,
            @JsonProperty("product_category") ProductCategoryEnum productCategory,
            @JsonProperty("product_subcategory") ProductSubCategoryEnum productSubcategory,
            @JsonProperty("tax_exempt") boolean taxExempt,
            @JsonProperty("classification_failed") Optional<Boolean> classificationFailed) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(productCategory, "productCategory");
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        Utils.checkNotNull(taxExempt, "taxExempt");
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.id = id;
        this.externalId = externalId;
        this.sku = sku;
        this.name = name;
        this.description = description;
        this.status = status;
        this.productCategory = productCategory;
        this.productSubcategory = productSubcategory;
        this.taxExempt = taxExempt;
        this.classificationFailed = classificationFailed;
    }
    
    public ProductUpdate(
            String name,
            ProductCategoryEnum productCategory,
            ProductSubCategoryEnum productSubcategory,
            boolean taxExempt) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            name, Optional.empty(), Optional.empty(),
            productCategory, productSubcategory, taxExempt,
            Optional.empty());
    }

    /**
     * The unique identifier of the product to be updated.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * External identifier provided for the product,
     * typically by the source system.
     */
    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> sku() {
        return (Optional<List<String>>) sku;
    }

    /**
     * Name of the product.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Description of the product.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductStatusEnum> status() {
        return (Optional<ProductStatusEnum>) status;
    }

    @JsonIgnore
    public ProductCategoryEnum productCategory() {
        return productCategory;
    }

    @JsonIgnore
    public ProductSubCategoryEnum productSubcategory() {
        return productSubcategory;
    }

    /**
     * Indicates whether the product is tax-exempt.
     */
    @JsonIgnore
    public boolean taxExempt() {
        return taxExempt;
    }

    /**
     * Indicates if the product classification failed.
     */
    @JsonIgnore
    public Optional<Boolean> classificationFailed() {
        return classificationFailed;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier of the product to be updated.
     */
    public ProductUpdate withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The unique identifier of the product to be updated.
     */
    public ProductUpdate withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * External identifier provided for the product,
     * typically by the source system.
     */
    public ProductUpdate withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }


    /**
     * External identifier provided for the product,
     * typically by the source system.
     */
    public ProductUpdate withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public ProductUpdate withSku(List<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }


    public ProductUpdate withSku(Optional<? extends List<String>> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * Name of the product.
     */
    public ProductUpdate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Description of the product.
     */
    public ProductUpdate withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * Description of the product.
     */
    public ProductUpdate withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ProductUpdate withStatus(ProductStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public ProductUpdate withStatus(Optional<? extends ProductStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ProductUpdate withProductCategory(ProductCategoryEnum productCategory) {
        Utils.checkNotNull(productCategory, "productCategory");
        this.productCategory = productCategory;
        return this;
    }

    public ProductUpdate withProductSubcategory(ProductSubCategoryEnum productSubcategory) {
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        this.productSubcategory = productSubcategory;
        return this;
    }

    /**
     * Indicates whether the product is tax-exempt.
     */
    public ProductUpdate withTaxExempt(boolean taxExempt) {
        Utils.checkNotNull(taxExempt, "taxExempt");
        this.taxExempt = taxExempt;
        return this;
    }

    /**
     * Indicates if the product classification failed.
     */
    public ProductUpdate withClassificationFailed(boolean classificationFailed) {
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.classificationFailed = Optional.ofNullable(classificationFailed);
        return this;
    }


    /**
     * Indicates if the product classification failed.
     */
    public ProductUpdate withClassificationFailed(Optional<Boolean> classificationFailed) {
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.classificationFailed = classificationFailed;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductUpdate other = (ProductUpdate) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.productCategory, other.productCategory) &&
            Utils.enhancedDeepEquals(this.productSubcategory, other.productSubcategory) &&
            Utils.enhancedDeepEquals(this.taxExempt, other.taxExempt) &&
            Utils.enhancedDeepEquals(this.classificationFailed, other.classificationFailed);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, externalId, sku,
            name, description, status,
            productCategory, productSubcategory, taxExempt,
            classificationFailed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductUpdate.class,
                "id", id,
                "externalId", externalId,
                "sku", sku,
                "name", name,
                "description", description,
                "status", status,
                "productCategory", productCategory,
                "productSubcategory", productSubcategory,
                "taxExempt", taxExempt,
                "classificationFailed", classificationFailed);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Optional<? extends List<String>> sku = Optional.empty();

        private String name;

        private Optional<String> description = Optional.empty();

        private Optional<? extends ProductStatusEnum> status = Optional.empty();

        private ProductCategoryEnum productCategory;

        private ProductSubCategoryEnum productSubcategory;

        private Boolean taxExempt;

        private Optional<Boolean> classificationFailed;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier of the product to be updated.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique identifier of the product to be updated.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * External identifier provided for the product,
         * typically by the source system.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        /**
         * External identifier provided for the product,
         * typically by the source system.
         */
        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        public Builder sku(List<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        public Builder sku(Optional<? extends List<String>> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }


        /**
         * Name of the product.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * Description of the product.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the product.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder status(ProductStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends ProductStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder productCategory(ProductCategoryEnum productCategory) {
            Utils.checkNotNull(productCategory, "productCategory");
            this.productCategory = productCategory;
            return this;
        }


        public Builder productSubcategory(ProductSubCategoryEnum productSubcategory) {
            Utils.checkNotNull(productSubcategory, "productSubcategory");
            this.productSubcategory = productSubcategory;
            return this;
        }


        /**
         * Indicates whether the product is tax-exempt.
         */
        public Builder taxExempt(boolean taxExempt) {
            Utils.checkNotNull(taxExempt, "taxExempt");
            this.taxExempt = taxExempt;
            return this;
        }


        /**
         * Indicates if the product classification failed.
         */
        public Builder classificationFailed(boolean classificationFailed) {
            Utils.checkNotNull(classificationFailed, "classificationFailed");
            this.classificationFailed = Optional.ofNullable(classificationFailed);
            return this;
        }

        /**
         * Indicates if the product classification failed.
         */
        public Builder classificationFailed(Optional<Boolean> classificationFailed) {
            Utils.checkNotNull(classificationFailed, "classificationFailed");
            this.classificationFailed = classificationFailed;
            return this;
        }

        public ProductUpdate build() {
            if (classificationFailed == null) {
                classificationFailed = _SINGLETON_VALUE_ClassificationFailed.value();
            }

            return new ProductUpdate(
                id, externalId, sku,
                name, description, status,
                productCategory, productSubcategory, taxExempt,
                classificationFailed);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ClassificationFailed =
                new LazySingletonValue<>(
                        "classification_failed",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
