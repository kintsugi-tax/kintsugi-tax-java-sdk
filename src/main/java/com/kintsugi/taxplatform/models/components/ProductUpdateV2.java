/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class ProductUpdateV2 {

    @JsonProperty("name")
    private String name;


    @JsonProperty("status")
    private ProductStatusEnum status;


    @JsonProperty("product_category")
    private String productCategory;


    @JsonProperty("product_subcategory")
    private String productSubcategory;


    @JsonProperty("tax_exempt")
    private boolean taxExempt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<? extends List<String>> sku;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification_failed")
    private JsonNullable<Boolean> classificationFailed;

    @JsonCreator
    public ProductUpdateV2(
            @JsonProperty("name") String name,
            @JsonProperty("status") ProductStatusEnum status,
            @JsonProperty("product_category") String productCategory,
            @JsonProperty("product_subcategory") String productSubcategory,
            @JsonProperty("tax_exempt") boolean taxExempt,
            @JsonProperty("external_id") JsonNullable<String> externalId,
            @JsonProperty("sku") JsonNullable<? extends List<String>> sku,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("classification_failed") JsonNullable<Boolean> classificationFailed) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(productCategory, "productCategory");
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        Utils.checkNotNull(taxExempt, "taxExempt");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.name = name;
        this.status = status;
        this.productCategory = productCategory;
        this.productSubcategory = productSubcategory;
        this.taxExempt = taxExempt;
        this.externalId = externalId;
        this.sku = sku;
        this.description = description;
        this.classificationFailed = classificationFailed;
    }
    
    public ProductUpdateV2(
            String name,
            ProductStatusEnum status,
            String productCategory,
            String productSubcategory,
            boolean taxExempt) {
        this(name, status, productCategory,
            productSubcategory, taxExempt, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public ProductStatusEnum status() {
        return status;
    }

    @JsonIgnore
    public String productCategory() {
        return productCategory;
    }

    @JsonIgnore
    public String productSubcategory() {
        return productSubcategory;
    }

    @JsonIgnore
    public boolean taxExempt() {
        return taxExempt;
    }

    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> sku() {
        return (JsonNullable<List<String>>) sku;
    }

    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @JsonIgnore
    public JsonNullable<Boolean> classificationFailed() {
        return classificationFailed;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ProductUpdateV2 withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ProductUpdateV2 withStatus(ProductStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ProductUpdateV2 withProductCategory(String productCategory) {
        Utils.checkNotNull(productCategory, "productCategory");
        this.productCategory = productCategory;
        return this;
    }

    public ProductUpdateV2 withProductSubcategory(String productSubcategory) {
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        this.productSubcategory = productSubcategory;
        return this;
    }

    public ProductUpdateV2 withTaxExempt(boolean taxExempt) {
        Utils.checkNotNull(taxExempt, "taxExempt");
        this.taxExempt = taxExempt;
        return this;
    }

    public ProductUpdateV2 withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    public ProductUpdateV2 withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public ProductUpdateV2 withSku(List<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    public ProductUpdateV2 withSku(JsonNullable<? extends List<String>> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public ProductUpdateV2 withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    public ProductUpdateV2 withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ProductUpdateV2 withClassificationFailed(boolean classificationFailed) {
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.classificationFailed = JsonNullable.of(classificationFailed);
        return this;
    }

    public ProductUpdateV2 withClassificationFailed(JsonNullable<Boolean> classificationFailed) {
        Utils.checkNotNull(classificationFailed, "classificationFailed");
        this.classificationFailed = classificationFailed;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductUpdateV2 other = (ProductUpdateV2) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.productCategory, other.productCategory) &&
            Utils.enhancedDeepEquals(this.productSubcategory, other.productSubcategory) &&
            Utils.enhancedDeepEquals(this.taxExempt, other.taxExempt) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.classificationFailed, other.classificationFailed);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, status, productCategory,
            productSubcategory, taxExempt, externalId,
            sku, description, classificationFailed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductUpdateV2.class,
                "name", name,
                "status", status,
                "productCategory", productCategory,
                "productSubcategory", productSubcategory,
                "taxExempt", taxExempt,
                "externalId", externalId,
                "sku", sku,
                "description", description,
                "classificationFailed", classificationFailed);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private ProductStatusEnum status;

        private String productCategory;

        private String productSubcategory;

        private Boolean taxExempt;

        private JsonNullable<String> externalId = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> sku = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<Boolean> classificationFailed = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder status(ProductStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder productCategory(String productCategory) {
            Utils.checkNotNull(productCategory, "productCategory");
            this.productCategory = productCategory;
            return this;
        }


        public Builder productSubcategory(String productSubcategory) {
            Utils.checkNotNull(productSubcategory, "productSubcategory");
            this.productSubcategory = productSubcategory;
            return this;
        }


        public Builder taxExempt(boolean taxExempt) {
            Utils.checkNotNull(taxExempt, "taxExempt");
            this.taxExempt = taxExempt;
            return this;
        }


        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        public Builder sku(List<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        public Builder sku(JsonNullable<? extends List<String>> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder classificationFailed(boolean classificationFailed) {
            Utils.checkNotNull(classificationFailed, "classificationFailed");
            this.classificationFailed = JsonNullable.of(classificationFailed);
            return this;
        }

        public Builder classificationFailed(JsonNullable<Boolean> classificationFailed) {
            Utils.checkNotNull(classificationFailed, "classificationFailed");
            this.classificationFailed = classificationFailed;
            return this;
        }

        public ProductUpdateV2 build() {

            return new ProductUpdateV2(
                name, status, productCategory,
                productSubcategory, taxExempt, externalId,
                sku, description, classificationFailed);
        }

    }
}
