/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class RegistrationCreatePayload implements com.kintsugi.taxplatform.models.operations.CreateRegistration {
    /**
     * Specifies this is a regular jurisdiction registration import.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_import_type")
    private Optional<String> registrationImportType;

    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_date")
    private Optional<String> registrationDate;

    /**
     * Email address associated with the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_email")
    private Optional<String> registrationEmail;

    /**
     * A unique key assigned to the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_key")
    private Optional<String> registrationKey;

    /**
     * A unique key assigned for deregistration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_key")
    private Optional<String> deregistrationKey;

    /**
     * Timestamp when the registration was requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_requested")
    private Optional<String> registrationRequested;

    /**
     * Timestamp when the registration was completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_completed")
    private Optional<String> registrationCompleted;

    /**
     * Timestamp when deregistration was requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_requested")
    private Optional<String> deregistrationRequested;

    /**
     * Timestamp when the deregistration was completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_completed")
    private Optional<String> deregistrationCompleted;

    /**
     * Indicates whether the registration was completed automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_registered")
    private Optional<Boolean> autoRegistered;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrations_regime")
    private Optional<? extends RegistrationsRegimeEnum> registrationsRegime;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("change_regime_status")
    private Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus;


    @JsonProperty("country_code")
    private CountryCodeEnum countryCode;

    /**
     * The state/province code where the registration applies.
     */
    @JsonProperty("state_code")
    private String stateCode;

    /**
     * The name of the state/province.
     */
    @JsonProperty("state_name")
    private String stateName;


    @JsonProperty("filing_frequency")
    private FilingFrequencyEnum filingFrequency;

    /**
     * The number of days before the filing deadline.
     */
    @JsonProperty("filing_days")
    private long filingDays;

    /**
     * Username for accessing tax registration details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<String> username;

    /**
     * Additional comments related to the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    private Optional<String> comment;

    /**
     * The date from which filings should be created. should start (YYYY-MM-DD).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_filings_from")
    private Optional<String> createFilingsFrom;

    /**
     * Indicates whether an initial synchronization should be performed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initial_sync")
    private Optional<Boolean> initialSync;

    /**
     * The amount of fees associated with the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_fees")
    private Optional<Double> amountFees;

    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vda")
    private Optional<Boolean> vda;

    /**
     * Whether the registration was imported from another system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imported")
    private Optional<Boolean> imported;

    /**
     * The sales tax ID associated with the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_tax_id")
    private Optional<String> salesTaxId;

    /**
     * Indicates whether the registration is an SST Import.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sst_import")
    private Optional<Boolean> sstImport;

    /**
     * The plaintext password for accessing the tax registration account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_plain_text")
    private Optional<String> passwordPlainText;

    /**
     * Metadata related to the password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_metadata_plain_text")
    private Optional<String> passwordMetadataPlainText;

    @JsonCreator
    public RegistrationCreatePayload(
            @JsonProperty("registration_import_type") Optional<String> registrationImportType,
            @JsonProperty("registration_date") Optional<String> registrationDate,
            @JsonProperty("registration_email") Optional<String> registrationEmail,
            @JsonProperty("registration_key") Optional<String> registrationKey,
            @JsonProperty("deregistration_key") Optional<String> deregistrationKey,
            @JsonProperty("registration_requested") Optional<String> registrationRequested,
            @JsonProperty("registration_completed") Optional<String> registrationCompleted,
            @JsonProperty("deregistration_requested") Optional<String> deregistrationRequested,
            @JsonProperty("deregistration_completed") Optional<String> deregistrationCompleted,
            @JsonProperty("auto_registered") Optional<Boolean> autoRegistered,
            @JsonProperty("registrations_regime") Optional<? extends RegistrationsRegimeEnum> registrationsRegime,
            @JsonProperty("change_regime_status") Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus,
            @JsonProperty("country_code") CountryCodeEnum countryCode,
            @JsonProperty("state_code") String stateCode,
            @JsonProperty("state_name") String stateName,
            @JsonProperty("filing_frequency") FilingFrequencyEnum filingFrequency,
            @JsonProperty("filing_days") long filingDays,
            @JsonProperty("username") Optional<String> username,
            @JsonProperty("comment") Optional<String> comment,
            @JsonProperty("create_filings_from") Optional<String> createFilingsFrom,
            @JsonProperty("initial_sync") Optional<Boolean> initialSync,
            @JsonProperty("amount_fees") Optional<Double> amountFees,
            @JsonProperty("vda") Optional<Boolean> vda,
            @JsonProperty("imported") Optional<Boolean> imported,
            @JsonProperty("sales_tax_id") Optional<String> salesTaxId,
            @JsonProperty("sst_import") Optional<Boolean> sstImport,
            @JsonProperty("password_plain_text") Optional<String> passwordPlainText,
            @JsonProperty("password_metadata_plain_text") Optional<String> passwordMetadataPlainText) {
        Utils.checkNotNull(registrationImportType, "registrationImportType");
        Utils.checkNotNull(registrationDate, "registrationDate");
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        Utils.checkNotNull(registrationKey, "registrationKey");
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(stateName, "stateName");
        Utils.checkNotNull(filingFrequency, "filingFrequency");
        Utils.checkNotNull(filingDays, "filingDays");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(comment, "comment");
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        Utils.checkNotNull(initialSync, "initialSync");
        Utils.checkNotNull(amountFees, "amountFees");
        Utils.checkNotNull(vda, "vda");
        Utils.checkNotNull(imported, "imported");
        Utils.checkNotNull(salesTaxId, "salesTaxId");
        Utils.checkNotNull(sstImport, "sstImport");
        Utils.checkNotNull(passwordPlainText, "passwordPlainText");
        Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
        this.registrationImportType = registrationImportType;
        this.registrationDate = registrationDate;
        this.registrationEmail = registrationEmail;
        this.registrationKey = registrationKey;
        this.deregistrationKey = deregistrationKey;
        this.registrationRequested = registrationRequested;
        this.registrationCompleted = registrationCompleted;
        this.deregistrationRequested = deregistrationRequested;
        this.deregistrationCompleted = deregistrationCompleted;
        this.autoRegistered = autoRegistered;
        this.registrationsRegime = registrationsRegime;
        this.changeRegimeStatus = changeRegimeStatus;
        this.countryCode = countryCode;
        this.stateCode = stateCode;
        this.stateName = stateName;
        this.filingFrequency = filingFrequency;
        this.filingDays = filingDays;
        this.username = username;
        this.comment = comment;
        this.createFilingsFrom = createFilingsFrom;
        this.initialSync = initialSync;
        this.amountFees = amountFees;
        this.vda = vda;
        this.imported = imported;
        this.salesTaxId = salesTaxId;
        this.sstImport = sstImport;
        this.passwordPlainText = passwordPlainText;
        this.passwordMetadataPlainText = passwordMetadataPlainText;
    }
    
    public RegistrationCreatePayload(
            CountryCodeEnum countryCode,
            String stateCode,
            String stateName,
            FilingFrequencyEnum filingFrequency,
            long filingDays) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            countryCode, stateCode, stateName,
            filingFrequency, filingDays, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Specifies this is a regular jurisdiction registration import.
     */
    @JsonIgnore
    @Override
    public String registrationImportType() {
        return Utils.discriminatorToString(registrationImportType);
    }

    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    @JsonIgnore
    public Optional<String> registrationDate() {
        return registrationDate;
    }

    /**
     * Email address associated with the registration.
     */
    @JsonIgnore
    public Optional<String> registrationEmail() {
        return registrationEmail;
    }

    /**
     * A unique key assigned to the registration.
     */
    @JsonIgnore
    public Optional<String> registrationKey() {
        return registrationKey;
    }

    /**
     * A unique key assigned for deregistration.
     */
    @JsonIgnore
    public Optional<String> deregistrationKey() {
        return deregistrationKey;
    }

    /**
     * Timestamp when the registration was requested.
     */
    @JsonIgnore
    public Optional<String> registrationRequested() {
        return registrationRequested;
    }

    /**
     * Timestamp when the registration was completed.
     */
    @JsonIgnore
    public Optional<String> registrationCompleted() {
        return registrationCompleted;
    }

    /**
     * Timestamp when deregistration was requested.
     */
    @JsonIgnore
    public Optional<String> deregistrationRequested() {
        return deregistrationRequested;
    }

    /**
     * Timestamp when the deregistration was completed.
     */
    @JsonIgnore
    public Optional<String> deregistrationCompleted() {
        return deregistrationCompleted;
    }

    /**
     * Indicates whether the registration was completed automatically.
     */
    @JsonIgnore
    public Optional<Boolean> autoRegistered() {
        return autoRegistered;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RegistrationsRegimeEnum> registrationsRegime() {
        return (Optional<RegistrationsRegimeEnum>) registrationsRegime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChangeRegimeStatusEnum> changeRegimeStatus() {
        return (Optional<ChangeRegimeStatusEnum>) changeRegimeStatus;
    }

    @JsonIgnore
    public CountryCodeEnum countryCode() {
        return countryCode;
    }

    /**
     * The state/province code where the registration applies.
     */
    @JsonIgnore
    public String stateCode() {
        return stateCode;
    }

    /**
     * The name of the state/province.
     */
    @JsonIgnore
    public String stateName() {
        return stateName;
    }

    @JsonIgnore
    public FilingFrequencyEnum filingFrequency() {
        return filingFrequency;
    }

    /**
     * The number of days before the filing deadline.
     */
    @JsonIgnore
    public long filingDays() {
        return filingDays;
    }

    /**
     * Username for accessing tax registration details.
     */
    @JsonIgnore
    public Optional<String> username() {
        return username;
    }

    /**
     * Additional comments related to the registration.
     */
    @JsonIgnore
    public Optional<String> comment() {
        return comment;
    }

    /**
     * The date from which filings should be created. should start (YYYY-MM-DD).
     */
    @JsonIgnore
    public Optional<String> createFilingsFrom() {
        return createFilingsFrom;
    }

    /**
     * Indicates whether an initial synchronization should be performed.
     */
    @JsonIgnore
    public Optional<Boolean> initialSync() {
        return initialSync;
    }

    /**
     * The amount of fees associated with the registration.
     */
    @JsonIgnore
    public Optional<Double> amountFees() {
        return amountFees;
    }

    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     */
    @JsonIgnore
    public Optional<Boolean> vda() {
        return vda;
    }

    /**
     * Whether the registration was imported from another system.
     */
    @JsonIgnore
    public Optional<Boolean> imported() {
        return imported;
    }

    /**
     * The sales tax ID associated with the registration.
     */
    @JsonIgnore
    public Optional<String> salesTaxId() {
        return salesTaxId;
    }

    /**
     * Indicates whether the registration is an SST Import.
     */
    @JsonIgnore
    public Optional<Boolean> sstImport() {
        return sstImport;
    }

    /**
     * The plaintext password for accessing the tax registration account.
     */
    @JsonIgnore
    public Optional<String> passwordPlainText() {
        return passwordPlainText;
    }

    /**
     * Metadata related to the password.
     */
    @JsonIgnore
    public Optional<String> passwordMetadataPlainText() {
        return passwordMetadataPlainText;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Specifies this is a regular jurisdiction registration import.
     */
    public RegistrationCreatePayload withRegistrationImportType(String registrationImportType) {
        Utils.checkNotNull(registrationImportType, "registrationImportType");
        this.registrationImportType = Optional.ofNullable(registrationImportType);
        return this;
    }


    /**
     * Specifies this is a regular jurisdiction registration import.
     */
    public RegistrationCreatePayload withRegistrationImportType(Optional<String> registrationImportType) {
        Utils.checkNotNull(registrationImportType, "registrationImportType");
        this.registrationImportType = registrationImportType;
        return this;
    }

    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    public RegistrationCreatePayload withRegistrationDate(String registrationDate) {
        Utils.checkNotNull(registrationDate, "registrationDate");
        this.registrationDate = Optional.ofNullable(registrationDate);
        return this;
    }


    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    public RegistrationCreatePayload withRegistrationDate(Optional<String> registrationDate) {
        Utils.checkNotNull(registrationDate, "registrationDate");
        this.registrationDate = registrationDate;
        return this;
    }

    /**
     * Email address associated with the registration.
     */
    public RegistrationCreatePayload withRegistrationEmail(String registrationEmail) {
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        this.registrationEmail = Optional.ofNullable(registrationEmail);
        return this;
    }


    /**
     * Email address associated with the registration.
     */
    public RegistrationCreatePayload withRegistrationEmail(Optional<String> registrationEmail) {
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        this.registrationEmail = registrationEmail;
        return this;
    }

    /**
     * A unique key assigned to the registration.
     */
    public RegistrationCreatePayload withRegistrationKey(String registrationKey) {
        Utils.checkNotNull(registrationKey, "registrationKey");
        this.registrationKey = Optional.ofNullable(registrationKey);
        return this;
    }


    /**
     * A unique key assigned to the registration.
     */
    public RegistrationCreatePayload withRegistrationKey(Optional<String> registrationKey) {
        Utils.checkNotNull(registrationKey, "registrationKey");
        this.registrationKey = registrationKey;
        return this;
    }

    /**
     * A unique key assigned for deregistration.
     */
    public RegistrationCreatePayload withDeregistrationKey(String deregistrationKey) {
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        this.deregistrationKey = Optional.ofNullable(deregistrationKey);
        return this;
    }


    /**
     * A unique key assigned for deregistration.
     */
    public RegistrationCreatePayload withDeregistrationKey(Optional<String> deregistrationKey) {
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        this.deregistrationKey = deregistrationKey;
        return this;
    }

    /**
     * Timestamp when the registration was requested.
     */
    public RegistrationCreatePayload withRegistrationRequested(String registrationRequested) {
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        this.registrationRequested = Optional.ofNullable(registrationRequested);
        return this;
    }


    /**
     * Timestamp when the registration was requested.
     */
    public RegistrationCreatePayload withRegistrationRequested(Optional<String> registrationRequested) {
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        this.registrationRequested = registrationRequested;
        return this;
    }

    /**
     * Timestamp when the registration was completed.
     */
    public RegistrationCreatePayload withRegistrationCompleted(String registrationCompleted) {
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        this.registrationCompleted = Optional.ofNullable(registrationCompleted);
        return this;
    }


    /**
     * Timestamp when the registration was completed.
     */
    public RegistrationCreatePayload withRegistrationCompleted(Optional<String> registrationCompleted) {
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        this.registrationCompleted = registrationCompleted;
        return this;
    }

    /**
     * Timestamp when deregistration was requested.
     */
    public RegistrationCreatePayload withDeregistrationRequested(String deregistrationRequested) {
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        this.deregistrationRequested = Optional.ofNullable(deregistrationRequested);
        return this;
    }


    /**
     * Timestamp when deregistration was requested.
     */
    public RegistrationCreatePayload withDeregistrationRequested(Optional<String> deregistrationRequested) {
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        this.deregistrationRequested = deregistrationRequested;
        return this;
    }

    /**
     * Timestamp when the deregistration was completed.
     */
    public RegistrationCreatePayload withDeregistrationCompleted(String deregistrationCompleted) {
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        this.deregistrationCompleted = Optional.ofNullable(deregistrationCompleted);
        return this;
    }


    /**
     * Timestamp when the deregistration was completed.
     */
    public RegistrationCreatePayload withDeregistrationCompleted(Optional<String> deregistrationCompleted) {
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        this.deregistrationCompleted = deregistrationCompleted;
        return this;
    }

    /**
     * Indicates whether the registration was completed automatically.
     */
    public RegistrationCreatePayload withAutoRegistered(boolean autoRegistered) {
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        this.autoRegistered = Optional.ofNullable(autoRegistered);
        return this;
    }


    /**
     * Indicates whether the registration was completed automatically.
     */
    public RegistrationCreatePayload withAutoRegistered(Optional<Boolean> autoRegistered) {
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        this.autoRegistered = autoRegistered;
        return this;
    }

    public RegistrationCreatePayload withRegistrationsRegime(RegistrationsRegimeEnum registrationsRegime) {
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        this.registrationsRegime = Optional.ofNullable(registrationsRegime);
        return this;
    }


    public RegistrationCreatePayload withRegistrationsRegime(Optional<? extends RegistrationsRegimeEnum> registrationsRegime) {
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        this.registrationsRegime = registrationsRegime;
        return this;
    }

    public RegistrationCreatePayload withChangeRegimeStatus(ChangeRegimeStatusEnum changeRegimeStatus) {
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        this.changeRegimeStatus = Optional.ofNullable(changeRegimeStatus);
        return this;
    }


    public RegistrationCreatePayload withChangeRegimeStatus(Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus) {
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        this.changeRegimeStatus = changeRegimeStatus;
        return this;
    }

    public RegistrationCreatePayload withCountryCode(CountryCodeEnum countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * The state/province code where the registration applies.
     */
    public RegistrationCreatePayload withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    /**
     * The name of the state/province.
     */
    public RegistrationCreatePayload withStateName(String stateName) {
        Utils.checkNotNull(stateName, "stateName");
        this.stateName = stateName;
        return this;
    }

    public RegistrationCreatePayload withFilingFrequency(FilingFrequencyEnum filingFrequency) {
        Utils.checkNotNull(filingFrequency, "filingFrequency");
        this.filingFrequency = filingFrequency;
        return this;
    }

    /**
     * The number of days before the filing deadline.
     */
    public RegistrationCreatePayload withFilingDays(long filingDays) {
        Utils.checkNotNull(filingDays, "filingDays");
        this.filingDays = filingDays;
        return this;
    }

    /**
     * Username for accessing tax registration details.
     */
    public RegistrationCreatePayload withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }


    /**
     * Username for accessing tax registration details.
     */
    public RegistrationCreatePayload withUsername(Optional<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Additional comments related to the registration.
     */
    public RegistrationCreatePayload withComment(String comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = Optional.ofNullable(comment);
        return this;
    }


    /**
     * Additional comments related to the registration.
     */
    public RegistrationCreatePayload withComment(Optional<String> comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = comment;
        return this;
    }

    /**
     * The date from which filings should be created. should start (YYYY-MM-DD).
     */
    public RegistrationCreatePayload withCreateFilingsFrom(String createFilingsFrom) {
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        this.createFilingsFrom = Optional.ofNullable(createFilingsFrom);
        return this;
    }


    /**
     * The date from which filings should be created. should start (YYYY-MM-DD).
     */
    public RegistrationCreatePayload withCreateFilingsFrom(Optional<String> createFilingsFrom) {
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        this.createFilingsFrom = createFilingsFrom;
        return this;
    }

    /**
     * Indicates whether an initial synchronization should be performed.
     */
    public RegistrationCreatePayload withInitialSync(boolean initialSync) {
        Utils.checkNotNull(initialSync, "initialSync");
        this.initialSync = Optional.ofNullable(initialSync);
        return this;
    }


    /**
     * Indicates whether an initial synchronization should be performed.
     */
    public RegistrationCreatePayload withInitialSync(Optional<Boolean> initialSync) {
        Utils.checkNotNull(initialSync, "initialSync");
        this.initialSync = initialSync;
        return this;
    }

    /**
     * The amount of fees associated with the registration.
     */
    public RegistrationCreatePayload withAmountFees(double amountFees) {
        Utils.checkNotNull(amountFees, "amountFees");
        this.amountFees = Optional.ofNullable(amountFees);
        return this;
    }


    /**
     * The amount of fees associated with the registration.
     */
    public RegistrationCreatePayload withAmountFees(Optional<Double> amountFees) {
        Utils.checkNotNull(amountFees, "amountFees");
        this.amountFees = amountFees;
        return this;
    }

    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     */
    public RegistrationCreatePayload withVda(boolean vda) {
        Utils.checkNotNull(vda, "vda");
        this.vda = Optional.ofNullable(vda);
        return this;
    }


    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     */
    public RegistrationCreatePayload withVda(Optional<Boolean> vda) {
        Utils.checkNotNull(vda, "vda");
        this.vda = vda;
        return this;
    }

    /**
     * Whether the registration was imported from another system.
     */
    public RegistrationCreatePayload withImported(boolean imported) {
        Utils.checkNotNull(imported, "imported");
        this.imported = Optional.ofNullable(imported);
        return this;
    }


    /**
     * Whether the registration was imported from another system.
     */
    public RegistrationCreatePayload withImported(Optional<Boolean> imported) {
        Utils.checkNotNull(imported, "imported");
        this.imported = imported;
        return this;
    }

    /**
     * The sales tax ID associated with the registration.
     */
    public RegistrationCreatePayload withSalesTaxId(String salesTaxId) {
        Utils.checkNotNull(salesTaxId, "salesTaxId");
        this.salesTaxId = Optional.ofNullable(salesTaxId);
        return this;
    }


    /**
     * The sales tax ID associated with the registration.
     */
    public RegistrationCreatePayload withSalesTaxId(Optional<String> salesTaxId) {
        Utils.checkNotNull(salesTaxId, "salesTaxId");
        this.salesTaxId = salesTaxId;
        return this;
    }

    /**
     * Indicates whether the registration is an SST Import.
     */
    public RegistrationCreatePayload withSstImport(boolean sstImport) {
        Utils.checkNotNull(sstImport, "sstImport");
        this.sstImport = Optional.ofNullable(sstImport);
        return this;
    }


    /**
     * Indicates whether the registration is an SST Import.
     */
    public RegistrationCreatePayload withSstImport(Optional<Boolean> sstImport) {
        Utils.checkNotNull(sstImport, "sstImport");
        this.sstImport = sstImport;
        return this;
    }

    /**
     * The plaintext password for accessing the tax registration account.
     */
    public RegistrationCreatePayload withPasswordPlainText(String passwordPlainText) {
        Utils.checkNotNull(passwordPlainText, "passwordPlainText");
        this.passwordPlainText = Optional.ofNullable(passwordPlainText);
        return this;
    }


    /**
     * The plaintext password for accessing the tax registration account.
     */
    public RegistrationCreatePayload withPasswordPlainText(Optional<String> passwordPlainText) {
        Utils.checkNotNull(passwordPlainText, "passwordPlainText");
        this.passwordPlainText = passwordPlainText;
        return this;
    }

    /**
     * Metadata related to the password.
     */
    public RegistrationCreatePayload withPasswordMetadataPlainText(String passwordMetadataPlainText) {
        Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
        this.passwordMetadataPlainText = Optional.ofNullable(passwordMetadataPlainText);
        return this;
    }


    /**
     * Metadata related to the password.
     */
    public RegistrationCreatePayload withPasswordMetadataPlainText(Optional<String> passwordMetadataPlainText) {
        Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
        this.passwordMetadataPlainText = passwordMetadataPlainText;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RegistrationCreatePayload other = (RegistrationCreatePayload) o;
        return 
            Utils.enhancedDeepEquals(this.registrationImportType, other.registrationImportType) &&
            Utils.enhancedDeepEquals(this.registrationDate, other.registrationDate) &&
            Utils.enhancedDeepEquals(this.registrationEmail, other.registrationEmail) &&
            Utils.enhancedDeepEquals(this.registrationKey, other.registrationKey) &&
            Utils.enhancedDeepEquals(this.deregistrationKey, other.deregistrationKey) &&
            Utils.enhancedDeepEquals(this.registrationRequested, other.registrationRequested) &&
            Utils.enhancedDeepEquals(this.registrationCompleted, other.registrationCompleted) &&
            Utils.enhancedDeepEquals(this.deregistrationRequested, other.deregistrationRequested) &&
            Utils.enhancedDeepEquals(this.deregistrationCompleted, other.deregistrationCompleted) &&
            Utils.enhancedDeepEquals(this.autoRegistered, other.autoRegistered) &&
            Utils.enhancedDeepEquals(this.registrationsRegime, other.registrationsRegime) &&
            Utils.enhancedDeepEquals(this.changeRegimeStatus, other.changeRegimeStatus) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.stateName, other.stateName) &&
            Utils.enhancedDeepEquals(this.filingFrequency, other.filingFrequency) &&
            Utils.enhancedDeepEquals(this.filingDays, other.filingDays) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.comment, other.comment) &&
            Utils.enhancedDeepEquals(this.createFilingsFrom, other.createFilingsFrom) &&
            Utils.enhancedDeepEquals(this.initialSync, other.initialSync) &&
            Utils.enhancedDeepEquals(this.amountFees, other.amountFees) &&
            Utils.enhancedDeepEquals(this.vda, other.vda) &&
            Utils.enhancedDeepEquals(this.imported, other.imported) &&
            Utils.enhancedDeepEquals(this.salesTaxId, other.salesTaxId) &&
            Utils.enhancedDeepEquals(this.sstImport, other.sstImport) &&
            Utils.enhancedDeepEquals(this.passwordPlainText, other.passwordPlainText) &&
            Utils.enhancedDeepEquals(this.passwordMetadataPlainText, other.passwordMetadataPlainText);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            registrationImportType, registrationDate, registrationEmail,
            registrationKey, deregistrationKey, registrationRequested,
            registrationCompleted, deregistrationRequested, deregistrationCompleted,
            autoRegistered, registrationsRegime, changeRegimeStatus,
            countryCode, stateCode, stateName,
            filingFrequency, filingDays, username,
            comment, createFilingsFrom, initialSync,
            amountFees, vda, imported,
            salesTaxId, sstImport, passwordPlainText,
            passwordMetadataPlainText);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RegistrationCreatePayload.class,
                "registrationImportType", registrationImportType,
                "registrationDate", registrationDate,
                "registrationEmail", registrationEmail,
                "registrationKey", registrationKey,
                "deregistrationKey", deregistrationKey,
                "registrationRequested", registrationRequested,
                "registrationCompleted", registrationCompleted,
                "deregistrationRequested", deregistrationRequested,
                "deregistrationCompleted", deregistrationCompleted,
                "autoRegistered", autoRegistered,
                "registrationsRegime", registrationsRegime,
                "changeRegimeStatus", changeRegimeStatus,
                "countryCode", countryCode,
                "stateCode", stateCode,
                "stateName", stateName,
                "filingFrequency", filingFrequency,
                "filingDays", filingDays,
                "username", username,
                "comment", comment,
                "createFilingsFrom", createFilingsFrom,
                "initialSync", initialSync,
                "amountFees", amountFees,
                "vda", vda,
                "imported", imported,
                "salesTaxId", salesTaxId,
                "sstImport", sstImport,
                "passwordPlainText", passwordPlainText,
                "passwordMetadataPlainText", passwordMetadataPlainText);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> registrationImportType;

        private Optional<String> registrationDate = Optional.empty();

        private Optional<String> registrationEmail = Optional.empty();

        private Optional<String> registrationKey = Optional.empty();

        private Optional<String> deregistrationKey = Optional.empty();

        private Optional<String> registrationRequested = Optional.empty();

        private Optional<String> registrationCompleted = Optional.empty();

        private Optional<String> deregistrationRequested = Optional.empty();

        private Optional<String> deregistrationCompleted = Optional.empty();

        private Optional<Boolean> autoRegistered;

        private Optional<? extends RegistrationsRegimeEnum> registrationsRegime = Optional.empty();

        private Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus = Optional.empty();

        private CountryCodeEnum countryCode;

        private String stateCode;

        private String stateName;

        private FilingFrequencyEnum filingFrequency;

        private Long filingDays;

        private Optional<String> username = Optional.empty();

        private Optional<String> comment = Optional.empty();

        private Optional<String> createFilingsFrom = Optional.empty();

        private Optional<Boolean> initialSync;

        private Optional<Double> amountFees;

        private Optional<Boolean> vda;

        private Optional<Boolean> imported = Optional.empty();

        private Optional<String> salesTaxId = Optional.empty();

        private Optional<Boolean> sstImport;

        private Optional<String> passwordPlainText = Optional.empty();

        private Optional<String> passwordMetadataPlainText = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Specifies this is a regular jurisdiction registration import.
         */
        public Builder registrationImportType(String registrationImportType) {
            Utils.checkNotNull(registrationImportType, "registrationImportType");
            this.registrationImportType = Optional.ofNullable(registrationImportType);
            return this;
        }

        /**
         * Specifies this is a regular jurisdiction registration import.
         */
        public Builder registrationImportType(Optional<String> registrationImportType) {
            Utils.checkNotNull(registrationImportType, "registrationImportType");
            this.registrationImportType = registrationImportType;
            return this;
        }


        /**
         * The date when the registration was created. Format: YYYY-MM-DD.
         */
        public Builder registrationDate(String registrationDate) {
            Utils.checkNotNull(registrationDate, "registrationDate");
            this.registrationDate = Optional.ofNullable(registrationDate);
            return this;
        }

        /**
         * The date when the registration was created. Format: YYYY-MM-DD.
         */
        public Builder registrationDate(Optional<String> registrationDate) {
            Utils.checkNotNull(registrationDate, "registrationDate");
            this.registrationDate = registrationDate;
            return this;
        }


        /**
         * Email address associated with the registration.
         */
        public Builder registrationEmail(String registrationEmail) {
            Utils.checkNotNull(registrationEmail, "registrationEmail");
            this.registrationEmail = Optional.ofNullable(registrationEmail);
            return this;
        }

        /**
         * Email address associated with the registration.
         */
        public Builder registrationEmail(Optional<String> registrationEmail) {
            Utils.checkNotNull(registrationEmail, "registrationEmail");
            this.registrationEmail = registrationEmail;
            return this;
        }


        /**
         * A unique key assigned to the registration.
         */
        public Builder registrationKey(String registrationKey) {
            Utils.checkNotNull(registrationKey, "registrationKey");
            this.registrationKey = Optional.ofNullable(registrationKey);
            return this;
        }

        /**
         * A unique key assigned to the registration.
         */
        public Builder registrationKey(Optional<String> registrationKey) {
            Utils.checkNotNull(registrationKey, "registrationKey");
            this.registrationKey = registrationKey;
            return this;
        }


        /**
         * A unique key assigned for deregistration.
         */
        public Builder deregistrationKey(String deregistrationKey) {
            Utils.checkNotNull(deregistrationKey, "deregistrationKey");
            this.deregistrationKey = Optional.ofNullable(deregistrationKey);
            return this;
        }

        /**
         * A unique key assigned for deregistration.
         */
        public Builder deregistrationKey(Optional<String> deregistrationKey) {
            Utils.checkNotNull(deregistrationKey, "deregistrationKey");
            this.deregistrationKey = deregistrationKey;
            return this;
        }


        /**
         * Timestamp when the registration was requested.
         */
        public Builder registrationRequested(String registrationRequested) {
            Utils.checkNotNull(registrationRequested, "registrationRequested");
            this.registrationRequested = Optional.ofNullable(registrationRequested);
            return this;
        }

        /**
         * Timestamp when the registration was requested.
         */
        public Builder registrationRequested(Optional<String> registrationRequested) {
            Utils.checkNotNull(registrationRequested, "registrationRequested");
            this.registrationRequested = registrationRequested;
            return this;
        }


        /**
         * Timestamp when the registration was completed.
         */
        public Builder registrationCompleted(String registrationCompleted) {
            Utils.checkNotNull(registrationCompleted, "registrationCompleted");
            this.registrationCompleted = Optional.ofNullable(registrationCompleted);
            return this;
        }

        /**
         * Timestamp when the registration was completed.
         */
        public Builder registrationCompleted(Optional<String> registrationCompleted) {
            Utils.checkNotNull(registrationCompleted, "registrationCompleted");
            this.registrationCompleted = registrationCompleted;
            return this;
        }


        /**
         * Timestamp when deregistration was requested.
         */
        public Builder deregistrationRequested(String deregistrationRequested) {
            Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
            this.deregistrationRequested = Optional.ofNullable(deregistrationRequested);
            return this;
        }

        /**
         * Timestamp when deregistration was requested.
         */
        public Builder deregistrationRequested(Optional<String> deregistrationRequested) {
            Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
            this.deregistrationRequested = deregistrationRequested;
            return this;
        }


        /**
         * Timestamp when the deregistration was completed.
         */
        public Builder deregistrationCompleted(String deregistrationCompleted) {
            Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
            this.deregistrationCompleted = Optional.ofNullable(deregistrationCompleted);
            return this;
        }

        /**
         * Timestamp when the deregistration was completed.
         */
        public Builder deregistrationCompleted(Optional<String> deregistrationCompleted) {
            Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
            this.deregistrationCompleted = deregistrationCompleted;
            return this;
        }


        /**
         * Indicates whether the registration was completed automatically.
         */
        public Builder autoRegistered(boolean autoRegistered) {
            Utils.checkNotNull(autoRegistered, "autoRegistered");
            this.autoRegistered = Optional.ofNullable(autoRegistered);
            return this;
        }

        /**
         * Indicates whether the registration was completed automatically.
         */
        public Builder autoRegistered(Optional<Boolean> autoRegistered) {
            Utils.checkNotNull(autoRegistered, "autoRegistered");
            this.autoRegistered = autoRegistered;
            return this;
        }


        public Builder registrationsRegime(RegistrationsRegimeEnum registrationsRegime) {
            Utils.checkNotNull(registrationsRegime, "registrationsRegime");
            this.registrationsRegime = Optional.ofNullable(registrationsRegime);
            return this;
        }

        public Builder registrationsRegime(Optional<? extends RegistrationsRegimeEnum> registrationsRegime) {
            Utils.checkNotNull(registrationsRegime, "registrationsRegime");
            this.registrationsRegime = registrationsRegime;
            return this;
        }


        public Builder changeRegimeStatus(ChangeRegimeStatusEnum changeRegimeStatus) {
            Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
            this.changeRegimeStatus = Optional.ofNullable(changeRegimeStatus);
            return this;
        }

        public Builder changeRegimeStatus(Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus) {
            Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
            this.changeRegimeStatus = changeRegimeStatus;
            return this;
        }


        public Builder countryCode(CountryCodeEnum countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }


        /**
         * The state/province code where the registration applies.
         */
        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        /**
         * The name of the state/province.
         */
        public Builder stateName(String stateName) {
            Utils.checkNotNull(stateName, "stateName");
            this.stateName = stateName;
            return this;
        }


        public Builder filingFrequency(FilingFrequencyEnum filingFrequency) {
            Utils.checkNotNull(filingFrequency, "filingFrequency");
            this.filingFrequency = filingFrequency;
            return this;
        }


        /**
         * The number of days before the filing deadline.
         */
        public Builder filingDays(long filingDays) {
            Utils.checkNotNull(filingDays, "filingDays");
            this.filingDays = filingDays;
            return this;
        }


        /**
         * Username for accessing tax registration details.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        /**
         * Username for accessing tax registration details.
         */
        public Builder username(Optional<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }


        /**
         * Additional comments related to the registration.
         */
        public Builder comment(String comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = Optional.ofNullable(comment);
            return this;
        }

        /**
         * Additional comments related to the registration.
         */
        public Builder comment(Optional<String> comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = comment;
            return this;
        }


        /**
         * The date from which filings should be created. should start (YYYY-MM-DD).
         */
        public Builder createFilingsFrom(String createFilingsFrom) {
            Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
            this.createFilingsFrom = Optional.ofNullable(createFilingsFrom);
            return this;
        }

        /**
         * The date from which filings should be created. should start (YYYY-MM-DD).
         */
        public Builder createFilingsFrom(Optional<String> createFilingsFrom) {
            Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
            this.createFilingsFrom = createFilingsFrom;
            return this;
        }


        /**
         * Indicates whether an initial synchronization should be performed.
         */
        public Builder initialSync(boolean initialSync) {
            Utils.checkNotNull(initialSync, "initialSync");
            this.initialSync = Optional.ofNullable(initialSync);
            return this;
        }

        /**
         * Indicates whether an initial synchronization should be performed.
         */
        public Builder initialSync(Optional<Boolean> initialSync) {
            Utils.checkNotNull(initialSync, "initialSync");
            this.initialSync = initialSync;
            return this;
        }


        /**
         * The amount of fees associated with the registration.
         */
        public Builder amountFees(double amountFees) {
            Utils.checkNotNull(amountFees, "amountFees");
            this.amountFees = Optional.ofNullable(amountFees);
            return this;
        }

        /**
         * The amount of fees associated with the registration.
         */
        public Builder amountFees(Optional<Double> amountFees) {
            Utils.checkNotNull(amountFees, "amountFees");
            this.amountFees = amountFees;
            return this;
        }


        /**
         * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
         */
        public Builder vda(boolean vda) {
            Utils.checkNotNull(vda, "vda");
            this.vda = Optional.ofNullable(vda);
            return this;
        }

        /**
         * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
         */
        public Builder vda(Optional<Boolean> vda) {
            Utils.checkNotNull(vda, "vda");
            this.vda = vda;
            return this;
        }


        /**
         * Whether the registration was imported from another system.
         */
        public Builder imported(boolean imported) {
            Utils.checkNotNull(imported, "imported");
            this.imported = Optional.ofNullable(imported);
            return this;
        }

        /**
         * Whether the registration was imported from another system.
         */
        public Builder imported(Optional<Boolean> imported) {
            Utils.checkNotNull(imported, "imported");
            this.imported = imported;
            return this;
        }


        /**
         * The sales tax ID associated with the registration.
         */
        public Builder salesTaxId(String salesTaxId) {
            Utils.checkNotNull(salesTaxId, "salesTaxId");
            this.salesTaxId = Optional.ofNullable(salesTaxId);
            return this;
        }

        /**
         * The sales tax ID associated with the registration.
         */
        public Builder salesTaxId(Optional<String> salesTaxId) {
            Utils.checkNotNull(salesTaxId, "salesTaxId");
            this.salesTaxId = salesTaxId;
            return this;
        }


        /**
         * Indicates whether the registration is an SST Import.
         */
        public Builder sstImport(boolean sstImport) {
            Utils.checkNotNull(sstImport, "sstImport");
            this.sstImport = Optional.ofNullable(sstImport);
            return this;
        }

        /**
         * Indicates whether the registration is an SST Import.
         */
        public Builder sstImport(Optional<Boolean> sstImport) {
            Utils.checkNotNull(sstImport, "sstImport");
            this.sstImport = sstImport;
            return this;
        }


        /**
         * The plaintext password for accessing the tax registration account.
         */
        public Builder passwordPlainText(String passwordPlainText) {
            Utils.checkNotNull(passwordPlainText, "passwordPlainText");
            this.passwordPlainText = Optional.ofNullable(passwordPlainText);
            return this;
        }

        /**
         * The plaintext password for accessing the tax registration account.
         */
        public Builder passwordPlainText(Optional<String> passwordPlainText) {
            Utils.checkNotNull(passwordPlainText, "passwordPlainText");
            this.passwordPlainText = passwordPlainText;
            return this;
        }


        /**
         * Metadata related to the password.
         */
        public Builder passwordMetadataPlainText(String passwordMetadataPlainText) {
            Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
            this.passwordMetadataPlainText = Optional.ofNullable(passwordMetadataPlainText);
            return this;
        }

        /**
         * Metadata related to the password.
         */
        public Builder passwordMetadataPlainText(Optional<String> passwordMetadataPlainText) {
            Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
            this.passwordMetadataPlainText = passwordMetadataPlainText;
            return this;
        }

        public RegistrationCreatePayload build() {
            if (registrationImportType == null) {
                registrationImportType = _SINGLETON_VALUE_RegistrationImportType.value();
            }
            if (autoRegistered == null) {
                autoRegistered = _SINGLETON_VALUE_AutoRegistered.value();
            }
            if (initialSync == null) {
                initialSync = _SINGLETON_VALUE_InitialSync.value();
            }
            if (amountFees == null) {
                amountFees = _SINGLETON_VALUE_AmountFees.value();
            }
            if (vda == null) {
                vda = _SINGLETON_VALUE_Vda.value();
            }
            if (sstImport == null) {
                sstImport = _SINGLETON_VALUE_SstImport.value();
            }

            return new RegistrationCreatePayload(
                registrationImportType, registrationDate, registrationEmail,
                registrationKey, deregistrationKey, registrationRequested,
                registrationCompleted, deregistrationRequested, deregistrationCompleted,
                autoRegistered, registrationsRegime, changeRegimeStatus,
                countryCode, stateCode, stateName,
                filingFrequency, filingDays, username,
                comment, createFilingsFrom, initialSync,
                amountFees, vda, imported,
                salesTaxId, sstImport, passwordPlainText,
                passwordMetadataPlainText);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_RegistrationImportType =
                new LazySingletonValue<>(
                        "registration_import_type",
                        "\"REGULAR\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_AutoRegistered =
                new LazySingletonValue<>(
                        "auto_registered",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_InitialSync =
                new LazySingletonValue<>(
                        "initial_sync",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_AmountFees =
                new LazySingletonValue<>(
                        "amount_fees",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Vda =
                new LazySingletonValue<>(
                        "vda",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_SstImport =
                new LazySingletonValue<>(
                        "sst_import",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
