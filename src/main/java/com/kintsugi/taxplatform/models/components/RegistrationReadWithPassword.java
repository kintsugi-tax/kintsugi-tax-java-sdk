/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class RegistrationReadWithPassword {
    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_date")
    private Optional<String> registrationDate;

    /**
     * Email address associated with the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_email")
    private Optional<String> registrationEmail;

    /**
     * A unique key assigned to the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_key")
    private Optional<String> registrationKey;

    /**
     * A unique key assigned for deregistration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_key")
    private Optional<String> deregistrationKey;

    /**
     * Timestamp when the registration was requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_requested")
    private Optional<String> registrationRequested;

    /**
     * Timestamp when the registration was completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_completed")
    private Optional<String> registrationCompleted;

    /**
     * Timestamp when deregistration was requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_requested")
    private Optional<String> deregistrationRequested;

    /**
     * Timestamp when the deregistration was completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_completed")
    private Optional<String> deregistrationCompleted;

    /**
     * Indicates whether the registration was completed automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_registered")
    private Optional<Boolean> autoRegistered;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrations_regime")
    private Optional<? extends RegistrationsRegimeEnum> registrationsRegime;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("change_regime_status")
    private Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus;

    /**
     * Indicates whether third-party access is enabled for this registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("third_party_enabled")
    private Optional<Boolean> thirdPartyEnabled;

    /**
     * Indicates whether the  registration is marked as collecting in shopify
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marked_collecting")
    private Optional<Boolean> markedCollecting;


    @JsonProperty("status")
    private RegistrationStatusEnum status;


    @JsonProperty("country_code")
    private CountryCodeEnum countryCode;

    /**
     * The state/province code where the registration applies.
     */
    @JsonProperty("state_code")
    private String stateCode;

    /**
     * The name of the state/province.
     */
    @JsonProperty("state_name")
    private String stateName;


    @JsonProperty("filing_frequency")
    private FilingFrequencyEnum filingFrequency;

    /**
     * The number of days before the filing deadline.
     */
    @JsonProperty("filing_days")
    private long filingDays;

    /**
     * Username for accessing tax registration details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<String> username;

    /**
     * Additional comments related to the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    private Optional<String> comment;

    /**
     * The date from which filings should be created.
     * should start (YYYY-MM-DD).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_filings_from")
    private Optional<String> createFilingsFrom;

    /**
     * Indicates whether an initial synchronization should be performed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initial_sync")
    private Optional<Boolean> initialSync;

    /**
     * The amount of fees associated with the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_fees")
    private Optional<String> amountFees;

    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vda")
    private Optional<Boolean> vda;

    /**
     * Whether the registration was imported from another system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imported")
    private Optional<Boolean> imported;

    /**
     * The sales tax ID associated with the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_tax_id")
    private Optional<String> salesTaxId;

    /**
     * Indicates whether the registration is an SST Import.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sst_import")
    private Optional<Boolean> sstImport;

    /**
     * Type of OSS registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oss_type")
    private Optional<? extends OssTypeEnum> ossType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oss_member_state_of_identification_code")
    private Optional<? extends CountryCodeEnum> ossMemberStateOfIdentificationCode;

    /**
     * The date when the registration was marked as collecting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marked_collecting_date")
    private Optional<String> markedCollectingDate;

    /**
     * Indicates whether the registration needs to be marked as collecting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("needs_mark_as_collecting")
    private Optional<Boolean> needsMarkAsCollecting;

    /**
     * The unique identifier for the registration.
     */
    @JsonProperty("id")
    private String id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credits_total_available")
    private Optional<String> creditsTotalAvailable;

    /**
     * Encrypted password for accessing the registration,
     * if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_encrypted")
    private Optional<String> passwordEncrypted;

    /**
     * Indicates if all required credentials are present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_all_credentials")
    private Optional<Boolean> hasAllCredentials;


    @JsonProperty("registration_type")
    private RegistrationTypeEnum registrationType;

    @JsonCreator
    public RegistrationReadWithPassword(
            @JsonProperty("registration_date") Optional<String> registrationDate,
            @JsonProperty("registration_email") Optional<String> registrationEmail,
            @JsonProperty("registration_key") Optional<String> registrationKey,
            @JsonProperty("deregistration_key") Optional<String> deregistrationKey,
            @JsonProperty("registration_requested") Optional<String> registrationRequested,
            @JsonProperty("registration_completed") Optional<String> registrationCompleted,
            @JsonProperty("deregistration_requested") Optional<String> deregistrationRequested,
            @JsonProperty("deregistration_completed") Optional<String> deregistrationCompleted,
            @JsonProperty("auto_registered") Optional<Boolean> autoRegistered,
            @JsonProperty("registrations_regime") Optional<? extends RegistrationsRegimeEnum> registrationsRegime,
            @JsonProperty("change_regime_status") Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus,
            @JsonProperty("third_party_enabled") Optional<Boolean> thirdPartyEnabled,
            @JsonProperty("marked_collecting") Optional<Boolean> markedCollecting,
            @JsonProperty("status") RegistrationStatusEnum status,
            @JsonProperty("country_code") CountryCodeEnum countryCode,
            @JsonProperty("state_code") String stateCode,
            @JsonProperty("state_name") String stateName,
            @JsonProperty("filing_frequency") FilingFrequencyEnum filingFrequency,
            @JsonProperty("filing_days") long filingDays,
            @JsonProperty("username") Optional<String> username,
            @JsonProperty("comment") Optional<String> comment,
            @JsonProperty("create_filings_from") Optional<String> createFilingsFrom,
            @JsonProperty("initial_sync") Optional<Boolean> initialSync,
            @JsonProperty("amount_fees") Optional<String> amountFees,
            @JsonProperty("vda") Optional<Boolean> vda,
            @JsonProperty("imported") Optional<Boolean> imported,
            @JsonProperty("sales_tax_id") Optional<String> salesTaxId,
            @JsonProperty("sst_import") Optional<Boolean> sstImport,
            @JsonProperty("oss_type") Optional<? extends OssTypeEnum> ossType,
            @JsonProperty("oss_member_state_of_identification_code") Optional<? extends CountryCodeEnum> ossMemberStateOfIdentificationCode,
            @JsonProperty("marked_collecting_date") Optional<String> markedCollectingDate,
            @JsonProperty("needs_mark_as_collecting") Optional<Boolean> needsMarkAsCollecting,
            @JsonProperty("id") String id,
            @JsonProperty("credits_total_available") Optional<String> creditsTotalAvailable,
            @JsonProperty("password_encrypted") Optional<String> passwordEncrypted,
            @JsonProperty("has_all_credentials") Optional<Boolean> hasAllCredentials,
            @JsonProperty("registration_type") RegistrationTypeEnum registrationType) {
        Utils.checkNotNull(registrationDate, "registrationDate");
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        Utils.checkNotNull(registrationKey, "registrationKey");
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
        Utils.checkNotNull(markedCollecting, "markedCollecting");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(stateName, "stateName");
        Utils.checkNotNull(filingFrequency, "filingFrequency");
        Utils.checkNotNull(filingDays, "filingDays");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(comment, "comment");
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        Utils.checkNotNull(initialSync, "initialSync");
        Utils.checkNotNull(amountFees, "amountFees");
        Utils.checkNotNull(vda, "vda");
        Utils.checkNotNull(imported, "imported");
        Utils.checkNotNull(salesTaxId, "salesTaxId");
        Utils.checkNotNull(sstImport, "sstImport");
        Utils.checkNotNull(ossType, "ossType");
        Utils.checkNotNull(ossMemberStateOfIdentificationCode, "ossMemberStateOfIdentificationCode");
        Utils.checkNotNull(markedCollectingDate, "markedCollectingDate");
        Utils.checkNotNull(needsMarkAsCollecting, "needsMarkAsCollecting");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(creditsTotalAvailable, "creditsTotalAvailable");
        Utils.checkNotNull(passwordEncrypted, "passwordEncrypted");
        Utils.checkNotNull(hasAllCredentials, "hasAllCredentials");
        Utils.checkNotNull(registrationType, "registrationType");
        this.registrationDate = registrationDate;
        this.registrationEmail = registrationEmail;
        this.registrationKey = registrationKey;
        this.deregistrationKey = deregistrationKey;
        this.registrationRequested = registrationRequested;
        this.registrationCompleted = registrationCompleted;
        this.deregistrationRequested = deregistrationRequested;
        this.deregistrationCompleted = deregistrationCompleted;
        this.autoRegistered = autoRegistered;
        this.registrationsRegime = registrationsRegime;
        this.changeRegimeStatus = changeRegimeStatus;
        this.thirdPartyEnabled = thirdPartyEnabled;
        this.markedCollecting = markedCollecting;
        this.status = status;
        this.countryCode = countryCode;
        this.stateCode = stateCode;
        this.stateName = stateName;
        this.filingFrequency = filingFrequency;
        this.filingDays = filingDays;
        this.username = username;
        this.comment = comment;
        this.createFilingsFrom = createFilingsFrom;
        this.initialSync = initialSync;
        this.amountFees = amountFees;
        this.vda = vda;
        this.imported = imported;
        this.salesTaxId = salesTaxId;
        this.sstImport = sstImport;
        this.ossType = ossType;
        this.ossMemberStateOfIdentificationCode = ossMemberStateOfIdentificationCode;
        this.markedCollectingDate = markedCollectingDate;
        this.needsMarkAsCollecting = needsMarkAsCollecting;
        this.id = id;
        this.creditsTotalAvailable = creditsTotalAvailable;
        this.passwordEncrypted = passwordEncrypted;
        this.hasAllCredentials = hasAllCredentials;
        this.registrationType = registrationType;
    }
    
    public RegistrationReadWithPassword(
            RegistrationStatusEnum status,
            CountryCodeEnum countryCode,
            String stateCode,
            String stateName,
            FilingFrequencyEnum filingFrequency,
            long filingDays,
            String id,
            RegistrationTypeEnum registrationType) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), status, countryCode,
            stateCode, stateName, filingFrequency,
            filingDays, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), id,
            Optional.empty(), Optional.empty(), Optional.empty(),
            registrationType);
    }

    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    @JsonIgnore
    public Optional<String> registrationDate() {
        return registrationDate;
    }

    /**
     * Email address associated with the registration.
     */
    @JsonIgnore
    public Optional<String> registrationEmail() {
        return registrationEmail;
    }

    /**
     * A unique key assigned to the registration.
     */
    @JsonIgnore
    public Optional<String> registrationKey() {
        return registrationKey;
    }

    /**
     * A unique key assigned for deregistration.
     */
    @JsonIgnore
    public Optional<String> deregistrationKey() {
        return deregistrationKey;
    }

    /**
     * Timestamp when the registration was requested.
     */
    @JsonIgnore
    public Optional<String> registrationRequested() {
        return registrationRequested;
    }

    /**
     * Timestamp when the registration was completed.
     */
    @JsonIgnore
    public Optional<String> registrationCompleted() {
        return registrationCompleted;
    }

    /**
     * Timestamp when deregistration was requested.
     */
    @JsonIgnore
    public Optional<String> deregistrationRequested() {
        return deregistrationRequested;
    }

    /**
     * Timestamp when the deregistration was completed.
     */
    @JsonIgnore
    public Optional<String> deregistrationCompleted() {
        return deregistrationCompleted;
    }

    /**
     * Indicates whether the registration was completed automatically.
     */
    @JsonIgnore
    public Optional<Boolean> autoRegistered() {
        return autoRegistered;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RegistrationsRegimeEnum> registrationsRegime() {
        return (Optional<RegistrationsRegimeEnum>) registrationsRegime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChangeRegimeStatusEnum> changeRegimeStatus() {
        return (Optional<ChangeRegimeStatusEnum>) changeRegimeStatus;
    }

    /**
     * Indicates whether third-party access is enabled for this registration.
     */
    @JsonIgnore
    public Optional<Boolean> thirdPartyEnabled() {
        return thirdPartyEnabled;
    }

    /**
     * Indicates whether the  registration is marked as collecting in shopify
     */
    @JsonIgnore
    public Optional<Boolean> markedCollecting() {
        return markedCollecting;
    }

    @JsonIgnore
    public RegistrationStatusEnum status() {
        return status;
    }

    @JsonIgnore
    public CountryCodeEnum countryCode() {
        return countryCode;
    }

    /**
     * The state/province code where the registration applies.
     */
    @JsonIgnore
    public String stateCode() {
        return stateCode;
    }

    /**
     * The name of the state/province.
     */
    @JsonIgnore
    public String stateName() {
        return stateName;
    }

    @JsonIgnore
    public FilingFrequencyEnum filingFrequency() {
        return filingFrequency;
    }

    /**
     * The number of days before the filing deadline.
     */
    @JsonIgnore
    public long filingDays() {
        return filingDays;
    }

    /**
     * Username for accessing tax registration details.
     */
    @JsonIgnore
    public Optional<String> username() {
        return username;
    }

    /**
     * Additional comments related to the registration.
     */
    @JsonIgnore
    public Optional<String> comment() {
        return comment;
    }

    /**
     * The date from which filings should be created.
     * should start (YYYY-MM-DD).
     */
    @JsonIgnore
    public Optional<String> createFilingsFrom() {
        return createFilingsFrom;
    }

    /**
     * Indicates whether an initial synchronization should be performed.
     */
    @JsonIgnore
    public Optional<Boolean> initialSync() {
        return initialSync;
    }

    /**
     * The amount of fees associated with the registration.
     */
    @JsonIgnore
    public Optional<String> amountFees() {
        return amountFees;
    }

    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     */
    @JsonIgnore
    public Optional<Boolean> vda() {
        return vda;
    }

    /**
     * Whether the registration was imported from another system.
     */
    @JsonIgnore
    public Optional<Boolean> imported() {
        return imported;
    }

    /**
     * The sales tax ID associated with the registration.
     */
    @JsonIgnore
    public Optional<String> salesTaxId() {
        return salesTaxId;
    }

    /**
     * Indicates whether the registration is an SST Import.
     */
    @JsonIgnore
    public Optional<Boolean> sstImport() {
        return sstImport;
    }

    /**
     * Type of OSS registration.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OssTypeEnum> ossType() {
        return (Optional<OssTypeEnum>) ossType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountryCodeEnum> ossMemberStateOfIdentificationCode() {
        return (Optional<CountryCodeEnum>) ossMemberStateOfIdentificationCode;
    }

    /**
     * The date when the registration was marked as collecting.
     */
    @JsonIgnore
    public Optional<String> markedCollectingDate() {
        return markedCollectingDate;
    }

    /**
     * Indicates whether the registration needs to be marked as collecting.
     */
    @JsonIgnore
    public Optional<Boolean> needsMarkAsCollecting() {
        return needsMarkAsCollecting;
    }

    /**
     * The unique identifier for the registration.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> creditsTotalAvailable() {
        return creditsTotalAvailable;
    }

    /**
     * Encrypted password for accessing the registration,
     * if applicable.
     */
    @JsonIgnore
    public Optional<String> passwordEncrypted() {
        return passwordEncrypted;
    }

    /**
     * Indicates if all required credentials are present.
     */
    @JsonIgnore
    public Optional<Boolean> hasAllCredentials() {
        return hasAllCredentials;
    }

    @JsonIgnore
    public RegistrationTypeEnum registrationType() {
        return registrationType;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    public RegistrationReadWithPassword withRegistrationDate(String registrationDate) {
        Utils.checkNotNull(registrationDate, "registrationDate");
        this.registrationDate = Optional.ofNullable(registrationDate);
        return this;
    }


    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    public RegistrationReadWithPassword withRegistrationDate(Optional<String> registrationDate) {
        Utils.checkNotNull(registrationDate, "registrationDate");
        this.registrationDate = registrationDate;
        return this;
    }

    /**
     * Email address associated with the registration.
     */
    public RegistrationReadWithPassword withRegistrationEmail(String registrationEmail) {
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        this.registrationEmail = Optional.ofNullable(registrationEmail);
        return this;
    }


    /**
     * Email address associated with the registration.
     */
    public RegistrationReadWithPassword withRegistrationEmail(Optional<String> registrationEmail) {
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        this.registrationEmail = registrationEmail;
        return this;
    }

    /**
     * A unique key assigned to the registration.
     */
    public RegistrationReadWithPassword withRegistrationKey(String registrationKey) {
        Utils.checkNotNull(registrationKey, "registrationKey");
        this.registrationKey = Optional.ofNullable(registrationKey);
        return this;
    }


    /**
     * A unique key assigned to the registration.
     */
    public RegistrationReadWithPassword withRegistrationKey(Optional<String> registrationKey) {
        Utils.checkNotNull(registrationKey, "registrationKey");
        this.registrationKey = registrationKey;
        return this;
    }

    /**
     * A unique key assigned for deregistration.
     */
    public RegistrationReadWithPassword withDeregistrationKey(String deregistrationKey) {
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        this.deregistrationKey = Optional.ofNullable(deregistrationKey);
        return this;
    }


    /**
     * A unique key assigned for deregistration.
     */
    public RegistrationReadWithPassword withDeregistrationKey(Optional<String> deregistrationKey) {
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        this.deregistrationKey = deregistrationKey;
        return this;
    }

    /**
     * Timestamp when the registration was requested.
     */
    public RegistrationReadWithPassword withRegistrationRequested(String registrationRequested) {
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        this.registrationRequested = Optional.ofNullable(registrationRequested);
        return this;
    }


    /**
     * Timestamp when the registration was requested.
     */
    public RegistrationReadWithPassword withRegistrationRequested(Optional<String> registrationRequested) {
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        this.registrationRequested = registrationRequested;
        return this;
    }

    /**
     * Timestamp when the registration was completed.
     */
    public RegistrationReadWithPassword withRegistrationCompleted(String registrationCompleted) {
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        this.registrationCompleted = Optional.ofNullable(registrationCompleted);
        return this;
    }


    /**
     * Timestamp when the registration was completed.
     */
    public RegistrationReadWithPassword withRegistrationCompleted(Optional<String> registrationCompleted) {
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        this.registrationCompleted = registrationCompleted;
        return this;
    }

    /**
     * Timestamp when deregistration was requested.
     */
    public RegistrationReadWithPassword withDeregistrationRequested(String deregistrationRequested) {
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        this.deregistrationRequested = Optional.ofNullable(deregistrationRequested);
        return this;
    }


    /**
     * Timestamp when deregistration was requested.
     */
    public RegistrationReadWithPassword withDeregistrationRequested(Optional<String> deregistrationRequested) {
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        this.deregistrationRequested = deregistrationRequested;
        return this;
    }

    /**
     * Timestamp when the deregistration was completed.
     */
    public RegistrationReadWithPassword withDeregistrationCompleted(String deregistrationCompleted) {
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        this.deregistrationCompleted = Optional.ofNullable(deregistrationCompleted);
        return this;
    }


    /**
     * Timestamp when the deregistration was completed.
     */
    public RegistrationReadWithPassword withDeregistrationCompleted(Optional<String> deregistrationCompleted) {
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        this.deregistrationCompleted = deregistrationCompleted;
        return this;
    }

    /**
     * Indicates whether the registration was completed automatically.
     */
    public RegistrationReadWithPassword withAutoRegistered(boolean autoRegistered) {
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        this.autoRegistered = Optional.ofNullable(autoRegistered);
        return this;
    }


    /**
     * Indicates whether the registration was completed automatically.
     */
    public RegistrationReadWithPassword withAutoRegistered(Optional<Boolean> autoRegistered) {
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        this.autoRegistered = autoRegistered;
        return this;
    }

    public RegistrationReadWithPassword withRegistrationsRegime(RegistrationsRegimeEnum registrationsRegime) {
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        this.registrationsRegime = Optional.ofNullable(registrationsRegime);
        return this;
    }


    public RegistrationReadWithPassword withRegistrationsRegime(Optional<? extends RegistrationsRegimeEnum> registrationsRegime) {
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        this.registrationsRegime = registrationsRegime;
        return this;
    }

    public RegistrationReadWithPassword withChangeRegimeStatus(ChangeRegimeStatusEnum changeRegimeStatus) {
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        this.changeRegimeStatus = Optional.ofNullable(changeRegimeStatus);
        return this;
    }


    public RegistrationReadWithPassword withChangeRegimeStatus(Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus) {
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        this.changeRegimeStatus = changeRegimeStatus;
        return this;
    }

    /**
     * Indicates whether third-party access is enabled for this registration.
     */
    public RegistrationReadWithPassword withThirdPartyEnabled(boolean thirdPartyEnabled) {
        Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
        this.thirdPartyEnabled = Optional.ofNullable(thirdPartyEnabled);
        return this;
    }


    /**
     * Indicates whether third-party access is enabled for this registration.
     */
    public RegistrationReadWithPassword withThirdPartyEnabled(Optional<Boolean> thirdPartyEnabled) {
        Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
        this.thirdPartyEnabled = thirdPartyEnabled;
        return this;
    }

    /**
     * Indicates whether the  registration is marked as collecting in shopify
     */
    public RegistrationReadWithPassword withMarkedCollecting(boolean markedCollecting) {
        Utils.checkNotNull(markedCollecting, "markedCollecting");
        this.markedCollecting = Optional.ofNullable(markedCollecting);
        return this;
    }


    /**
     * Indicates whether the  registration is marked as collecting in shopify
     */
    public RegistrationReadWithPassword withMarkedCollecting(Optional<Boolean> markedCollecting) {
        Utils.checkNotNull(markedCollecting, "markedCollecting");
        this.markedCollecting = markedCollecting;
        return this;
    }

    public RegistrationReadWithPassword withStatus(RegistrationStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public RegistrationReadWithPassword withCountryCode(CountryCodeEnum countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * The state/province code where the registration applies.
     */
    public RegistrationReadWithPassword withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    /**
     * The name of the state/province.
     */
    public RegistrationReadWithPassword withStateName(String stateName) {
        Utils.checkNotNull(stateName, "stateName");
        this.stateName = stateName;
        return this;
    }

    public RegistrationReadWithPassword withFilingFrequency(FilingFrequencyEnum filingFrequency) {
        Utils.checkNotNull(filingFrequency, "filingFrequency");
        this.filingFrequency = filingFrequency;
        return this;
    }

    /**
     * The number of days before the filing deadline.
     */
    public RegistrationReadWithPassword withFilingDays(long filingDays) {
        Utils.checkNotNull(filingDays, "filingDays");
        this.filingDays = filingDays;
        return this;
    }

    /**
     * Username for accessing tax registration details.
     */
    public RegistrationReadWithPassword withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }


    /**
     * Username for accessing tax registration details.
     */
    public RegistrationReadWithPassword withUsername(Optional<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Additional comments related to the registration.
     */
    public RegistrationReadWithPassword withComment(String comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = Optional.ofNullable(comment);
        return this;
    }


    /**
     * Additional comments related to the registration.
     */
    public RegistrationReadWithPassword withComment(Optional<String> comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = comment;
        return this;
    }

    /**
     * The date from which filings should be created.
     * should start (YYYY-MM-DD).
     */
    public RegistrationReadWithPassword withCreateFilingsFrom(String createFilingsFrom) {
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        this.createFilingsFrom = Optional.ofNullable(createFilingsFrom);
        return this;
    }


    /**
     * The date from which filings should be created.
     * should start (YYYY-MM-DD).
     */
    public RegistrationReadWithPassword withCreateFilingsFrom(Optional<String> createFilingsFrom) {
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        this.createFilingsFrom = createFilingsFrom;
        return this;
    }

    /**
     * Indicates whether an initial synchronization should be performed.
     */
    public RegistrationReadWithPassword withInitialSync(boolean initialSync) {
        Utils.checkNotNull(initialSync, "initialSync");
        this.initialSync = Optional.ofNullable(initialSync);
        return this;
    }


    /**
     * Indicates whether an initial synchronization should be performed.
     */
    public RegistrationReadWithPassword withInitialSync(Optional<Boolean> initialSync) {
        Utils.checkNotNull(initialSync, "initialSync");
        this.initialSync = initialSync;
        return this;
    }

    /**
     * The amount of fees associated with the registration.
     */
    public RegistrationReadWithPassword withAmountFees(String amountFees) {
        Utils.checkNotNull(amountFees, "amountFees");
        this.amountFees = Optional.ofNullable(amountFees);
        return this;
    }


    /**
     * The amount of fees associated with the registration.
     */
    public RegistrationReadWithPassword withAmountFees(Optional<String> amountFees) {
        Utils.checkNotNull(amountFees, "amountFees");
        this.amountFees = amountFees;
        return this;
    }

    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     */
    public RegistrationReadWithPassword withVda(boolean vda) {
        Utils.checkNotNull(vda, "vda");
        this.vda = Optional.ofNullable(vda);
        return this;
    }


    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     */
    public RegistrationReadWithPassword withVda(Optional<Boolean> vda) {
        Utils.checkNotNull(vda, "vda");
        this.vda = vda;
        return this;
    }

    /**
     * Whether the registration was imported from another system.
     */
    public RegistrationReadWithPassword withImported(boolean imported) {
        Utils.checkNotNull(imported, "imported");
        this.imported = Optional.ofNullable(imported);
        return this;
    }


    /**
     * Whether the registration was imported from another system.
     */
    public RegistrationReadWithPassword withImported(Optional<Boolean> imported) {
        Utils.checkNotNull(imported, "imported");
        this.imported = imported;
        return this;
    }

    /**
     * The sales tax ID associated with the registration.
     */
    public RegistrationReadWithPassword withSalesTaxId(String salesTaxId) {
        Utils.checkNotNull(salesTaxId, "salesTaxId");
        this.salesTaxId = Optional.ofNullable(salesTaxId);
        return this;
    }


    /**
     * The sales tax ID associated with the registration.
     */
    public RegistrationReadWithPassword withSalesTaxId(Optional<String> salesTaxId) {
        Utils.checkNotNull(salesTaxId, "salesTaxId");
        this.salesTaxId = salesTaxId;
        return this;
    }

    /**
     * Indicates whether the registration is an SST Import.
     */
    public RegistrationReadWithPassword withSstImport(boolean sstImport) {
        Utils.checkNotNull(sstImport, "sstImport");
        this.sstImport = Optional.ofNullable(sstImport);
        return this;
    }


    /**
     * Indicates whether the registration is an SST Import.
     */
    public RegistrationReadWithPassword withSstImport(Optional<Boolean> sstImport) {
        Utils.checkNotNull(sstImport, "sstImport");
        this.sstImport = sstImport;
        return this;
    }

    /**
     * Type of OSS registration.
     */
    public RegistrationReadWithPassword withOssType(OssTypeEnum ossType) {
        Utils.checkNotNull(ossType, "ossType");
        this.ossType = Optional.ofNullable(ossType);
        return this;
    }


    /**
     * Type of OSS registration.
     */
    public RegistrationReadWithPassword withOssType(Optional<? extends OssTypeEnum> ossType) {
        Utils.checkNotNull(ossType, "ossType");
        this.ossType = ossType;
        return this;
    }

    public RegistrationReadWithPassword withOssMemberStateOfIdentificationCode(CountryCodeEnum ossMemberStateOfIdentificationCode) {
        Utils.checkNotNull(ossMemberStateOfIdentificationCode, "ossMemberStateOfIdentificationCode");
        this.ossMemberStateOfIdentificationCode = Optional.ofNullable(ossMemberStateOfIdentificationCode);
        return this;
    }


    public RegistrationReadWithPassword withOssMemberStateOfIdentificationCode(Optional<? extends CountryCodeEnum> ossMemberStateOfIdentificationCode) {
        Utils.checkNotNull(ossMemberStateOfIdentificationCode, "ossMemberStateOfIdentificationCode");
        this.ossMemberStateOfIdentificationCode = ossMemberStateOfIdentificationCode;
        return this;
    }

    /**
     * The date when the registration was marked as collecting.
     */
    public RegistrationReadWithPassword withMarkedCollectingDate(String markedCollectingDate) {
        Utils.checkNotNull(markedCollectingDate, "markedCollectingDate");
        this.markedCollectingDate = Optional.ofNullable(markedCollectingDate);
        return this;
    }


    /**
     * The date when the registration was marked as collecting.
     */
    public RegistrationReadWithPassword withMarkedCollectingDate(Optional<String> markedCollectingDate) {
        Utils.checkNotNull(markedCollectingDate, "markedCollectingDate");
        this.markedCollectingDate = markedCollectingDate;
        return this;
    }

    /**
     * Indicates whether the registration needs to be marked as collecting.
     */
    public RegistrationReadWithPassword withNeedsMarkAsCollecting(boolean needsMarkAsCollecting) {
        Utils.checkNotNull(needsMarkAsCollecting, "needsMarkAsCollecting");
        this.needsMarkAsCollecting = Optional.ofNullable(needsMarkAsCollecting);
        return this;
    }


    /**
     * Indicates whether the registration needs to be marked as collecting.
     */
    public RegistrationReadWithPassword withNeedsMarkAsCollecting(Optional<Boolean> needsMarkAsCollecting) {
        Utils.checkNotNull(needsMarkAsCollecting, "needsMarkAsCollecting");
        this.needsMarkAsCollecting = needsMarkAsCollecting;
        return this;
    }

    /**
     * The unique identifier for the registration.
     */
    public RegistrationReadWithPassword withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public RegistrationReadWithPassword withCreditsTotalAvailable(String creditsTotalAvailable) {
        Utils.checkNotNull(creditsTotalAvailable, "creditsTotalAvailable");
        this.creditsTotalAvailable = Optional.ofNullable(creditsTotalAvailable);
        return this;
    }


    public RegistrationReadWithPassword withCreditsTotalAvailable(Optional<String> creditsTotalAvailable) {
        Utils.checkNotNull(creditsTotalAvailable, "creditsTotalAvailable");
        this.creditsTotalAvailable = creditsTotalAvailable;
        return this;
    }

    /**
     * Encrypted password for accessing the registration,
     * if applicable.
     */
    public RegistrationReadWithPassword withPasswordEncrypted(String passwordEncrypted) {
        Utils.checkNotNull(passwordEncrypted, "passwordEncrypted");
        this.passwordEncrypted = Optional.ofNullable(passwordEncrypted);
        return this;
    }


    /**
     * Encrypted password for accessing the registration,
     * if applicable.
     */
    public RegistrationReadWithPassword withPasswordEncrypted(Optional<String> passwordEncrypted) {
        Utils.checkNotNull(passwordEncrypted, "passwordEncrypted");
        this.passwordEncrypted = passwordEncrypted;
        return this;
    }

    /**
     * Indicates if all required credentials are present.
     */
    public RegistrationReadWithPassword withHasAllCredentials(boolean hasAllCredentials) {
        Utils.checkNotNull(hasAllCredentials, "hasAllCredentials");
        this.hasAllCredentials = Optional.ofNullable(hasAllCredentials);
        return this;
    }


    /**
     * Indicates if all required credentials are present.
     */
    public RegistrationReadWithPassword withHasAllCredentials(Optional<Boolean> hasAllCredentials) {
        Utils.checkNotNull(hasAllCredentials, "hasAllCredentials");
        this.hasAllCredentials = hasAllCredentials;
        return this;
    }

    public RegistrationReadWithPassword withRegistrationType(RegistrationTypeEnum registrationType) {
        Utils.checkNotNull(registrationType, "registrationType");
        this.registrationType = registrationType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RegistrationReadWithPassword other = (RegistrationReadWithPassword) o;
        return 
            Utils.enhancedDeepEquals(this.registrationDate, other.registrationDate) &&
            Utils.enhancedDeepEquals(this.registrationEmail, other.registrationEmail) &&
            Utils.enhancedDeepEquals(this.registrationKey, other.registrationKey) &&
            Utils.enhancedDeepEquals(this.deregistrationKey, other.deregistrationKey) &&
            Utils.enhancedDeepEquals(this.registrationRequested, other.registrationRequested) &&
            Utils.enhancedDeepEquals(this.registrationCompleted, other.registrationCompleted) &&
            Utils.enhancedDeepEquals(this.deregistrationRequested, other.deregistrationRequested) &&
            Utils.enhancedDeepEquals(this.deregistrationCompleted, other.deregistrationCompleted) &&
            Utils.enhancedDeepEquals(this.autoRegistered, other.autoRegistered) &&
            Utils.enhancedDeepEquals(this.registrationsRegime, other.registrationsRegime) &&
            Utils.enhancedDeepEquals(this.changeRegimeStatus, other.changeRegimeStatus) &&
            Utils.enhancedDeepEquals(this.thirdPartyEnabled, other.thirdPartyEnabled) &&
            Utils.enhancedDeepEquals(this.markedCollecting, other.markedCollecting) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.stateName, other.stateName) &&
            Utils.enhancedDeepEquals(this.filingFrequency, other.filingFrequency) &&
            Utils.enhancedDeepEquals(this.filingDays, other.filingDays) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.comment, other.comment) &&
            Utils.enhancedDeepEquals(this.createFilingsFrom, other.createFilingsFrom) &&
            Utils.enhancedDeepEquals(this.initialSync, other.initialSync) &&
            Utils.enhancedDeepEquals(this.amountFees, other.amountFees) &&
            Utils.enhancedDeepEquals(this.vda, other.vda) &&
            Utils.enhancedDeepEquals(this.imported, other.imported) &&
            Utils.enhancedDeepEquals(this.salesTaxId, other.salesTaxId) &&
            Utils.enhancedDeepEquals(this.sstImport, other.sstImport) &&
            Utils.enhancedDeepEquals(this.ossType, other.ossType) &&
            Utils.enhancedDeepEquals(this.ossMemberStateOfIdentificationCode, other.ossMemberStateOfIdentificationCode) &&
            Utils.enhancedDeepEquals(this.markedCollectingDate, other.markedCollectingDate) &&
            Utils.enhancedDeepEquals(this.needsMarkAsCollecting, other.needsMarkAsCollecting) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.creditsTotalAvailable, other.creditsTotalAvailable) &&
            Utils.enhancedDeepEquals(this.passwordEncrypted, other.passwordEncrypted) &&
            Utils.enhancedDeepEquals(this.hasAllCredentials, other.hasAllCredentials) &&
            Utils.enhancedDeepEquals(this.registrationType, other.registrationType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            registrationDate, registrationEmail, registrationKey,
            deregistrationKey, registrationRequested, registrationCompleted,
            deregistrationRequested, deregistrationCompleted, autoRegistered,
            registrationsRegime, changeRegimeStatus, thirdPartyEnabled,
            markedCollecting, status, countryCode,
            stateCode, stateName, filingFrequency,
            filingDays, username, comment,
            createFilingsFrom, initialSync, amountFees,
            vda, imported, salesTaxId,
            sstImport, ossType, ossMemberStateOfIdentificationCode,
            markedCollectingDate, needsMarkAsCollecting, id,
            creditsTotalAvailable, passwordEncrypted, hasAllCredentials,
            registrationType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RegistrationReadWithPassword.class,
                "registrationDate", registrationDate,
                "registrationEmail", registrationEmail,
                "registrationKey", registrationKey,
                "deregistrationKey", deregistrationKey,
                "registrationRequested", registrationRequested,
                "registrationCompleted", registrationCompleted,
                "deregistrationRequested", deregistrationRequested,
                "deregistrationCompleted", deregistrationCompleted,
                "autoRegistered", autoRegistered,
                "registrationsRegime", registrationsRegime,
                "changeRegimeStatus", changeRegimeStatus,
                "thirdPartyEnabled", thirdPartyEnabled,
                "markedCollecting", markedCollecting,
                "status", status,
                "countryCode", countryCode,
                "stateCode", stateCode,
                "stateName", stateName,
                "filingFrequency", filingFrequency,
                "filingDays", filingDays,
                "username", username,
                "comment", comment,
                "createFilingsFrom", createFilingsFrom,
                "initialSync", initialSync,
                "amountFees", amountFees,
                "vda", vda,
                "imported", imported,
                "salesTaxId", salesTaxId,
                "sstImport", sstImport,
                "ossType", ossType,
                "ossMemberStateOfIdentificationCode", ossMemberStateOfIdentificationCode,
                "markedCollectingDate", markedCollectingDate,
                "needsMarkAsCollecting", needsMarkAsCollecting,
                "id", id,
                "creditsTotalAvailable", creditsTotalAvailable,
                "passwordEncrypted", passwordEncrypted,
                "hasAllCredentials", hasAllCredentials,
                "registrationType", registrationType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> registrationDate = Optional.empty();

        private Optional<String> registrationEmail = Optional.empty();

        private Optional<String> registrationKey = Optional.empty();

        private Optional<String> deregistrationKey = Optional.empty();

        private Optional<String> registrationRequested = Optional.empty();

        private Optional<String> registrationCompleted = Optional.empty();

        private Optional<String> deregistrationRequested = Optional.empty();

        private Optional<String> deregistrationCompleted = Optional.empty();

        private Optional<Boolean> autoRegistered;

        private Optional<? extends RegistrationsRegimeEnum> registrationsRegime = Optional.empty();

        private Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus = Optional.empty();

        private Optional<Boolean> thirdPartyEnabled;

        private Optional<Boolean> markedCollecting = Optional.empty();

        private RegistrationStatusEnum status;

        private CountryCodeEnum countryCode;

        private String stateCode;

        private String stateName;

        private FilingFrequencyEnum filingFrequency;

        private Long filingDays;

        private Optional<String> username = Optional.empty();

        private Optional<String> comment = Optional.empty();

        private Optional<String> createFilingsFrom = Optional.empty();

        private Optional<Boolean> initialSync;

        private Optional<String> amountFees;

        private Optional<Boolean> vda;

        private Optional<Boolean> imported = Optional.empty();

        private Optional<String> salesTaxId = Optional.empty();

        private Optional<Boolean> sstImport;

        private Optional<? extends OssTypeEnum> ossType = Optional.empty();

        private Optional<? extends CountryCodeEnum> ossMemberStateOfIdentificationCode = Optional.empty();

        private Optional<String> markedCollectingDate = Optional.empty();

        private Optional<Boolean> needsMarkAsCollecting;

        private String id;

        private Optional<String> creditsTotalAvailable;

        private Optional<String> passwordEncrypted = Optional.empty();

        private Optional<Boolean> hasAllCredentials;

        private RegistrationTypeEnum registrationType;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The date when the registration was created. Format: YYYY-MM-DD.
         */
        public Builder registrationDate(String registrationDate) {
            Utils.checkNotNull(registrationDate, "registrationDate");
            this.registrationDate = Optional.ofNullable(registrationDate);
            return this;
        }

        /**
         * The date when the registration was created. Format: YYYY-MM-DD.
         */
        public Builder registrationDate(Optional<String> registrationDate) {
            Utils.checkNotNull(registrationDate, "registrationDate");
            this.registrationDate = registrationDate;
            return this;
        }


        /**
         * Email address associated with the registration.
         */
        public Builder registrationEmail(String registrationEmail) {
            Utils.checkNotNull(registrationEmail, "registrationEmail");
            this.registrationEmail = Optional.ofNullable(registrationEmail);
            return this;
        }

        /**
         * Email address associated with the registration.
         */
        public Builder registrationEmail(Optional<String> registrationEmail) {
            Utils.checkNotNull(registrationEmail, "registrationEmail");
            this.registrationEmail = registrationEmail;
            return this;
        }


        /**
         * A unique key assigned to the registration.
         */
        public Builder registrationKey(String registrationKey) {
            Utils.checkNotNull(registrationKey, "registrationKey");
            this.registrationKey = Optional.ofNullable(registrationKey);
            return this;
        }

        /**
         * A unique key assigned to the registration.
         */
        public Builder registrationKey(Optional<String> registrationKey) {
            Utils.checkNotNull(registrationKey, "registrationKey");
            this.registrationKey = registrationKey;
            return this;
        }


        /**
         * A unique key assigned for deregistration.
         */
        public Builder deregistrationKey(String deregistrationKey) {
            Utils.checkNotNull(deregistrationKey, "deregistrationKey");
            this.deregistrationKey = Optional.ofNullable(deregistrationKey);
            return this;
        }

        /**
         * A unique key assigned for deregistration.
         */
        public Builder deregistrationKey(Optional<String> deregistrationKey) {
            Utils.checkNotNull(deregistrationKey, "deregistrationKey");
            this.deregistrationKey = deregistrationKey;
            return this;
        }


        /**
         * Timestamp when the registration was requested.
         */
        public Builder registrationRequested(String registrationRequested) {
            Utils.checkNotNull(registrationRequested, "registrationRequested");
            this.registrationRequested = Optional.ofNullable(registrationRequested);
            return this;
        }

        /**
         * Timestamp when the registration was requested.
         */
        public Builder registrationRequested(Optional<String> registrationRequested) {
            Utils.checkNotNull(registrationRequested, "registrationRequested");
            this.registrationRequested = registrationRequested;
            return this;
        }


        /**
         * Timestamp when the registration was completed.
         */
        public Builder registrationCompleted(String registrationCompleted) {
            Utils.checkNotNull(registrationCompleted, "registrationCompleted");
            this.registrationCompleted = Optional.ofNullable(registrationCompleted);
            return this;
        }

        /**
         * Timestamp when the registration was completed.
         */
        public Builder registrationCompleted(Optional<String> registrationCompleted) {
            Utils.checkNotNull(registrationCompleted, "registrationCompleted");
            this.registrationCompleted = registrationCompleted;
            return this;
        }


        /**
         * Timestamp when deregistration was requested.
         */
        public Builder deregistrationRequested(String deregistrationRequested) {
            Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
            this.deregistrationRequested = Optional.ofNullable(deregistrationRequested);
            return this;
        }

        /**
         * Timestamp when deregistration was requested.
         */
        public Builder deregistrationRequested(Optional<String> deregistrationRequested) {
            Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
            this.deregistrationRequested = deregistrationRequested;
            return this;
        }


        /**
         * Timestamp when the deregistration was completed.
         */
        public Builder deregistrationCompleted(String deregistrationCompleted) {
            Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
            this.deregistrationCompleted = Optional.ofNullable(deregistrationCompleted);
            return this;
        }

        /**
         * Timestamp when the deregistration was completed.
         */
        public Builder deregistrationCompleted(Optional<String> deregistrationCompleted) {
            Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
            this.deregistrationCompleted = deregistrationCompleted;
            return this;
        }


        /**
         * Indicates whether the registration was completed automatically.
         */
        public Builder autoRegistered(boolean autoRegistered) {
            Utils.checkNotNull(autoRegistered, "autoRegistered");
            this.autoRegistered = Optional.ofNullable(autoRegistered);
            return this;
        }

        /**
         * Indicates whether the registration was completed automatically.
         */
        public Builder autoRegistered(Optional<Boolean> autoRegistered) {
            Utils.checkNotNull(autoRegistered, "autoRegistered");
            this.autoRegistered = autoRegistered;
            return this;
        }


        public Builder registrationsRegime(RegistrationsRegimeEnum registrationsRegime) {
            Utils.checkNotNull(registrationsRegime, "registrationsRegime");
            this.registrationsRegime = Optional.ofNullable(registrationsRegime);
            return this;
        }

        public Builder registrationsRegime(Optional<? extends RegistrationsRegimeEnum> registrationsRegime) {
            Utils.checkNotNull(registrationsRegime, "registrationsRegime");
            this.registrationsRegime = registrationsRegime;
            return this;
        }


        public Builder changeRegimeStatus(ChangeRegimeStatusEnum changeRegimeStatus) {
            Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
            this.changeRegimeStatus = Optional.ofNullable(changeRegimeStatus);
            return this;
        }

        public Builder changeRegimeStatus(Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus) {
            Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
            this.changeRegimeStatus = changeRegimeStatus;
            return this;
        }


        /**
         * Indicates whether third-party access is enabled for this registration.
         */
        public Builder thirdPartyEnabled(boolean thirdPartyEnabled) {
            Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
            this.thirdPartyEnabled = Optional.ofNullable(thirdPartyEnabled);
            return this;
        }

        /**
         * Indicates whether third-party access is enabled for this registration.
         */
        public Builder thirdPartyEnabled(Optional<Boolean> thirdPartyEnabled) {
            Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
            this.thirdPartyEnabled = thirdPartyEnabled;
            return this;
        }


        /**
         * Indicates whether the  registration is marked as collecting in shopify
         */
        public Builder markedCollecting(boolean markedCollecting) {
            Utils.checkNotNull(markedCollecting, "markedCollecting");
            this.markedCollecting = Optional.ofNullable(markedCollecting);
            return this;
        }

        /**
         * Indicates whether the  registration is marked as collecting in shopify
         */
        public Builder markedCollecting(Optional<Boolean> markedCollecting) {
            Utils.checkNotNull(markedCollecting, "markedCollecting");
            this.markedCollecting = markedCollecting;
            return this;
        }


        public Builder status(RegistrationStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder countryCode(CountryCodeEnum countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }


        /**
         * The state/province code where the registration applies.
         */
        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        /**
         * The name of the state/province.
         */
        public Builder stateName(String stateName) {
            Utils.checkNotNull(stateName, "stateName");
            this.stateName = stateName;
            return this;
        }


        public Builder filingFrequency(FilingFrequencyEnum filingFrequency) {
            Utils.checkNotNull(filingFrequency, "filingFrequency");
            this.filingFrequency = filingFrequency;
            return this;
        }


        /**
         * The number of days before the filing deadline.
         */
        public Builder filingDays(long filingDays) {
            Utils.checkNotNull(filingDays, "filingDays");
            this.filingDays = filingDays;
            return this;
        }


        /**
         * Username for accessing tax registration details.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        /**
         * Username for accessing tax registration details.
         */
        public Builder username(Optional<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }


        /**
         * Additional comments related to the registration.
         */
        public Builder comment(String comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = Optional.ofNullable(comment);
            return this;
        }

        /**
         * Additional comments related to the registration.
         */
        public Builder comment(Optional<String> comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = comment;
            return this;
        }


        /**
         * The date from which filings should be created.
         * should start (YYYY-MM-DD).
         */
        public Builder createFilingsFrom(String createFilingsFrom) {
            Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
            this.createFilingsFrom = Optional.ofNullable(createFilingsFrom);
            return this;
        }

        /**
         * The date from which filings should be created.
         * should start (YYYY-MM-DD).
         */
        public Builder createFilingsFrom(Optional<String> createFilingsFrom) {
            Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
            this.createFilingsFrom = createFilingsFrom;
            return this;
        }


        /**
         * Indicates whether an initial synchronization should be performed.
         */
        public Builder initialSync(boolean initialSync) {
            Utils.checkNotNull(initialSync, "initialSync");
            this.initialSync = Optional.ofNullable(initialSync);
            return this;
        }

        /**
         * Indicates whether an initial synchronization should be performed.
         */
        public Builder initialSync(Optional<Boolean> initialSync) {
            Utils.checkNotNull(initialSync, "initialSync");
            this.initialSync = initialSync;
            return this;
        }


        /**
         * The amount of fees associated with the registration.
         */
        public Builder amountFees(String amountFees) {
            Utils.checkNotNull(amountFees, "amountFees");
            this.amountFees = Optional.ofNullable(amountFees);
            return this;
        }

        /**
         * The amount of fees associated with the registration.
         */
        public Builder amountFees(Optional<String> amountFees) {
            Utils.checkNotNull(amountFees, "amountFees");
            this.amountFees = amountFees;
            return this;
        }


        /**
         * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
         */
        public Builder vda(boolean vda) {
            Utils.checkNotNull(vda, "vda");
            this.vda = Optional.ofNullable(vda);
            return this;
        }

        /**
         * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
         */
        public Builder vda(Optional<Boolean> vda) {
            Utils.checkNotNull(vda, "vda");
            this.vda = vda;
            return this;
        }


        /**
         * Whether the registration was imported from another system.
         */
        public Builder imported(boolean imported) {
            Utils.checkNotNull(imported, "imported");
            this.imported = Optional.ofNullable(imported);
            return this;
        }

        /**
         * Whether the registration was imported from another system.
         */
        public Builder imported(Optional<Boolean> imported) {
            Utils.checkNotNull(imported, "imported");
            this.imported = imported;
            return this;
        }


        /**
         * The sales tax ID associated with the registration.
         */
        public Builder salesTaxId(String salesTaxId) {
            Utils.checkNotNull(salesTaxId, "salesTaxId");
            this.salesTaxId = Optional.ofNullable(salesTaxId);
            return this;
        }

        /**
         * The sales tax ID associated with the registration.
         */
        public Builder salesTaxId(Optional<String> salesTaxId) {
            Utils.checkNotNull(salesTaxId, "salesTaxId");
            this.salesTaxId = salesTaxId;
            return this;
        }


        /**
         * Indicates whether the registration is an SST Import.
         */
        public Builder sstImport(boolean sstImport) {
            Utils.checkNotNull(sstImport, "sstImport");
            this.sstImport = Optional.ofNullable(sstImport);
            return this;
        }

        /**
         * Indicates whether the registration is an SST Import.
         */
        public Builder sstImport(Optional<Boolean> sstImport) {
            Utils.checkNotNull(sstImport, "sstImport");
            this.sstImport = sstImport;
            return this;
        }


        /**
         * Type of OSS registration.
         */
        public Builder ossType(OssTypeEnum ossType) {
            Utils.checkNotNull(ossType, "ossType");
            this.ossType = Optional.ofNullable(ossType);
            return this;
        }

        /**
         * Type of OSS registration.
         */
        public Builder ossType(Optional<? extends OssTypeEnum> ossType) {
            Utils.checkNotNull(ossType, "ossType");
            this.ossType = ossType;
            return this;
        }


        public Builder ossMemberStateOfIdentificationCode(CountryCodeEnum ossMemberStateOfIdentificationCode) {
            Utils.checkNotNull(ossMemberStateOfIdentificationCode, "ossMemberStateOfIdentificationCode");
            this.ossMemberStateOfIdentificationCode = Optional.ofNullable(ossMemberStateOfIdentificationCode);
            return this;
        }

        public Builder ossMemberStateOfIdentificationCode(Optional<? extends CountryCodeEnum> ossMemberStateOfIdentificationCode) {
            Utils.checkNotNull(ossMemberStateOfIdentificationCode, "ossMemberStateOfIdentificationCode");
            this.ossMemberStateOfIdentificationCode = ossMemberStateOfIdentificationCode;
            return this;
        }


        /**
         * The date when the registration was marked as collecting.
         */
        public Builder markedCollectingDate(String markedCollectingDate) {
            Utils.checkNotNull(markedCollectingDate, "markedCollectingDate");
            this.markedCollectingDate = Optional.ofNullable(markedCollectingDate);
            return this;
        }

        /**
         * The date when the registration was marked as collecting.
         */
        public Builder markedCollectingDate(Optional<String> markedCollectingDate) {
            Utils.checkNotNull(markedCollectingDate, "markedCollectingDate");
            this.markedCollectingDate = markedCollectingDate;
            return this;
        }


        /**
         * Indicates whether the registration needs to be marked as collecting.
         */
        public Builder needsMarkAsCollecting(boolean needsMarkAsCollecting) {
            Utils.checkNotNull(needsMarkAsCollecting, "needsMarkAsCollecting");
            this.needsMarkAsCollecting = Optional.ofNullable(needsMarkAsCollecting);
            return this;
        }

        /**
         * Indicates whether the registration needs to be marked as collecting.
         */
        public Builder needsMarkAsCollecting(Optional<Boolean> needsMarkAsCollecting) {
            Utils.checkNotNull(needsMarkAsCollecting, "needsMarkAsCollecting");
            this.needsMarkAsCollecting = needsMarkAsCollecting;
            return this;
        }


        /**
         * The unique identifier for the registration.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder creditsTotalAvailable(String creditsTotalAvailable) {
            Utils.checkNotNull(creditsTotalAvailable, "creditsTotalAvailable");
            this.creditsTotalAvailable = Optional.ofNullable(creditsTotalAvailable);
            return this;
        }

        public Builder creditsTotalAvailable(Optional<String> creditsTotalAvailable) {
            Utils.checkNotNull(creditsTotalAvailable, "creditsTotalAvailable");
            this.creditsTotalAvailable = creditsTotalAvailable;
            return this;
        }


        /**
         * Encrypted password for accessing the registration,
         * if applicable.
         */
        public Builder passwordEncrypted(String passwordEncrypted) {
            Utils.checkNotNull(passwordEncrypted, "passwordEncrypted");
            this.passwordEncrypted = Optional.ofNullable(passwordEncrypted);
            return this;
        }

        /**
         * Encrypted password for accessing the registration,
         * if applicable.
         */
        public Builder passwordEncrypted(Optional<String> passwordEncrypted) {
            Utils.checkNotNull(passwordEncrypted, "passwordEncrypted");
            this.passwordEncrypted = passwordEncrypted;
            return this;
        }


        /**
         * Indicates if all required credentials are present.
         */
        public Builder hasAllCredentials(boolean hasAllCredentials) {
            Utils.checkNotNull(hasAllCredentials, "hasAllCredentials");
            this.hasAllCredentials = Optional.ofNullable(hasAllCredentials);
            return this;
        }

        /**
         * Indicates if all required credentials are present.
         */
        public Builder hasAllCredentials(Optional<Boolean> hasAllCredentials) {
            Utils.checkNotNull(hasAllCredentials, "hasAllCredentials");
            this.hasAllCredentials = hasAllCredentials;
            return this;
        }


        public Builder registrationType(RegistrationTypeEnum registrationType) {
            Utils.checkNotNull(registrationType, "registrationType");
            this.registrationType = registrationType;
            return this;
        }

        public RegistrationReadWithPassword build() {
            if (autoRegistered == null) {
                autoRegistered = _SINGLETON_VALUE_AutoRegistered.value();
            }
            if (thirdPartyEnabled == null) {
                thirdPartyEnabled = _SINGLETON_VALUE_ThirdPartyEnabled.value();
            }
            if (initialSync == null) {
                initialSync = _SINGLETON_VALUE_InitialSync.value();
            }
            if (amountFees == null) {
                amountFees = _SINGLETON_VALUE_AmountFees.value();
            }
            if (vda == null) {
                vda = _SINGLETON_VALUE_Vda.value();
            }
            if (sstImport == null) {
                sstImport = _SINGLETON_VALUE_SstImport.value();
            }
            if (needsMarkAsCollecting == null) {
                needsMarkAsCollecting = _SINGLETON_VALUE_NeedsMarkAsCollecting.value();
            }
            if (creditsTotalAvailable == null) {
                creditsTotalAvailable = _SINGLETON_VALUE_CreditsTotalAvailable.value();
            }
            if (hasAllCredentials == null) {
                hasAllCredentials = _SINGLETON_VALUE_HasAllCredentials.value();
            }

            return new RegistrationReadWithPassword(
                registrationDate, registrationEmail, registrationKey,
                deregistrationKey, registrationRequested, registrationCompleted,
                deregistrationRequested, deregistrationCompleted, autoRegistered,
                registrationsRegime, changeRegimeStatus, thirdPartyEnabled,
                markedCollecting, status, countryCode,
                stateCode, stateName, filingFrequency,
                filingDays, username, comment,
                createFilingsFrom, initialSync, amountFees,
                vda, imported, salesTaxId,
                sstImport, ossType, ossMemberStateOfIdentificationCode,
                markedCollectingDate, needsMarkAsCollecting, id,
                creditsTotalAvailable, passwordEncrypted, hasAllCredentials,
                registrationType);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_AutoRegistered =
                new LazySingletonValue<>(
                        "auto_registered",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ThirdPartyEnabled =
                new LazySingletonValue<>(
                        "third_party_enabled",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_InitialSync =
                new LazySingletonValue<>(
                        "initial_sync",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AmountFees =
                new LazySingletonValue<>(
                        "amount_fees",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Vda =
                new LazySingletonValue<>(
                        "vda",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_SstImport =
                new LazySingletonValue<>(
                        "sst_import",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_NeedsMarkAsCollecting =
                new LazySingletonValue<>(
                        "needs_mark_as_collecting",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_CreditsTotalAvailable =
                new LazySingletonValue<>(
                        "credits_total_available",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_HasAllCredentials =
                new LazySingletonValue<>(
                        "has_all_credentials",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
