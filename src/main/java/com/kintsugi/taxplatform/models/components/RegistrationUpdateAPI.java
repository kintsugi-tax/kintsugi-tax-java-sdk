/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class RegistrationUpdateAPI {
    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_date")
    private Optional<String> registrationDate;

    /**
     * Email address associated with the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_email")
    private Optional<String> registrationEmail;

    /**
     * A unique key assigned to the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_key")
    private Optional<String> registrationKey;

    /**
     * A unique key assigned for deregistration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_key")
    private Optional<String> deregistrationKey;

    /**
     * Timestamp when the registration was requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_requested")
    private Optional<String> registrationRequested;

    /**
     * Timestamp when the registration was completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_completed")
    private Optional<String> registrationCompleted;

    /**
     * Timestamp when deregistration was requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_requested")
    private Optional<String> deregistrationRequested;

    /**
     * Timestamp when the deregistration was completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deregistration_completed")
    private Optional<String> deregistrationCompleted;

    /**
     * Indicates whether the registration was completed automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_registered")
    private Optional<Boolean> autoRegistered;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrations_regime")
    private Optional<? extends RegistrationsRegimeEnum> registrationsRegime;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("change_regime_status")
    private Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus;

    /**
     * Indicates whether third-party access is enabled for this registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("third_party_enabled")
    private Optional<Boolean> thirdPartyEnabled;

    /**
     * Indicates whether the  registration is marked as collecting in shopify
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marked_collecting")
    private Optional<Boolean> markedCollecting;

    /**
     * The username associated with the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<String> username;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filing_frequency")
    private Optional<? extends FilingFrequencyEnum> filingFrequency;

    /**
     * The updated date from which filings should start (YYYY-MM-DD).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_filings_from")
    private Optional<String> createFilingsFrom;

    /**
     * Indicates whether the registration is approaching an action (e.g., renewal).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_approaching")
    private Optional<Boolean> isApproaching;

    /**
     * Additional notes or comments related to the registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    private Optional<String> comment;

    /**
     * Indicates if the Voluntary Disclosure Agreement (VDA) applies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vda")
    private Optional<Boolean> vda;

    @JsonCreator
    public RegistrationUpdateAPI(
            @JsonProperty("registration_date") Optional<String> registrationDate,
            @JsonProperty("registration_email") Optional<String> registrationEmail,
            @JsonProperty("registration_key") Optional<String> registrationKey,
            @JsonProperty("deregistration_key") Optional<String> deregistrationKey,
            @JsonProperty("registration_requested") Optional<String> registrationRequested,
            @JsonProperty("registration_completed") Optional<String> registrationCompleted,
            @JsonProperty("deregistration_requested") Optional<String> deregistrationRequested,
            @JsonProperty("deregistration_completed") Optional<String> deregistrationCompleted,
            @JsonProperty("auto_registered") Optional<Boolean> autoRegistered,
            @JsonProperty("registrations_regime") Optional<? extends RegistrationsRegimeEnum> registrationsRegime,
            @JsonProperty("change_regime_status") Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus,
            @JsonProperty("third_party_enabled") Optional<Boolean> thirdPartyEnabled,
            @JsonProperty("marked_collecting") Optional<Boolean> markedCollecting,
            @JsonProperty("username") Optional<String> username,
            @JsonProperty("filing_frequency") Optional<? extends FilingFrequencyEnum> filingFrequency,
            @JsonProperty("create_filings_from") Optional<String> createFilingsFrom,
            @JsonProperty("is_approaching") Optional<Boolean> isApproaching,
            @JsonProperty("comment") Optional<String> comment,
            @JsonProperty("vda") Optional<Boolean> vda) {
        Utils.checkNotNull(registrationDate, "registrationDate");
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        Utils.checkNotNull(registrationKey, "registrationKey");
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
        Utils.checkNotNull(markedCollecting, "markedCollecting");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(filingFrequency, "filingFrequency");
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        Utils.checkNotNull(isApproaching, "isApproaching");
        Utils.checkNotNull(comment, "comment");
        Utils.checkNotNull(vda, "vda");
        this.registrationDate = registrationDate;
        this.registrationEmail = registrationEmail;
        this.registrationKey = registrationKey;
        this.deregistrationKey = deregistrationKey;
        this.registrationRequested = registrationRequested;
        this.registrationCompleted = registrationCompleted;
        this.deregistrationRequested = deregistrationRequested;
        this.deregistrationCompleted = deregistrationCompleted;
        this.autoRegistered = autoRegistered;
        this.registrationsRegime = registrationsRegime;
        this.changeRegimeStatus = changeRegimeStatus;
        this.thirdPartyEnabled = thirdPartyEnabled;
        this.markedCollecting = markedCollecting;
        this.username = username;
        this.filingFrequency = filingFrequency;
        this.createFilingsFrom = createFilingsFrom;
        this.isApproaching = isApproaching;
        this.comment = comment;
        this.vda = vda;
    }
    
    public RegistrationUpdateAPI() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    @JsonIgnore
    public Optional<String> registrationDate() {
        return registrationDate;
    }

    /**
     * Email address associated with the registration.
     */
    @JsonIgnore
    public Optional<String> registrationEmail() {
        return registrationEmail;
    }

    /**
     * A unique key assigned to the registration.
     */
    @JsonIgnore
    public Optional<String> registrationKey() {
        return registrationKey;
    }

    /**
     * A unique key assigned for deregistration.
     */
    @JsonIgnore
    public Optional<String> deregistrationKey() {
        return deregistrationKey;
    }

    /**
     * Timestamp when the registration was requested.
     */
    @JsonIgnore
    public Optional<String> registrationRequested() {
        return registrationRequested;
    }

    /**
     * Timestamp when the registration was completed.
     */
    @JsonIgnore
    public Optional<String> registrationCompleted() {
        return registrationCompleted;
    }

    /**
     * Timestamp when deregistration was requested.
     */
    @JsonIgnore
    public Optional<String> deregistrationRequested() {
        return deregistrationRequested;
    }

    /**
     * Timestamp when the deregistration was completed.
     */
    @JsonIgnore
    public Optional<String> deregistrationCompleted() {
        return deregistrationCompleted;
    }

    /**
     * Indicates whether the registration was completed automatically.
     */
    @JsonIgnore
    public Optional<Boolean> autoRegistered() {
        return autoRegistered;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RegistrationsRegimeEnum> registrationsRegime() {
        return (Optional<RegistrationsRegimeEnum>) registrationsRegime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChangeRegimeStatusEnum> changeRegimeStatus() {
        return (Optional<ChangeRegimeStatusEnum>) changeRegimeStatus;
    }

    /**
     * Indicates whether third-party access is enabled for this registration.
     */
    @JsonIgnore
    public Optional<Boolean> thirdPartyEnabled() {
        return thirdPartyEnabled;
    }

    /**
     * Indicates whether the  registration is marked as collecting in shopify
     */
    @JsonIgnore
    public Optional<Boolean> markedCollecting() {
        return markedCollecting;
    }

    /**
     * The username associated with the registration.
     */
    @JsonIgnore
    public Optional<String> username() {
        return username;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FilingFrequencyEnum> filingFrequency() {
        return (Optional<FilingFrequencyEnum>) filingFrequency;
    }

    /**
     * The updated date from which filings should start (YYYY-MM-DD).
     */
    @JsonIgnore
    public Optional<String> createFilingsFrom() {
        return createFilingsFrom;
    }

    /**
     * Indicates whether the registration is approaching an action (e.g., renewal).
     */
    @JsonIgnore
    public Optional<Boolean> isApproaching() {
        return isApproaching;
    }

    /**
     * Additional notes or comments related to the registration.
     */
    @JsonIgnore
    public Optional<String> comment() {
        return comment;
    }

    /**
     * Indicates if the Voluntary Disclosure Agreement (VDA) applies.
     */
    @JsonIgnore
    public Optional<Boolean> vda() {
        return vda;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    public RegistrationUpdateAPI withRegistrationDate(String registrationDate) {
        Utils.checkNotNull(registrationDate, "registrationDate");
        this.registrationDate = Optional.ofNullable(registrationDate);
        return this;
    }


    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     */
    public RegistrationUpdateAPI withRegistrationDate(Optional<String> registrationDate) {
        Utils.checkNotNull(registrationDate, "registrationDate");
        this.registrationDate = registrationDate;
        return this;
    }

    /**
     * Email address associated with the registration.
     */
    public RegistrationUpdateAPI withRegistrationEmail(String registrationEmail) {
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        this.registrationEmail = Optional.ofNullable(registrationEmail);
        return this;
    }


    /**
     * Email address associated with the registration.
     */
    public RegistrationUpdateAPI withRegistrationEmail(Optional<String> registrationEmail) {
        Utils.checkNotNull(registrationEmail, "registrationEmail");
        this.registrationEmail = registrationEmail;
        return this;
    }

    /**
     * A unique key assigned to the registration.
     */
    public RegistrationUpdateAPI withRegistrationKey(String registrationKey) {
        Utils.checkNotNull(registrationKey, "registrationKey");
        this.registrationKey = Optional.ofNullable(registrationKey);
        return this;
    }


    /**
     * A unique key assigned to the registration.
     */
    public RegistrationUpdateAPI withRegistrationKey(Optional<String> registrationKey) {
        Utils.checkNotNull(registrationKey, "registrationKey");
        this.registrationKey = registrationKey;
        return this;
    }

    /**
     * A unique key assigned for deregistration.
     */
    public RegistrationUpdateAPI withDeregistrationKey(String deregistrationKey) {
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        this.deregistrationKey = Optional.ofNullable(deregistrationKey);
        return this;
    }


    /**
     * A unique key assigned for deregistration.
     */
    public RegistrationUpdateAPI withDeregistrationKey(Optional<String> deregistrationKey) {
        Utils.checkNotNull(deregistrationKey, "deregistrationKey");
        this.deregistrationKey = deregistrationKey;
        return this;
    }

    /**
     * Timestamp when the registration was requested.
     */
    public RegistrationUpdateAPI withRegistrationRequested(String registrationRequested) {
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        this.registrationRequested = Optional.ofNullable(registrationRequested);
        return this;
    }


    /**
     * Timestamp when the registration was requested.
     */
    public RegistrationUpdateAPI withRegistrationRequested(Optional<String> registrationRequested) {
        Utils.checkNotNull(registrationRequested, "registrationRequested");
        this.registrationRequested = registrationRequested;
        return this;
    }

    /**
     * Timestamp when the registration was completed.
     */
    public RegistrationUpdateAPI withRegistrationCompleted(String registrationCompleted) {
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        this.registrationCompleted = Optional.ofNullable(registrationCompleted);
        return this;
    }


    /**
     * Timestamp when the registration was completed.
     */
    public RegistrationUpdateAPI withRegistrationCompleted(Optional<String> registrationCompleted) {
        Utils.checkNotNull(registrationCompleted, "registrationCompleted");
        this.registrationCompleted = registrationCompleted;
        return this;
    }

    /**
     * Timestamp when deregistration was requested.
     */
    public RegistrationUpdateAPI withDeregistrationRequested(String deregistrationRequested) {
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        this.deregistrationRequested = Optional.ofNullable(deregistrationRequested);
        return this;
    }


    /**
     * Timestamp when deregistration was requested.
     */
    public RegistrationUpdateAPI withDeregistrationRequested(Optional<String> deregistrationRequested) {
        Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
        this.deregistrationRequested = deregistrationRequested;
        return this;
    }

    /**
     * Timestamp when the deregistration was completed.
     */
    public RegistrationUpdateAPI withDeregistrationCompleted(String deregistrationCompleted) {
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        this.deregistrationCompleted = Optional.ofNullable(deregistrationCompleted);
        return this;
    }


    /**
     * Timestamp when the deregistration was completed.
     */
    public RegistrationUpdateAPI withDeregistrationCompleted(Optional<String> deregistrationCompleted) {
        Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
        this.deregistrationCompleted = deregistrationCompleted;
        return this;
    }

    /**
     * Indicates whether the registration was completed automatically.
     */
    public RegistrationUpdateAPI withAutoRegistered(boolean autoRegistered) {
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        this.autoRegistered = Optional.ofNullable(autoRegistered);
        return this;
    }


    /**
     * Indicates whether the registration was completed automatically.
     */
    public RegistrationUpdateAPI withAutoRegistered(Optional<Boolean> autoRegistered) {
        Utils.checkNotNull(autoRegistered, "autoRegistered");
        this.autoRegistered = autoRegistered;
        return this;
    }

    public RegistrationUpdateAPI withRegistrationsRegime(RegistrationsRegimeEnum registrationsRegime) {
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        this.registrationsRegime = Optional.ofNullable(registrationsRegime);
        return this;
    }


    public RegistrationUpdateAPI withRegistrationsRegime(Optional<? extends RegistrationsRegimeEnum> registrationsRegime) {
        Utils.checkNotNull(registrationsRegime, "registrationsRegime");
        this.registrationsRegime = registrationsRegime;
        return this;
    }

    public RegistrationUpdateAPI withChangeRegimeStatus(ChangeRegimeStatusEnum changeRegimeStatus) {
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        this.changeRegimeStatus = Optional.ofNullable(changeRegimeStatus);
        return this;
    }


    public RegistrationUpdateAPI withChangeRegimeStatus(Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus) {
        Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
        this.changeRegimeStatus = changeRegimeStatus;
        return this;
    }

    /**
     * Indicates whether third-party access is enabled for this registration.
     */
    public RegistrationUpdateAPI withThirdPartyEnabled(boolean thirdPartyEnabled) {
        Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
        this.thirdPartyEnabled = Optional.ofNullable(thirdPartyEnabled);
        return this;
    }


    /**
     * Indicates whether third-party access is enabled for this registration.
     */
    public RegistrationUpdateAPI withThirdPartyEnabled(Optional<Boolean> thirdPartyEnabled) {
        Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
        this.thirdPartyEnabled = thirdPartyEnabled;
        return this;
    }

    /**
     * Indicates whether the  registration is marked as collecting in shopify
     */
    public RegistrationUpdateAPI withMarkedCollecting(boolean markedCollecting) {
        Utils.checkNotNull(markedCollecting, "markedCollecting");
        this.markedCollecting = Optional.ofNullable(markedCollecting);
        return this;
    }


    /**
     * Indicates whether the  registration is marked as collecting in shopify
     */
    public RegistrationUpdateAPI withMarkedCollecting(Optional<Boolean> markedCollecting) {
        Utils.checkNotNull(markedCollecting, "markedCollecting");
        this.markedCollecting = markedCollecting;
        return this;
    }

    /**
     * The username associated with the registration.
     */
    public RegistrationUpdateAPI withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }


    /**
     * The username associated with the registration.
     */
    public RegistrationUpdateAPI withUsername(Optional<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public RegistrationUpdateAPI withFilingFrequency(FilingFrequencyEnum filingFrequency) {
        Utils.checkNotNull(filingFrequency, "filingFrequency");
        this.filingFrequency = Optional.ofNullable(filingFrequency);
        return this;
    }


    public RegistrationUpdateAPI withFilingFrequency(Optional<? extends FilingFrequencyEnum> filingFrequency) {
        Utils.checkNotNull(filingFrequency, "filingFrequency");
        this.filingFrequency = filingFrequency;
        return this;
    }

    /**
     * The updated date from which filings should start (YYYY-MM-DD).
     */
    public RegistrationUpdateAPI withCreateFilingsFrom(String createFilingsFrom) {
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        this.createFilingsFrom = Optional.ofNullable(createFilingsFrom);
        return this;
    }


    /**
     * The updated date from which filings should start (YYYY-MM-DD).
     */
    public RegistrationUpdateAPI withCreateFilingsFrom(Optional<String> createFilingsFrom) {
        Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
        this.createFilingsFrom = createFilingsFrom;
        return this;
    }

    /**
     * Indicates whether the registration is approaching an action (e.g., renewal).
     */
    public RegistrationUpdateAPI withIsApproaching(boolean isApproaching) {
        Utils.checkNotNull(isApproaching, "isApproaching");
        this.isApproaching = Optional.ofNullable(isApproaching);
        return this;
    }


    /**
     * Indicates whether the registration is approaching an action (e.g., renewal).
     */
    public RegistrationUpdateAPI withIsApproaching(Optional<Boolean> isApproaching) {
        Utils.checkNotNull(isApproaching, "isApproaching");
        this.isApproaching = isApproaching;
        return this;
    }

    /**
     * Additional notes or comments related to the registration.
     */
    public RegistrationUpdateAPI withComment(String comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = Optional.ofNullable(comment);
        return this;
    }


    /**
     * Additional notes or comments related to the registration.
     */
    public RegistrationUpdateAPI withComment(Optional<String> comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = comment;
        return this;
    }

    /**
     * Indicates if the Voluntary Disclosure Agreement (VDA) applies.
     */
    public RegistrationUpdateAPI withVda(boolean vda) {
        Utils.checkNotNull(vda, "vda");
        this.vda = Optional.ofNullable(vda);
        return this;
    }


    /**
     * Indicates if the Voluntary Disclosure Agreement (VDA) applies.
     */
    public RegistrationUpdateAPI withVda(Optional<Boolean> vda) {
        Utils.checkNotNull(vda, "vda");
        this.vda = vda;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RegistrationUpdateAPI other = (RegistrationUpdateAPI) o;
        return 
            Utils.enhancedDeepEquals(this.registrationDate, other.registrationDate) &&
            Utils.enhancedDeepEquals(this.registrationEmail, other.registrationEmail) &&
            Utils.enhancedDeepEquals(this.registrationKey, other.registrationKey) &&
            Utils.enhancedDeepEquals(this.deregistrationKey, other.deregistrationKey) &&
            Utils.enhancedDeepEquals(this.registrationRequested, other.registrationRequested) &&
            Utils.enhancedDeepEquals(this.registrationCompleted, other.registrationCompleted) &&
            Utils.enhancedDeepEquals(this.deregistrationRequested, other.deregistrationRequested) &&
            Utils.enhancedDeepEquals(this.deregistrationCompleted, other.deregistrationCompleted) &&
            Utils.enhancedDeepEquals(this.autoRegistered, other.autoRegistered) &&
            Utils.enhancedDeepEquals(this.registrationsRegime, other.registrationsRegime) &&
            Utils.enhancedDeepEquals(this.changeRegimeStatus, other.changeRegimeStatus) &&
            Utils.enhancedDeepEquals(this.thirdPartyEnabled, other.thirdPartyEnabled) &&
            Utils.enhancedDeepEquals(this.markedCollecting, other.markedCollecting) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.filingFrequency, other.filingFrequency) &&
            Utils.enhancedDeepEquals(this.createFilingsFrom, other.createFilingsFrom) &&
            Utils.enhancedDeepEquals(this.isApproaching, other.isApproaching) &&
            Utils.enhancedDeepEquals(this.comment, other.comment) &&
            Utils.enhancedDeepEquals(this.vda, other.vda);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            registrationDate, registrationEmail, registrationKey,
            deregistrationKey, registrationRequested, registrationCompleted,
            deregistrationRequested, deregistrationCompleted, autoRegistered,
            registrationsRegime, changeRegimeStatus, thirdPartyEnabled,
            markedCollecting, username, filingFrequency,
            createFilingsFrom, isApproaching, comment,
            vda);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RegistrationUpdateAPI.class,
                "registrationDate", registrationDate,
                "registrationEmail", registrationEmail,
                "registrationKey", registrationKey,
                "deregistrationKey", deregistrationKey,
                "registrationRequested", registrationRequested,
                "registrationCompleted", registrationCompleted,
                "deregistrationRequested", deregistrationRequested,
                "deregistrationCompleted", deregistrationCompleted,
                "autoRegistered", autoRegistered,
                "registrationsRegime", registrationsRegime,
                "changeRegimeStatus", changeRegimeStatus,
                "thirdPartyEnabled", thirdPartyEnabled,
                "markedCollecting", markedCollecting,
                "username", username,
                "filingFrequency", filingFrequency,
                "createFilingsFrom", createFilingsFrom,
                "isApproaching", isApproaching,
                "comment", comment,
                "vda", vda);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> registrationDate = Optional.empty();

        private Optional<String> registrationEmail = Optional.empty();

        private Optional<String> registrationKey = Optional.empty();

        private Optional<String> deregistrationKey = Optional.empty();

        private Optional<String> registrationRequested = Optional.empty();

        private Optional<String> registrationCompleted = Optional.empty();

        private Optional<String> deregistrationRequested = Optional.empty();

        private Optional<String> deregistrationCompleted = Optional.empty();

        private Optional<Boolean> autoRegistered;

        private Optional<? extends RegistrationsRegimeEnum> registrationsRegime = Optional.empty();

        private Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus = Optional.empty();

        private Optional<Boolean> thirdPartyEnabled;

        private Optional<Boolean> markedCollecting = Optional.empty();

        private Optional<String> username = Optional.empty();

        private Optional<? extends FilingFrequencyEnum> filingFrequency = Optional.empty();

        private Optional<String> createFilingsFrom = Optional.empty();

        private Optional<Boolean> isApproaching = Optional.empty();

        private Optional<String> comment = Optional.empty();

        private Optional<Boolean> vda = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The date when the registration was created. Format: YYYY-MM-DD.
         */
        public Builder registrationDate(String registrationDate) {
            Utils.checkNotNull(registrationDate, "registrationDate");
            this.registrationDate = Optional.ofNullable(registrationDate);
            return this;
        }

        /**
         * The date when the registration was created. Format: YYYY-MM-DD.
         */
        public Builder registrationDate(Optional<String> registrationDate) {
            Utils.checkNotNull(registrationDate, "registrationDate");
            this.registrationDate = registrationDate;
            return this;
        }


        /**
         * Email address associated with the registration.
         */
        public Builder registrationEmail(String registrationEmail) {
            Utils.checkNotNull(registrationEmail, "registrationEmail");
            this.registrationEmail = Optional.ofNullable(registrationEmail);
            return this;
        }

        /**
         * Email address associated with the registration.
         */
        public Builder registrationEmail(Optional<String> registrationEmail) {
            Utils.checkNotNull(registrationEmail, "registrationEmail");
            this.registrationEmail = registrationEmail;
            return this;
        }


        /**
         * A unique key assigned to the registration.
         */
        public Builder registrationKey(String registrationKey) {
            Utils.checkNotNull(registrationKey, "registrationKey");
            this.registrationKey = Optional.ofNullable(registrationKey);
            return this;
        }

        /**
         * A unique key assigned to the registration.
         */
        public Builder registrationKey(Optional<String> registrationKey) {
            Utils.checkNotNull(registrationKey, "registrationKey");
            this.registrationKey = registrationKey;
            return this;
        }


        /**
         * A unique key assigned for deregistration.
         */
        public Builder deregistrationKey(String deregistrationKey) {
            Utils.checkNotNull(deregistrationKey, "deregistrationKey");
            this.deregistrationKey = Optional.ofNullable(deregistrationKey);
            return this;
        }

        /**
         * A unique key assigned for deregistration.
         */
        public Builder deregistrationKey(Optional<String> deregistrationKey) {
            Utils.checkNotNull(deregistrationKey, "deregistrationKey");
            this.deregistrationKey = deregistrationKey;
            return this;
        }


        /**
         * Timestamp when the registration was requested.
         */
        public Builder registrationRequested(String registrationRequested) {
            Utils.checkNotNull(registrationRequested, "registrationRequested");
            this.registrationRequested = Optional.ofNullable(registrationRequested);
            return this;
        }

        /**
         * Timestamp when the registration was requested.
         */
        public Builder registrationRequested(Optional<String> registrationRequested) {
            Utils.checkNotNull(registrationRequested, "registrationRequested");
            this.registrationRequested = registrationRequested;
            return this;
        }


        /**
         * Timestamp when the registration was completed.
         */
        public Builder registrationCompleted(String registrationCompleted) {
            Utils.checkNotNull(registrationCompleted, "registrationCompleted");
            this.registrationCompleted = Optional.ofNullable(registrationCompleted);
            return this;
        }

        /**
         * Timestamp when the registration was completed.
         */
        public Builder registrationCompleted(Optional<String> registrationCompleted) {
            Utils.checkNotNull(registrationCompleted, "registrationCompleted");
            this.registrationCompleted = registrationCompleted;
            return this;
        }


        /**
         * Timestamp when deregistration was requested.
         */
        public Builder deregistrationRequested(String deregistrationRequested) {
            Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
            this.deregistrationRequested = Optional.ofNullable(deregistrationRequested);
            return this;
        }

        /**
         * Timestamp when deregistration was requested.
         */
        public Builder deregistrationRequested(Optional<String> deregistrationRequested) {
            Utils.checkNotNull(deregistrationRequested, "deregistrationRequested");
            this.deregistrationRequested = deregistrationRequested;
            return this;
        }


        /**
         * Timestamp when the deregistration was completed.
         */
        public Builder deregistrationCompleted(String deregistrationCompleted) {
            Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
            this.deregistrationCompleted = Optional.ofNullable(deregistrationCompleted);
            return this;
        }

        /**
         * Timestamp when the deregistration was completed.
         */
        public Builder deregistrationCompleted(Optional<String> deregistrationCompleted) {
            Utils.checkNotNull(deregistrationCompleted, "deregistrationCompleted");
            this.deregistrationCompleted = deregistrationCompleted;
            return this;
        }


        /**
         * Indicates whether the registration was completed automatically.
         */
        public Builder autoRegistered(boolean autoRegistered) {
            Utils.checkNotNull(autoRegistered, "autoRegistered");
            this.autoRegistered = Optional.ofNullable(autoRegistered);
            return this;
        }

        /**
         * Indicates whether the registration was completed automatically.
         */
        public Builder autoRegistered(Optional<Boolean> autoRegistered) {
            Utils.checkNotNull(autoRegistered, "autoRegistered");
            this.autoRegistered = autoRegistered;
            return this;
        }


        public Builder registrationsRegime(RegistrationsRegimeEnum registrationsRegime) {
            Utils.checkNotNull(registrationsRegime, "registrationsRegime");
            this.registrationsRegime = Optional.ofNullable(registrationsRegime);
            return this;
        }

        public Builder registrationsRegime(Optional<? extends RegistrationsRegimeEnum> registrationsRegime) {
            Utils.checkNotNull(registrationsRegime, "registrationsRegime");
            this.registrationsRegime = registrationsRegime;
            return this;
        }


        public Builder changeRegimeStatus(ChangeRegimeStatusEnum changeRegimeStatus) {
            Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
            this.changeRegimeStatus = Optional.ofNullable(changeRegimeStatus);
            return this;
        }

        public Builder changeRegimeStatus(Optional<? extends ChangeRegimeStatusEnum> changeRegimeStatus) {
            Utils.checkNotNull(changeRegimeStatus, "changeRegimeStatus");
            this.changeRegimeStatus = changeRegimeStatus;
            return this;
        }


        /**
         * Indicates whether third-party access is enabled for this registration.
         */
        public Builder thirdPartyEnabled(boolean thirdPartyEnabled) {
            Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
            this.thirdPartyEnabled = Optional.ofNullable(thirdPartyEnabled);
            return this;
        }

        /**
         * Indicates whether third-party access is enabled for this registration.
         */
        public Builder thirdPartyEnabled(Optional<Boolean> thirdPartyEnabled) {
            Utils.checkNotNull(thirdPartyEnabled, "thirdPartyEnabled");
            this.thirdPartyEnabled = thirdPartyEnabled;
            return this;
        }


        /**
         * Indicates whether the  registration is marked as collecting in shopify
         */
        public Builder markedCollecting(boolean markedCollecting) {
            Utils.checkNotNull(markedCollecting, "markedCollecting");
            this.markedCollecting = Optional.ofNullable(markedCollecting);
            return this;
        }

        /**
         * Indicates whether the  registration is marked as collecting in shopify
         */
        public Builder markedCollecting(Optional<Boolean> markedCollecting) {
            Utils.checkNotNull(markedCollecting, "markedCollecting");
            this.markedCollecting = markedCollecting;
            return this;
        }


        /**
         * The username associated with the registration.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        /**
         * The username associated with the registration.
         */
        public Builder username(Optional<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }


        public Builder filingFrequency(FilingFrequencyEnum filingFrequency) {
            Utils.checkNotNull(filingFrequency, "filingFrequency");
            this.filingFrequency = Optional.ofNullable(filingFrequency);
            return this;
        }

        public Builder filingFrequency(Optional<? extends FilingFrequencyEnum> filingFrequency) {
            Utils.checkNotNull(filingFrequency, "filingFrequency");
            this.filingFrequency = filingFrequency;
            return this;
        }


        /**
         * The updated date from which filings should start (YYYY-MM-DD).
         */
        public Builder createFilingsFrom(String createFilingsFrom) {
            Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
            this.createFilingsFrom = Optional.ofNullable(createFilingsFrom);
            return this;
        }

        /**
         * The updated date from which filings should start (YYYY-MM-DD).
         */
        public Builder createFilingsFrom(Optional<String> createFilingsFrom) {
            Utils.checkNotNull(createFilingsFrom, "createFilingsFrom");
            this.createFilingsFrom = createFilingsFrom;
            return this;
        }


        /**
         * Indicates whether the registration is approaching an action (e.g., renewal).
         */
        public Builder isApproaching(boolean isApproaching) {
            Utils.checkNotNull(isApproaching, "isApproaching");
            this.isApproaching = Optional.ofNullable(isApproaching);
            return this;
        }

        /**
         * Indicates whether the registration is approaching an action (e.g., renewal).
         */
        public Builder isApproaching(Optional<Boolean> isApproaching) {
            Utils.checkNotNull(isApproaching, "isApproaching");
            this.isApproaching = isApproaching;
            return this;
        }


        /**
         * Additional notes or comments related to the registration.
         */
        public Builder comment(String comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = Optional.ofNullable(comment);
            return this;
        }

        /**
         * Additional notes or comments related to the registration.
         */
        public Builder comment(Optional<String> comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = comment;
            return this;
        }


        /**
         * Indicates if the Voluntary Disclosure Agreement (VDA) applies.
         */
        public Builder vda(boolean vda) {
            Utils.checkNotNull(vda, "vda");
            this.vda = Optional.ofNullable(vda);
            return this;
        }

        /**
         * Indicates if the Voluntary Disclosure Agreement (VDA) applies.
         */
        public Builder vda(Optional<Boolean> vda) {
            Utils.checkNotNull(vda, "vda");
            this.vda = vda;
            return this;
        }

        public RegistrationUpdateAPI build() {
            if (autoRegistered == null) {
                autoRegistered = _SINGLETON_VALUE_AutoRegistered.value();
            }
            if (thirdPartyEnabled == null) {
                thirdPartyEnabled = _SINGLETON_VALUE_ThirdPartyEnabled.value();
            }

            return new RegistrationUpdateAPI(
                registrationDate, registrationEmail, registrationKey,
                deregistrationKey, registrationRequested, registrationCompleted,
                deregistrationRequested, deregistrationCompleted, autoRegistered,
                registrationsRegime, changeRegimeStatus, thirdPartyEnabled,
                markedCollecting, username, filingFrequency,
                createFilingsFrom, isApproaching, comment,
                vda);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_AutoRegistered =
                new LazySingletonValue<>(
                        "auto_registered",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ThirdPartyEnabled =
                new LazySingletonValue<>(
                        "third_party_enabled",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
