/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class SSTRegistrationCreatePayload implements com.kintsugi.taxplatform.models.operations.CreateRegistration {
    /**
     * Specifies this is an SST registration import.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_import_type")
    private Optional<String> registrationImportType;

    /**
     * The plaintext password for accessing the tax registration account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_plain_text")
    private Optional<String> passwordPlainText;

    /**
     * Metadata related to the password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_metadata_plain_text")
    private Optional<String> passwordMetadataPlainText;

    /**
     * Username for accessing the tax registration account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<String> username;

    @JsonCreator
    public SSTRegistrationCreatePayload(
            @JsonProperty("registration_import_type") Optional<String> registrationImportType,
            @JsonProperty("password_plain_text") Optional<String> passwordPlainText,
            @JsonProperty("password_metadata_plain_text") Optional<String> passwordMetadataPlainText,
            @JsonProperty("username") Optional<String> username) {
        Utils.checkNotNull(registrationImportType, "registrationImportType");
        Utils.checkNotNull(passwordPlainText, "passwordPlainText");
        Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
        Utils.checkNotNull(username, "username");
        this.registrationImportType = registrationImportType;
        this.passwordPlainText = passwordPlainText;
        this.passwordMetadataPlainText = passwordMetadataPlainText;
        this.username = username;
    }
    
    public SSTRegistrationCreatePayload() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Specifies this is an SST registration import.
     */
    @JsonIgnore
    @Override
    public String registrationImportType() {
        return Utils.discriminatorToString(registrationImportType);
    }

    /**
     * The plaintext password for accessing the tax registration account.
     */
    @JsonIgnore
    public Optional<String> passwordPlainText() {
        return passwordPlainText;
    }

    /**
     * Metadata related to the password.
     */
    @JsonIgnore
    public Optional<String> passwordMetadataPlainText() {
        return passwordMetadataPlainText;
    }

    /**
     * Username for accessing the tax registration account.
     */
    @JsonIgnore
    public Optional<String> username() {
        return username;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Specifies this is an SST registration import.
     */
    public SSTRegistrationCreatePayload withRegistrationImportType(String registrationImportType) {
        Utils.checkNotNull(registrationImportType, "registrationImportType");
        this.registrationImportType = Optional.ofNullable(registrationImportType);
        return this;
    }


    /**
     * Specifies this is an SST registration import.
     */
    public SSTRegistrationCreatePayload withRegistrationImportType(Optional<String> registrationImportType) {
        Utils.checkNotNull(registrationImportType, "registrationImportType");
        this.registrationImportType = registrationImportType;
        return this;
    }

    /**
     * The plaintext password for accessing the tax registration account.
     */
    public SSTRegistrationCreatePayload withPasswordPlainText(String passwordPlainText) {
        Utils.checkNotNull(passwordPlainText, "passwordPlainText");
        this.passwordPlainText = Optional.ofNullable(passwordPlainText);
        return this;
    }


    /**
     * The plaintext password for accessing the tax registration account.
     */
    public SSTRegistrationCreatePayload withPasswordPlainText(Optional<String> passwordPlainText) {
        Utils.checkNotNull(passwordPlainText, "passwordPlainText");
        this.passwordPlainText = passwordPlainText;
        return this;
    }

    /**
     * Metadata related to the password.
     */
    public SSTRegistrationCreatePayload withPasswordMetadataPlainText(String passwordMetadataPlainText) {
        Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
        this.passwordMetadataPlainText = Optional.ofNullable(passwordMetadataPlainText);
        return this;
    }


    /**
     * Metadata related to the password.
     */
    public SSTRegistrationCreatePayload withPasswordMetadataPlainText(Optional<String> passwordMetadataPlainText) {
        Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
        this.passwordMetadataPlainText = passwordMetadataPlainText;
        return this;
    }

    /**
     * Username for accessing the tax registration account.
     */
    public SSTRegistrationCreatePayload withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }


    /**
     * Username for accessing the tax registration account.
     */
    public SSTRegistrationCreatePayload withUsername(Optional<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SSTRegistrationCreatePayload other = (SSTRegistrationCreatePayload) o;
        return 
            Utils.enhancedDeepEquals(this.registrationImportType, other.registrationImportType) &&
            Utils.enhancedDeepEquals(this.passwordPlainText, other.passwordPlainText) &&
            Utils.enhancedDeepEquals(this.passwordMetadataPlainText, other.passwordMetadataPlainText) &&
            Utils.enhancedDeepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            registrationImportType, passwordPlainText, passwordMetadataPlainText,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SSTRegistrationCreatePayload.class,
                "registrationImportType", registrationImportType,
                "passwordPlainText", passwordPlainText,
                "passwordMetadataPlainText", passwordMetadataPlainText,
                "username", username);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> registrationImportType;

        private Optional<String> passwordPlainText = Optional.empty();

        private Optional<String> passwordMetadataPlainText = Optional.empty();

        private Optional<String> username = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Specifies this is an SST registration import.
         */
        public Builder registrationImportType(String registrationImportType) {
            Utils.checkNotNull(registrationImportType, "registrationImportType");
            this.registrationImportType = Optional.ofNullable(registrationImportType);
            return this;
        }

        /**
         * Specifies this is an SST registration import.
         */
        public Builder registrationImportType(Optional<String> registrationImportType) {
            Utils.checkNotNull(registrationImportType, "registrationImportType");
            this.registrationImportType = registrationImportType;
            return this;
        }


        /**
         * The plaintext password for accessing the tax registration account.
         */
        public Builder passwordPlainText(String passwordPlainText) {
            Utils.checkNotNull(passwordPlainText, "passwordPlainText");
            this.passwordPlainText = Optional.ofNullable(passwordPlainText);
            return this;
        }

        /**
         * The plaintext password for accessing the tax registration account.
         */
        public Builder passwordPlainText(Optional<String> passwordPlainText) {
            Utils.checkNotNull(passwordPlainText, "passwordPlainText");
            this.passwordPlainText = passwordPlainText;
            return this;
        }


        /**
         * Metadata related to the password.
         */
        public Builder passwordMetadataPlainText(String passwordMetadataPlainText) {
            Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
            this.passwordMetadataPlainText = Optional.ofNullable(passwordMetadataPlainText);
            return this;
        }

        /**
         * Metadata related to the password.
         */
        public Builder passwordMetadataPlainText(Optional<String> passwordMetadataPlainText) {
            Utils.checkNotNull(passwordMetadataPlainText, "passwordMetadataPlainText");
            this.passwordMetadataPlainText = passwordMetadataPlainText;
            return this;
        }


        /**
         * Username for accessing the tax registration account.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        /**
         * Username for accessing the tax registration account.
         */
        public Builder username(Optional<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public SSTRegistrationCreatePayload build() {
            if (registrationImportType == null) {
                registrationImportType = _SINGLETON_VALUE_RegistrationImportType.value();
            }

            return new SSTRegistrationCreatePayload(
                registrationImportType, passwordPlainText, passwordMetadataPlainText,
                username);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_RegistrationImportType =
                new LazySingletonValue<>(
                        "registration_import_type",
                        "\"SST\"",
                        new TypeReference<Optional<String>>() {});
    }
}
