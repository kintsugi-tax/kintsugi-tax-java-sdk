/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TaxItemBuilder {
    /**
     * The rule ID of the tax item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rule_id")
    private Optional<String> ruleId;


    @JsonProperty("rate")
    private Rate rate;


    @JsonProperty("amount")
    private TaxItemBuilderAmount amount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_amount")
    private JsonNullable<? extends TaxItemBuilderConvertedAmount> convertedAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends CurrencyEnum> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_currency")
    private JsonNullable<? extends CurrencyEnum> destinationCurrency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;

    /**
     * Deprecated: use `jurisdiction_type` instead
     */
    @JsonProperty("name")
    private String name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends TaxItemTypeEnum> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jurisdiction_type")
    private JsonNullable<? extends JurisdictionType> jurisdictionType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jurisdiction_name")
    private JsonNullable<String> jurisdictionName;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("organization_id")
    private Optional<String> organizationId;

    @JsonCreator
    public TaxItemBuilder(
            @JsonProperty("rule_id") Optional<String> ruleId,
            @JsonProperty("rate") Rate rate,
            @JsonProperty("amount") TaxItemBuilderAmount amount,
            @JsonProperty("converted_amount") JsonNullable<? extends TaxItemBuilderConvertedAmount> convertedAmount,
            @JsonProperty("currency") JsonNullable<? extends CurrencyEnum> currency,
            @JsonProperty("destination_currency") JsonNullable<? extends CurrencyEnum> destinationCurrency,
            @JsonProperty("external_id") JsonNullable<String> externalId,
            @JsonProperty("name") String name,
            @JsonProperty("type") Optional<? extends TaxItemTypeEnum> type,
            @JsonProperty("jurisdiction_type") JsonNullable<? extends JurisdictionType> jurisdictionType,
            @JsonProperty("jurisdiction_name") JsonNullable<String> jurisdictionName,
            @JsonProperty("organization_id") Optional<String> organizationId) {
        Utils.checkNotNull(ruleId, "ruleId");
        Utils.checkNotNull(rate, "rate");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(jurisdictionType, "jurisdictionType");
        Utils.checkNotNull(jurisdictionName, "jurisdictionName");
        Utils.checkNotNull(organizationId, "organizationId");
        this.ruleId = ruleId;
        this.rate = rate;
        this.amount = amount;
        this.convertedAmount = convertedAmount;
        this.currency = currency;
        this.destinationCurrency = destinationCurrency;
        this.externalId = externalId;
        this.name = name;
        this.type = type;
        this.jurisdictionType = jurisdictionType;
        this.jurisdictionName = jurisdictionName;
        this.organizationId = organizationId;
    }
    
    public TaxItemBuilder(
            Rate rate,
            TaxItemBuilderAmount amount,
            String name) {
        this(Optional.empty(), rate, amount,
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), name, Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The rule ID of the tax item
     */
    @JsonIgnore
    public Optional<String> ruleId() {
        return ruleId;
    }

    @JsonIgnore
    public Rate rate() {
        return rate;
    }

    @JsonIgnore
    public TaxItemBuilderAmount amount() {
        return amount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TaxItemBuilderConvertedAmount> convertedAmount() {
        return (JsonNullable<TaxItemBuilderConvertedAmount>) convertedAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyEnum> currency() {
        return (JsonNullable<CurrencyEnum>) currency;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyEnum> destinationCurrency() {
        return (JsonNullable<CurrencyEnum>) destinationCurrency;
    }

    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    /**
     * Deprecated: use `jurisdiction_type` instead
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxItemTypeEnum> type() {
        return (Optional<TaxItemTypeEnum>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JurisdictionType> jurisdictionType() {
        return (JsonNullable<JurisdictionType>) jurisdictionType;
    }

    @JsonIgnore
    public JsonNullable<String> jurisdictionName() {
        return jurisdictionName;
    }

    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The rule ID of the tax item
     */
    public TaxItemBuilder withRuleId(String ruleId) {
        Utils.checkNotNull(ruleId, "ruleId");
        this.ruleId = Optional.ofNullable(ruleId);
        return this;
    }


    /**
     * The rule ID of the tax item
     */
    public TaxItemBuilder withRuleId(Optional<String> ruleId) {
        Utils.checkNotNull(ruleId, "ruleId");
        this.ruleId = ruleId;
        return this;
    }

    public TaxItemBuilder withRate(Rate rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }

    public TaxItemBuilder withAmount(TaxItemBuilderAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public TaxItemBuilder withConvertedAmount(TaxItemBuilderConvertedAmount convertedAmount) {
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        this.convertedAmount = JsonNullable.of(convertedAmount);
        return this;
    }

    public TaxItemBuilder withConvertedAmount(JsonNullable<? extends TaxItemBuilderConvertedAmount> convertedAmount) {
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        this.convertedAmount = convertedAmount;
        return this;
    }

    public TaxItemBuilder withCurrency(CurrencyEnum currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    public TaxItemBuilder withCurrency(JsonNullable<? extends CurrencyEnum> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public TaxItemBuilder withDestinationCurrency(CurrencyEnum destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = JsonNullable.of(destinationCurrency);
        return this;
    }

    public TaxItemBuilder withDestinationCurrency(JsonNullable<? extends CurrencyEnum> destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = destinationCurrency;
        return this;
    }

    public TaxItemBuilder withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    public TaxItemBuilder withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Deprecated: use `jurisdiction_type` instead
     */
    public TaxItemBuilder withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public TaxItemBuilder withType(TaxItemTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public TaxItemBuilder withType(Optional<? extends TaxItemTypeEnum> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public TaxItemBuilder withJurisdictionType(JurisdictionType jurisdictionType) {
        Utils.checkNotNull(jurisdictionType, "jurisdictionType");
        this.jurisdictionType = JsonNullable.of(jurisdictionType);
        return this;
    }

    public TaxItemBuilder withJurisdictionType(JsonNullable<? extends JurisdictionType> jurisdictionType) {
        Utils.checkNotNull(jurisdictionType, "jurisdictionType");
        this.jurisdictionType = jurisdictionType;
        return this;
    }

    public TaxItemBuilder withJurisdictionName(String jurisdictionName) {
        Utils.checkNotNull(jurisdictionName, "jurisdictionName");
        this.jurisdictionName = JsonNullable.of(jurisdictionName);
        return this;
    }

    public TaxItemBuilder withJurisdictionName(JsonNullable<String> jurisdictionName) {
        Utils.checkNotNull(jurisdictionName, "jurisdictionName");
        this.jurisdictionName = jurisdictionName;
        return this;
    }

    public TaxItemBuilder withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }


    public TaxItemBuilder withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxItemBuilder other = (TaxItemBuilder) o;
        return 
            Utils.enhancedDeepEquals(this.ruleId, other.ruleId) &&
            Utils.enhancedDeepEquals(this.rate, other.rate) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.convertedAmount, other.convertedAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.destinationCurrency, other.destinationCurrency) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.jurisdictionType, other.jurisdictionType) &&
            Utils.enhancedDeepEquals(this.jurisdictionName, other.jurisdictionName) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ruleId, rate, amount,
            convertedAmount, currency, destinationCurrency,
            externalId, name, type,
            jurisdictionType, jurisdictionName, organizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxItemBuilder.class,
                "ruleId", ruleId,
                "rate", rate,
                "amount", amount,
                "convertedAmount", convertedAmount,
                "currency", currency,
                "destinationCurrency", destinationCurrency,
                "externalId", externalId,
                "name", name,
                "type", type,
                "jurisdictionType", jurisdictionType,
                "jurisdictionName", jurisdictionName,
                "organizationId", organizationId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> ruleId;

        private Rate rate;

        private TaxItemBuilderAmount amount;

        private JsonNullable<? extends TaxItemBuilderConvertedAmount> convertedAmount = JsonNullable.undefined();

        private JsonNullable<? extends CurrencyEnum> currency = JsonNullable.undefined();

        private JsonNullable<? extends CurrencyEnum> destinationCurrency = JsonNullable.undefined();

        private JsonNullable<String> externalId = JsonNullable.undefined();

        private String name;

        private Optional<? extends TaxItemTypeEnum> type = Optional.empty();

        private JsonNullable<? extends JurisdictionType> jurisdictionType = JsonNullable.undefined();

        private JsonNullable<String> jurisdictionName = JsonNullable.undefined();

        private Optional<String> organizationId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The rule ID of the tax item
         */
        public Builder ruleId(String ruleId) {
            Utils.checkNotNull(ruleId, "ruleId");
            this.ruleId = Optional.ofNullable(ruleId);
            return this;
        }

        /**
         * The rule ID of the tax item
         */
        public Builder ruleId(Optional<String> ruleId) {
            Utils.checkNotNull(ruleId, "ruleId");
            this.ruleId = ruleId;
            return this;
        }


        public Builder rate(Rate rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }


        public Builder amount(TaxItemBuilderAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        public Builder convertedAmount(TaxItemBuilderConvertedAmount convertedAmount) {
            Utils.checkNotNull(convertedAmount, "convertedAmount");
            this.convertedAmount = JsonNullable.of(convertedAmount);
            return this;
        }

        public Builder convertedAmount(JsonNullable<? extends TaxItemBuilderConvertedAmount> convertedAmount) {
            Utils.checkNotNull(convertedAmount, "convertedAmount");
            this.convertedAmount = convertedAmount;
            return this;
        }


        public Builder currency(CurrencyEnum currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        public Builder currency(JsonNullable<? extends CurrencyEnum> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder destinationCurrency(CurrencyEnum destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = JsonNullable.of(destinationCurrency);
            return this;
        }

        public Builder destinationCurrency(JsonNullable<? extends CurrencyEnum> destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = destinationCurrency;
            return this;
        }


        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Deprecated: use `jurisdiction_type` instead
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder type(TaxItemTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends TaxItemTypeEnum> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder jurisdictionType(JurisdictionType jurisdictionType) {
            Utils.checkNotNull(jurisdictionType, "jurisdictionType");
            this.jurisdictionType = JsonNullable.of(jurisdictionType);
            return this;
        }

        public Builder jurisdictionType(JsonNullable<? extends JurisdictionType> jurisdictionType) {
            Utils.checkNotNull(jurisdictionType, "jurisdictionType");
            this.jurisdictionType = jurisdictionType;
            return this;
        }


        public Builder jurisdictionName(String jurisdictionName) {
            Utils.checkNotNull(jurisdictionName, "jurisdictionName");
            this.jurisdictionName = JsonNullable.of(jurisdictionName);
            return this;
        }

        public Builder jurisdictionName(JsonNullable<String> jurisdictionName) {
            Utils.checkNotNull(jurisdictionName, "jurisdictionName");
            this.jurisdictionName = jurisdictionName;
            return this;
        }


        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public TaxItemBuilder build() {
            if (ruleId == null) {
                ruleId = _SINGLETON_VALUE_RuleId.value();
            }

            return new TaxItemBuilder(
                ruleId, rate, amount,
                convertedAmount, currency, destinationCurrency,
                externalId, name, type,
                jurisdictionType, jurisdictionName, organizationId);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_RuleId =
                new LazySingletonValue<>(
                        "rule_id",
                        "\"0000\"",
                        new TypeReference<Optional<String>>() {});
    }
}
