/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class TaxItemEstimate {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    private Optional<String> rate;


    @JsonProperty("name")
    private String name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt")
    private Optional<Boolean> exempt;

    /**
     * We use this to understand the response from get_tax_items
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt_reason")
    private Optional<? extends TaxItemReturnReasonEnum> exemptReason;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rule")
    private Optional<String> rule;

    @JsonCreator
    public TaxItemEstimate(
            @JsonProperty("rate") Optional<String> rate,
            @JsonProperty("name") String name,
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("exempt") Optional<Boolean> exempt,
            @JsonProperty("exempt_reason") Optional<? extends TaxItemReturnReasonEnum> exemptReason,
            @JsonProperty("rule") Optional<String> rule) {
        Utils.checkNotNull(rate, "rate");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(exempt, "exempt");
        Utils.checkNotNull(exemptReason, "exemptReason");
        Utils.checkNotNull(rule, "rule");
        this.rate = rate;
        this.name = name;
        this.amount = amount;
        this.exempt = exempt;
        this.exemptReason = exemptReason;
        this.rule = rule;
    }
    
    public TaxItemEstimate(
            String name) {
        this(Optional.empty(), name, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> rate() {
        return rate;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    @JsonIgnore
    public Optional<Boolean> exempt() {
        return exempt;
    }

    /**
     * We use this to understand the response from get_tax_items
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxItemReturnReasonEnum> exemptReason() {
        return (Optional<TaxItemReturnReasonEnum>) exemptReason;
    }

    @JsonIgnore
    public Optional<String> rule() {
        return rule;
    }

    public static Builder builder() {
        return new Builder();
    }


    public TaxItemEstimate withRate(String rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = Optional.ofNullable(rate);
        return this;
    }


    public TaxItemEstimate withRate(Optional<String> rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }

    public TaxItemEstimate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public TaxItemEstimate withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    public TaxItemEstimate withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public TaxItemEstimate withExempt(boolean exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = Optional.ofNullable(exempt);
        return this;
    }


    public TaxItemEstimate withExempt(Optional<Boolean> exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = exempt;
        return this;
    }

    /**
     * We use this to understand the response from get_tax_items
     */
    public TaxItemEstimate withExemptReason(TaxItemReturnReasonEnum exemptReason) {
        Utils.checkNotNull(exemptReason, "exemptReason");
        this.exemptReason = Optional.ofNullable(exemptReason);
        return this;
    }


    /**
     * We use this to understand the response from get_tax_items
     */
    public TaxItemEstimate withExemptReason(Optional<? extends TaxItemReturnReasonEnum> exemptReason) {
        Utils.checkNotNull(exemptReason, "exemptReason");
        this.exemptReason = exemptReason;
        return this;
    }

    public TaxItemEstimate withRule(String rule) {
        Utils.checkNotNull(rule, "rule");
        this.rule = Optional.ofNullable(rule);
        return this;
    }


    public TaxItemEstimate withRule(Optional<String> rule) {
        Utils.checkNotNull(rule, "rule");
        this.rule = rule;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxItemEstimate other = (TaxItemEstimate) o;
        return 
            Utils.enhancedDeepEquals(this.rate, other.rate) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.exempt, other.exempt) &&
            Utils.enhancedDeepEquals(this.exemptReason, other.exemptReason) &&
            Utils.enhancedDeepEquals(this.rule, other.rule);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            rate, name, amount,
            exempt, exemptReason, rule);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxItemEstimate.class,
                "rate", rate,
                "name", name,
                "amount", amount,
                "exempt", exempt,
                "exemptReason", exemptReason,
                "rule", rule);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> rate;

        private String name;

        private Optional<String> amount;

        private Optional<Boolean> exempt;

        private Optional<? extends TaxItemReturnReasonEnum> exemptReason = Optional.empty();

        private Optional<String> rule = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder rate(String rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = Optional.ofNullable(rate);
            return this;
        }

        public Builder rate(Optional<String> rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        public Builder exempt(boolean exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = Optional.ofNullable(exempt);
            return this;
        }

        public Builder exempt(Optional<Boolean> exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = exempt;
            return this;
        }


        /**
         * We use this to understand the response from get_tax_items
         */
        public Builder exemptReason(TaxItemReturnReasonEnum exemptReason) {
            Utils.checkNotNull(exemptReason, "exemptReason");
            this.exemptReason = Optional.ofNullable(exemptReason);
            return this;
        }

        /**
         * We use this to understand the response from get_tax_items
         */
        public Builder exemptReason(Optional<? extends TaxItemReturnReasonEnum> exemptReason) {
            Utils.checkNotNull(exemptReason, "exemptReason");
            this.exemptReason = exemptReason;
            return this;
        }


        public Builder rule(String rule) {
            Utils.checkNotNull(rule, "rule");
            this.rule = Optional.ofNullable(rule);
            return this;
        }

        public Builder rule(Optional<String> rule) {
            Utils.checkNotNull(rule, "rule");
            this.rule = rule;
            return this;
        }

        public TaxItemEstimate build() {
            if (rate == null) {
                rate = _SINGLETON_VALUE_Rate.value();
            }
            if (amount == null) {
                amount = _SINGLETON_VALUE_Amount.value();
            }
            if (exempt == null) {
                exempt = _SINGLETON_VALUE_Exempt.value();
            }

            return new TaxItemEstimate(
                rate, name, amount,
                exempt, exemptReason, rule);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Rate =
                new LazySingletonValue<>(
                        "rate",
                        "\"0.0\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Amount =
                new LazySingletonValue<>(
                        "amount",
                        "\"0.0\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Exempt =
                new LazySingletonValue<>(
                        "exempt",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
