/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * TransactionAddressPublic
 * 
 * <p>Public address class for transaction addresses
 */
public class TransactionAddressPublic {
    /**
     * Phone number associated with the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * Primary street address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_1")
    private Optional<String> street1;

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_2")
    private Optional<String> street2;

    /**
     * City where the customer resides.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * County or district of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private Optional<String> county;

    /**
     * State or province of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    /**
     * ZIP or Postal code of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private Optional<String> postalCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<? extends CountryCodeEnum> country;

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_address")
    private Optional<String> fullAddress;


    @JsonProperty("type")
    private AddressType type;

    @JsonCreator
    public TransactionAddressPublic(
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("street_1") Optional<String> street1,
            @JsonProperty("street_2") Optional<String> street2,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("county") Optional<String> county,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("postal_code") Optional<String> postalCode,
            @JsonProperty("country") Optional<? extends CountryCodeEnum> country,
            @JsonProperty("full_address") Optional<String> fullAddress,
            @JsonProperty("type") AddressType type) {
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(county, "county");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(fullAddress, "fullAddress");
        Utils.checkNotNull(type, "type");
        this.phone = phone;
        this.street1 = street1;
        this.street2 = street2;
        this.city = city;
        this.county = county;
        this.state = state;
        this.postalCode = postalCode;
        this.country = country;
        this.fullAddress = fullAddress;
        this.type = type;
    }
    
    public TransactionAddressPublic(
            AddressType type) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            type);
    }

    /**
     * Phone number associated with the address.
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * Primary street address.
     */
    @JsonIgnore
    public Optional<String> street1() {
        return street1;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    @JsonIgnore
    public Optional<String> street2() {
        return street2;
    }

    /**
     * City where the customer resides.
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * County or district of the customer.
     */
    @JsonIgnore
    public Optional<String> county() {
        return county;
    }

    /**
     * State or province of the customer.
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountryCodeEnum> country() {
        return (Optional<CountryCodeEnum>) country;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    @JsonIgnore
    public Optional<String> fullAddress() {
        return fullAddress;
    }

    @JsonIgnore
    public AddressType type() {
        return type;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Phone number associated with the address.
     */
    public TransactionAddressPublic withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }


    /**
     * Phone number associated with the address.
     */
    public TransactionAddressPublic withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * Primary street address.
     */
    public TransactionAddressPublic withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = Optional.ofNullable(street1);
        return this;
    }


    /**
     * Primary street address.
     */
    public TransactionAddressPublic withStreet1(Optional<String> street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    public TransactionAddressPublic withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = Optional.ofNullable(street2);
        return this;
    }


    /**
     * Additional street address details, such as an apartment or suite number.
     */
    public TransactionAddressPublic withStreet2(Optional<String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    /**
     * City where the customer resides.
     */
    public TransactionAddressPublic withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }


    /**
     * City where the customer resides.
     */
    public TransactionAddressPublic withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * County or district of the customer.
     */
    public TransactionAddressPublic withCounty(String county) {
        Utils.checkNotNull(county, "county");
        this.county = Optional.ofNullable(county);
        return this;
    }


    /**
     * County or district of the customer.
     */
    public TransactionAddressPublic withCounty(Optional<String> county) {
        Utils.checkNotNull(county, "county");
        this.county = county;
        return this;
    }

    /**
     * State or province of the customer.
     */
    public TransactionAddressPublic withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }


    /**
     * State or province of the customer.
     */
    public TransactionAddressPublic withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    public TransactionAddressPublic withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }


    /**
     * ZIP or Postal code of the customer.
     */
    public TransactionAddressPublic withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    public TransactionAddressPublic withCountry(CountryCodeEnum country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    public TransactionAddressPublic withCountry(Optional<? extends CountryCodeEnum> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    public TransactionAddressPublic withFullAddress(String fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = Optional.ofNullable(fullAddress);
        return this;
    }


    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    public TransactionAddressPublic withFullAddress(Optional<String> fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = fullAddress;
        return this;
    }

    public TransactionAddressPublic withType(AddressType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionAddressPublic other = (TransactionAddressPublic) o;
        return 
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.street1, other.street1) &&
            Utils.enhancedDeepEquals(this.street2, other.street2) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.county, other.county) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.fullAddress, other.fullAddress) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            phone, street1, street2,
            city, county, state,
            postalCode, country, fullAddress,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionAddressPublic.class,
                "phone", phone,
                "street1", street1,
                "street2", street2,
                "city", city,
                "county", county,
                "state", state,
                "postalCode", postalCode,
                "country", country,
                "fullAddress", fullAddress,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> phone = Optional.empty();

        private Optional<String> street1 = Optional.empty();

        private Optional<String> street2 = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> county = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        private Optional<? extends CountryCodeEnum> country = Optional.empty();

        private Optional<String> fullAddress = Optional.empty();

        private AddressType type;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Phone number associated with the address.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Phone number associated with the address.
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }


        /**
         * Primary street address.
         */
        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = Optional.ofNullable(street1);
            return this;
        }

        /**
         * Primary street address.
         */
        public Builder street1(Optional<String> street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }


        /**
         * Additional street address details, such as an apartment or suite number.
         */
        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = Optional.ofNullable(street2);
            return this;
        }

        /**
         * Additional street address details, such as an apartment or suite number.
         */
        public Builder street2(Optional<String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }


        /**
         * City where the customer resides.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * City where the customer resides.
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * County or district of the customer.
         */
        public Builder county(String county) {
            Utils.checkNotNull(county, "county");
            this.county = Optional.ofNullable(county);
            return this;
        }

        /**
         * County or district of the customer.
         */
        public Builder county(Optional<String> county) {
            Utils.checkNotNull(county, "county");
            this.county = county;
            return this;
        }


        /**
         * State or province of the customer.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * State or province of the customer.
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * ZIP or Postal code of the customer.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * ZIP or Postal code of the customer.
         */
        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        public Builder country(CountryCodeEnum country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<? extends CountryCodeEnum> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Complete address string of the customer, which can be used as an alternative to individual fields.
         */
        public Builder fullAddress(String fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = Optional.ofNullable(fullAddress);
            return this;
        }

        /**
         * Complete address string of the customer, which can be used as an alternative to individual fields.
         */
        public Builder fullAddress(Optional<String> fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = fullAddress;
            return this;
        }


        public Builder type(AddressType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public TransactionAddressPublic build() {

            return new TransactionAddressPublic(
                phone, street1, street2,
                city, county, state,
                postalCode, country, fullAddress,
                type);
        }

    }
}
