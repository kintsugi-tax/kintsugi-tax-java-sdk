/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransactionAddressReadOutput {
    /**
     * Phone number associated with the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<String> phone;

    /**
     * Primary street address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_1")
    private JsonNullable<String> street1;

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_2")
    private JsonNullable<String> street2;

    /**
     * City where the customer resides.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * County or district of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private JsonNullable<String> county;

    /**
     * State or province of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    /**
     * ZIP or Postal code of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<? extends CountryCodeEnum> country;

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_address")
    private JsonNullable<String> fullAddress;


    @JsonProperty("type")
    private AddressType type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends AddressStatus> status;

    /**
     * Unique identifier of the address being updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * ID of the transaction associated with the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_id")
    private JsonNullable<String> transactionId;

    /**
     * ID of the connection associated with the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_id")
    private JsonNullable<String> connectionId;

    @JsonCreator
    public TransactionAddressReadOutput(
            @JsonProperty("phone") JsonNullable<String> phone,
            @JsonProperty("street_1") JsonNullable<String> street1,
            @JsonProperty("street_2") JsonNullable<String> street2,
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("county") JsonNullable<String> county,
            @JsonProperty("state") JsonNullable<String> state,
            @JsonProperty("postal_code") JsonNullable<String> postalCode,
            @JsonProperty("country") JsonNullable<? extends CountryCodeEnum> country,
            @JsonProperty("full_address") JsonNullable<String> fullAddress,
            @JsonProperty("type") AddressType type,
            @JsonProperty("status") Optional<? extends AddressStatus> status,
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("transaction_id") JsonNullable<String> transactionId,
            @JsonProperty("connection_id") JsonNullable<String> connectionId) {
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(county, "county");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(fullAddress, "fullAddress");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(transactionId, "transactionId");
        Utils.checkNotNull(connectionId, "connectionId");
        this.phone = phone;
        this.street1 = street1;
        this.street2 = street2;
        this.city = city;
        this.county = county;
        this.state = state;
        this.postalCode = postalCode;
        this.country = country;
        this.fullAddress = fullAddress;
        this.type = type;
        this.status = status;
        this.id = id;
        this.transactionId = transactionId;
        this.connectionId = connectionId;
    }
    
    public TransactionAddressReadOutput(
            AddressType type) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            type, Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Phone number associated with the address.
     */
    @JsonIgnore
    public JsonNullable<String> phone() {
        return phone;
    }

    /**
     * Primary street address.
     */
    @JsonIgnore
    public JsonNullable<String> street1() {
        return street1;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    @JsonIgnore
    public JsonNullable<String> street2() {
        return street2;
    }

    /**
     * City where the customer resides.
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    /**
     * County or district of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> county() {
        return county;
    }

    /**
     * State or province of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> state() {
        return state;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> postalCode() {
        return postalCode;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CountryCodeEnum> country() {
        return (JsonNullable<CountryCodeEnum>) country;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    @JsonIgnore
    public JsonNullable<String> fullAddress() {
        return fullAddress;
    }

    @JsonIgnore
    public AddressType type() {
        return type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AddressStatus> status() {
        return (Optional<AddressStatus>) status;
    }

    /**
     * Unique identifier of the address being updated.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * ID of the transaction associated with the address.
     */
    @JsonIgnore
    public JsonNullable<String> transactionId() {
        return transactionId;
    }

    /**
     * ID of the connection associated with the address.
     */
    @JsonIgnore
    public JsonNullable<String> connectionId() {
        return connectionId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Phone number associated with the address.
     */
    public TransactionAddressReadOutput withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    /**
     * Phone number associated with the address.
     */
    public TransactionAddressReadOutput withPhone(JsonNullable<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * Primary street address.
     */
    public TransactionAddressReadOutput withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = JsonNullable.of(street1);
        return this;
    }

    /**
     * Primary street address.
     */
    public TransactionAddressReadOutput withStreet1(JsonNullable<String> street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    public TransactionAddressReadOutput withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = JsonNullable.of(street2);
        return this;
    }

    /**
     * Additional street address details, such as an apartment or suite number.
     */
    public TransactionAddressReadOutput withStreet2(JsonNullable<String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    /**
     * City where the customer resides.
     */
    public TransactionAddressReadOutput withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * City where the customer resides.
     */
    public TransactionAddressReadOutput withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * County or district of the customer.
     */
    public TransactionAddressReadOutput withCounty(String county) {
        Utils.checkNotNull(county, "county");
        this.county = JsonNullable.of(county);
        return this;
    }

    /**
     * County or district of the customer.
     */
    public TransactionAddressReadOutput withCounty(JsonNullable<String> county) {
        Utils.checkNotNull(county, "county");
        this.county = county;
        return this;
    }

    /**
     * State or province of the customer.
     */
    public TransactionAddressReadOutput withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = JsonNullable.of(state);
        return this;
    }

    /**
     * State or province of the customer.
     */
    public TransactionAddressReadOutput withState(JsonNullable<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    public TransactionAddressReadOutput withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }

    /**
     * ZIP or Postal code of the customer.
     */
    public TransactionAddressReadOutput withPostalCode(JsonNullable<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    public TransactionAddressReadOutput withCountry(CountryCodeEnum country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    public TransactionAddressReadOutput withCountry(JsonNullable<? extends CountryCodeEnum> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    public TransactionAddressReadOutput withFullAddress(String fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = JsonNullable.of(fullAddress);
        return this;
    }

    /**
     * Complete address string of the customer, which can be used as an alternative to individual fields.
     */
    public TransactionAddressReadOutput withFullAddress(JsonNullable<String> fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = fullAddress;
        return this;
    }

    public TransactionAddressReadOutput withType(AddressType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public TransactionAddressReadOutput withStatus(AddressStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public TransactionAddressReadOutput withStatus(Optional<? extends AddressStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Unique identifier of the address being updated.
     */
    public TransactionAddressReadOutput withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier of the address being updated.
     */
    public TransactionAddressReadOutput withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * ID of the transaction associated with the address.
     */
    public TransactionAddressReadOutput withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = JsonNullable.of(transactionId);
        return this;
    }

    /**
     * ID of the transaction associated with the address.
     */
    public TransactionAddressReadOutput withTransactionId(JsonNullable<String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    /**
     * ID of the connection associated with the address.
     */
    public TransactionAddressReadOutput withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = JsonNullable.of(connectionId);
        return this;
    }

    /**
     * ID of the connection associated with the address.
     */
    public TransactionAddressReadOutput withConnectionId(JsonNullable<String> connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionAddressReadOutput other = (TransactionAddressReadOutput) o;
        return 
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.street1, other.street1) &&
            Utils.enhancedDeepEquals(this.street2, other.street2) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.county, other.county) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.fullAddress, other.fullAddress) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.transactionId, other.transactionId) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            phone, street1, street2,
            city, county, state,
            postalCode, country, fullAddress,
            type, status, id,
            transactionId, connectionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionAddressReadOutput.class,
                "phone", phone,
                "street1", street1,
                "street2", street2,
                "city", city,
                "county", county,
                "state", state,
                "postalCode", postalCode,
                "country", country,
                "fullAddress", fullAddress,
                "type", type,
                "status", status,
                "id", id,
                "transactionId", transactionId,
                "connectionId", connectionId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> phone = JsonNullable.undefined();

        private JsonNullable<String> street1 = JsonNullable.undefined();

        private JsonNullable<String> street2 = JsonNullable.undefined();

        private JsonNullable<String> city = JsonNullable.undefined();

        private JsonNullable<String> county = JsonNullable.undefined();

        private JsonNullable<String> state = JsonNullable.undefined();

        private JsonNullable<String> postalCode = JsonNullable.undefined();

        private JsonNullable<? extends CountryCodeEnum> country = JsonNullable.undefined();

        private JsonNullable<String> fullAddress = JsonNullable.undefined();

        private AddressType type;

        private Optional<? extends AddressStatus> status = Optional.empty();

        private JsonNullable<String> id = JsonNullable.undefined();

        private JsonNullable<String> transactionId = JsonNullable.undefined();

        private JsonNullable<String> connectionId = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Phone number associated with the address.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        /**
         * Phone number associated with the address.
         */
        public Builder phone(JsonNullable<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }


        /**
         * Primary street address.
         */
        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = JsonNullable.of(street1);
            return this;
        }

        /**
         * Primary street address.
         */
        public Builder street1(JsonNullable<String> street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }


        /**
         * Additional street address details, such as an apartment or suite number.
         */
        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = JsonNullable.of(street2);
            return this;
        }

        /**
         * Additional street address details, such as an apartment or suite number.
         */
        public Builder street2(JsonNullable<String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }


        /**
         * City where the customer resides.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * City where the customer resides.
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * County or district of the customer.
         */
        public Builder county(String county) {
            Utils.checkNotNull(county, "county");
            this.county = JsonNullable.of(county);
            return this;
        }

        /**
         * County or district of the customer.
         */
        public Builder county(JsonNullable<String> county) {
            Utils.checkNotNull(county, "county");
            this.county = county;
            return this;
        }


        /**
         * State or province of the customer.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * State or province of the customer.
         */
        public Builder state(JsonNullable<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * ZIP or Postal code of the customer.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * ZIP or Postal code of the customer.
         */
        public Builder postalCode(JsonNullable<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        /**
         * Country code in ISO 3166-1 alpha-2 format
         */
        public Builder country(CountryCodeEnum country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country code in ISO 3166-1 alpha-2 format
         */
        public Builder country(JsonNullable<? extends CountryCodeEnum> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Complete address string of the customer, which can be used as an alternative to individual fields.
         */
        public Builder fullAddress(String fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = JsonNullable.of(fullAddress);
            return this;
        }

        /**
         * Complete address string of the customer, which can be used as an alternative to individual fields.
         */
        public Builder fullAddress(JsonNullable<String> fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = fullAddress;
            return this;
        }


        public Builder type(AddressType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder status(AddressStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends AddressStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Unique identifier of the address being updated.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier of the address being updated.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * ID of the transaction associated with the address.
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = JsonNullable.of(transactionId);
            return this;
        }

        /**
         * ID of the transaction associated with the address.
         */
        public Builder transactionId(JsonNullable<String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }


        /**
         * ID of the connection associated with the address.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = JsonNullable.of(connectionId);
            return this;
        }

        /**
         * ID of the connection associated with the address.
         */
        public Builder connectionId(JsonNullable<String> connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        public TransactionAddressReadOutput build() {

            return new TransactionAddressReadOutput(
                phone, street1, street2,
                city, county, state,
                postalCode, country, fullAddress,
                type, status, id,
                transactionId, connectionId);
        }

    }
}
