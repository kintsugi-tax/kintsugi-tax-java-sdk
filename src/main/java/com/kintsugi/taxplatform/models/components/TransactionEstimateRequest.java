/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TransactionEstimateRequest
 * 
 * <p>Request model for tax estimation, including all fields from TransactionEstimateBase
 * and an additional field to simulate nexus being met.
 */
public class TransactionEstimateRequest {
    /**
     * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Unique identifier of this transaction in the source system.
     */
    @JsonProperty("external_id")
    private String externalId;

    /**
     * Total amount of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<? extends TotalAmountOfTheTransactionAfterDiscounts> totalAmount;


    @JsonProperty("currency")
    private CurrencyEnum currency;

    /**
     * An optional description of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    @Deprecated
    private JsonNullable<? extends SourceEnum> source;

    /**
     * Indicates if the transaction involves a marketplace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketplace")
    private JsonNullable<Boolean> marketplace;

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends CustomerBaseInput> customer;

    /**
     * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
     */
    @JsonProperty("addresses")
    private List<TransactionEstimateRequestAddress> addresses;

    /**
     * List of items involved in the transaction.
     */
    @JsonProperty("transaction_items")
    private List<TransactionItemEstimateBase> transactionItems;

    /**
     * If True, assumes active registration is met for tax estimation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simulate_active_registration")
    private JsonNullable<Boolean> simulateActiveRegistration;

    /**
     * Use simulate_active_registration instead.
     *         This field will be removed in future releases.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simulate_nexus_met")
    @Deprecated
    private JsonNullable<Boolean> simulateNexusMet;

    @JsonCreator
    public TransactionEstimateRequest(
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("external_id") String externalId,
            @JsonProperty("total_amount") Optional<? extends TotalAmountOfTheTransactionAfterDiscounts> totalAmount,
            @JsonProperty("currency") CurrencyEnum currency,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("source") JsonNullable<? extends SourceEnum> source,
            @JsonProperty("marketplace") JsonNullable<Boolean> marketplace,
            @JsonProperty("customer") JsonNullable<? extends CustomerBaseInput> customer,
            @JsonProperty("addresses") List<TransactionEstimateRequestAddress> addresses,
            @JsonProperty("transaction_items") List<TransactionItemEstimateBase> transactionItems,
            @JsonProperty("simulate_active_registration") JsonNullable<Boolean> simulateActiveRegistration,
            @JsonProperty("simulate_nexus_met") JsonNullable<Boolean> simulateNexusMet) {
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(marketplace, "marketplace");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(transactionItems, "transactionItems");
        Utils.checkNotNull(simulateActiveRegistration, "simulateActiveRegistration");
        Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
        this.date = date;
        this.externalId = externalId;
        this.totalAmount = totalAmount;
        this.currency = currency;
        this.description = description;
        this.source = source;
        this.marketplace = marketplace;
        this.customer = customer;
        this.addresses = addresses;
        this.transactionItems = transactionItems;
        this.simulateActiveRegistration = simulateActiveRegistration;
        this.simulateNexusMet = simulateNexusMet;
    }
    
    public TransactionEstimateRequest(
            OffsetDateTime date,
            String externalId,
            CurrencyEnum currency,
            List<TransactionEstimateRequestAddress> addresses,
            List<TransactionItemEstimateBase> transactionItems) {
        this(date, externalId, Optional.empty(),
            currency, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), addresses,
            transactionItems, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Unique identifier of this transaction in the source system.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * Total amount of the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TotalAmountOfTheTransactionAfterDiscounts> totalAmount() {
        return (Optional<TotalAmountOfTheTransactionAfterDiscounts>) totalAmount;
    }

    @JsonIgnore
    public CurrencyEnum currency() {
        return currency;
    }

    /**
     * An optional description of the transaction.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SourceEnum> source() {
        return (JsonNullable<SourceEnum>) source;
    }

    /**
     * Indicates if the transaction involves a marketplace.
     */
    @JsonIgnore
    public JsonNullable<Boolean> marketplace() {
        return marketplace;
    }

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomerBaseInput> customer() {
        return (JsonNullable<CustomerBaseInput>) customer;
    }

    /**
     * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
     */
    @JsonIgnore
    public List<TransactionEstimateRequestAddress> addresses() {
        return addresses;
    }

    /**
     * List of items involved in the transaction.
     */
    @JsonIgnore
    public List<TransactionItemEstimateBase> transactionItems() {
        return transactionItems;
    }

    /**
     * If True, assumes active registration is met for tax estimation.
     */
    @JsonIgnore
    public JsonNullable<Boolean> simulateActiveRegistration() {
        return simulateActiveRegistration;
    }

    /**
     * Use simulate_active_registration instead.
     *         This field will be removed in future releases.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<Boolean> simulateNexusMet() {
        return simulateNexusMet;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
     */
    public TransactionEstimateRequest withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Unique identifier of this transaction in the source system.
     */
    public TransactionEstimateRequest withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Total amount of the transaction.
     */
    public TransactionEstimateRequest withTotalAmount(TotalAmountOfTheTransactionAfterDiscounts totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    /**
     * Total amount of the transaction.
     */
    public TransactionEstimateRequest withTotalAmount(Optional<? extends TotalAmountOfTheTransactionAfterDiscounts> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public TransactionEstimateRequest withCurrency(CurrencyEnum currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * An optional description of the transaction.
     */
    public TransactionEstimateRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * An optional description of the transaction.
     */
    public TransactionEstimateRequest withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public TransactionEstimateRequest withSource(SourceEnum source) {
        Utils.checkNotNull(source, "source");
        this.source = JsonNullable.of(source);
        return this;
    }

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public TransactionEstimateRequest withSource(JsonNullable<? extends SourceEnum> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Indicates if the transaction involves a marketplace.
     */
    public TransactionEstimateRequest withMarketplace(boolean marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = JsonNullable.of(marketplace);
        return this;
    }

    /**
     * Indicates if the transaction involves a marketplace.
     */
    public TransactionEstimateRequest withMarketplace(JsonNullable<Boolean> marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     */
    public TransactionEstimateRequest withCustomer(CustomerBaseInput customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     */
    public TransactionEstimateRequest withCustomer(JsonNullable<? extends CustomerBaseInput> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
     */
    public TransactionEstimateRequest withAddresses(List<TransactionEstimateRequestAddress> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * List of items involved in the transaction.
     */
    public TransactionEstimateRequest withTransactionItems(List<TransactionItemEstimateBase> transactionItems) {
        Utils.checkNotNull(transactionItems, "transactionItems");
        this.transactionItems = transactionItems;
        return this;
    }

    /**
     * If True, assumes active registration is met for tax estimation.
     */
    public TransactionEstimateRequest withSimulateActiveRegistration(boolean simulateActiveRegistration) {
        Utils.checkNotNull(simulateActiveRegistration, "simulateActiveRegistration");
        this.simulateActiveRegistration = JsonNullable.of(simulateActiveRegistration);
        return this;
    }

    /**
     * If True, assumes active registration is met for tax estimation.
     */
    public TransactionEstimateRequest withSimulateActiveRegistration(JsonNullable<Boolean> simulateActiveRegistration) {
        Utils.checkNotNull(simulateActiveRegistration, "simulateActiveRegistration");
        this.simulateActiveRegistration = simulateActiveRegistration;
        return this;
    }

    /**
     * Use simulate_active_registration instead.
     *         This field will be removed in future releases.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public TransactionEstimateRequest withSimulateNexusMet(boolean simulateNexusMet) {
        Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
        this.simulateNexusMet = JsonNullable.of(simulateNexusMet);
        return this;
    }

    /**
     * Use simulate_active_registration instead.
     *         This field will be removed in future releases.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public TransactionEstimateRequest withSimulateNexusMet(JsonNullable<Boolean> simulateNexusMet) {
        Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
        this.simulateNexusMet = simulateNexusMet;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionEstimateRequest other = (TransactionEstimateRequest) o;
        return 
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.marketplace, other.marketplace) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.transactionItems, other.transactionItems) &&
            Utils.enhancedDeepEquals(this.simulateActiveRegistration, other.simulateActiveRegistration) &&
            Utils.enhancedDeepEquals(this.simulateNexusMet, other.simulateNexusMet);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            date, externalId, totalAmount,
            currency, description, source,
            marketplace, customer, addresses,
            transactionItems, simulateActiveRegistration, simulateNexusMet);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionEstimateRequest.class,
                "date", date,
                "externalId", externalId,
                "totalAmount", totalAmount,
                "currency", currency,
                "description", description,
                "source", source,
                "marketplace", marketplace,
                "customer", customer,
                "addresses", addresses,
                "transactionItems", transactionItems,
                "simulateActiveRegistration", simulateActiveRegistration,
                "simulateNexusMet", simulateNexusMet);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OffsetDateTime date;

        private String externalId;

        private Optional<? extends TotalAmountOfTheTransactionAfterDiscounts> totalAmount = Optional.empty();

        private CurrencyEnum currency;

        private JsonNullable<String> description = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends SourceEnum> source = JsonNullable.undefined();

        private JsonNullable<Boolean> marketplace = JsonNullable.undefined();

        private JsonNullable<? extends CustomerBaseInput> customer = JsonNullable.undefined();

        private List<TransactionEstimateRequestAddress> addresses;

        private List<TransactionItemEstimateBase> transactionItems;

        private JsonNullable<Boolean> simulateActiveRegistration = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<Boolean> simulateNexusMet = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Unique identifier of this transaction in the source system.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Total amount of the transaction.
         */
        public Builder totalAmount(TotalAmountOfTheTransactionAfterDiscounts totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * Total amount of the transaction.
         */
        public Builder totalAmount(Optional<? extends TotalAmountOfTheTransactionAfterDiscounts> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        public Builder currency(CurrencyEnum currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * An optional description of the transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * An optional description of the transaction.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder source(SourceEnum source) {
            Utils.checkNotNull(source, "source");
            this.source = JsonNullable.of(source);
            return this;
        }

        /**
         * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder source(JsonNullable<? extends SourceEnum> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        /**
         * Indicates if the transaction involves a marketplace.
         */
        public Builder marketplace(boolean marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = JsonNullable.of(marketplace);
            return this;
        }

        /**
         * Indicates if the transaction involves a marketplace.
         */
        public Builder marketplace(JsonNullable<Boolean> marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = marketplace;
            return this;
        }


        /**
         * Details about the customer. If the customer is not found, it will be ignored.
         */
        public Builder customer(CustomerBaseInput customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * Details about the customer. If the customer is not found, it will be ignored.
         */
        public Builder customer(JsonNullable<? extends CustomerBaseInput> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }


        /**
         * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
         */
        public Builder addresses(List<TransactionEstimateRequestAddress> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        /**
         * List of items involved in the transaction.
         */
        public Builder transactionItems(List<TransactionItemEstimateBase> transactionItems) {
            Utils.checkNotNull(transactionItems, "transactionItems");
            this.transactionItems = transactionItems;
            return this;
        }


        /**
         * If True, assumes active registration is met for tax estimation.
         */
        public Builder simulateActiveRegistration(boolean simulateActiveRegistration) {
            Utils.checkNotNull(simulateActiveRegistration, "simulateActiveRegistration");
            this.simulateActiveRegistration = JsonNullable.of(simulateActiveRegistration);
            return this;
        }

        /**
         * If True, assumes active registration is met for tax estimation.
         */
        public Builder simulateActiveRegistration(JsonNullable<Boolean> simulateActiveRegistration) {
            Utils.checkNotNull(simulateActiveRegistration, "simulateActiveRegistration");
            this.simulateActiveRegistration = simulateActiveRegistration;
            return this;
        }


        /**
         * Use simulate_active_registration instead.
         *         This field will be removed in future releases.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder simulateNexusMet(boolean simulateNexusMet) {
            Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
            this.simulateNexusMet = JsonNullable.of(simulateNexusMet);
            return this;
        }

        /**
         * Use simulate_active_registration instead.
         *         This field will be removed in future releases.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder simulateNexusMet(JsonNullable<Boolean> simulateNexusMet) {
            Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
            this.simulateNexusMet = simulateNexusMet;
            return this;
        }

        public TransactionEstimateRequest build() {

            return new TransactionEstimateRequest(
                date, externalId, totalAmount,
                currency, description, source,
                marketplace, customer, addresses,
                transactionItems, simulateActiveRegistration, simulateNexusMet);
        }

    }
}
