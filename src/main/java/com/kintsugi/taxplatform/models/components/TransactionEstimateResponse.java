/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransactionEstimateResponse {
    /**
     * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Unique identifier of this transaction in the source system.
     */
    @JsonProperty("external_id")
    private String externalId;

    /**
     * Total amount of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<String> totalAmount;


    @JsonProperty("currency")
    private CurrencyEnum currency;

    /**
     * An optional description of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    @Deprecated
    private JsonNullable<? extends SourceEnum> source;

    /**
     * Indicates if the transaction involves a marketplace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketplace")
    private JsonNullable<Boolean> marketplace;


    @JsonProperty("transaction_items")
    private List<TransactionItemEstimateResponse> transactionItems;

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends CustomerBase> customer;

    /**
     * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
     */
    @JsonProperty("addresses")
    private List<TransactionEstimateResponseAddress> addresses;

    /**
     * The total amount of tax determined for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_amount_calculated")
    private Optional<String> totalTaxAmountCalculated;

    /**
     * The taxable amount for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private Optional<String> taxableAmount;

    /**
     * The calculated tax rate for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_calculated")
    private Optional<String> taxRateCalculated;

    /**
     * Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nexus_met")
    @Deprecated
    private Optional<Boolean> nexusMet;

    /**
     * Indicates if there is an active registration for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_active_registration")
    private Optional<Boolean> hasActiveRegistration;

    @JsonCreator
    public TransactionEstimateResponse(
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("external_id") String externalId,
            @JsonProperty("total_amount") Optional<String> totalAmount,
            @JsonProperty("currency") CurrencyEnum currency,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("source") JsonNullable<? extends SourceEnum> source,
            @JsonProperty("marketplace") JsonNullable<Boolean> marketplace,
            @JsonProperty("transaction_items") List<TransactionItemEstimateResponse> transactionItems,
            @JsonProperty("customer") JsonNullable<? extends CustomerBase> customer,
            @JsonProperty("addresses") List<TransactionEstimateResponseAddress> addresses,
            @JsonProperty("total_tax_amount_calculated") Optional<String> totalTaxAmountCalculated,
            @JsonProperty("taxable_amount") Optional<String> taxableAmount,
            @JsonProperty("tax_rate_calculated") Optional<String> taxRateCalculated,
            @JsonProperty("nexus_met") Optional<Boolean> nexusMet,
            @JsonProperty("has_active_registration") Optional<Boolean> hasActiveRegistration) {
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(marketplace, "marketplace");
        Utils.checkNotNull(transactionItems, "transactionItems");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        Utils.checkNotNull(nexusMet, "nexusMet");
        Utils.checkNotNull(hasActiveRegistration, "hasActiveRegistration");
        this.date = date;
        this.externalId = externalId;
        this.totalAmount = totalAmount;
        this.currency = currency;
        this.description = description;
        this.source = source;
        this.marketplace = marketplace;
        this.transactionItems = transactionItems;
        this.customer = customer;
        this.addresses = addresses;
        this.totalTaxAmountCalculated = totalTaxAmountCalculated;
        this.taxableAmount = taxableAmount;
        this.taxRateCalculated = taxRateCalculated;
        this.nexusMet = nexusMet;
        this.hasActiveRegistration = hasActiveRegistration;
    }
    
    public TransactionEstimateResponse(
            OffsetDateTime date,
            String externalId,
            CurrencyEnum currency,
            List<TransactionItemEstimateResponse> transactionItems,
            List<TransactionEstimateResponseAddress> addresses) {
        this(date, externalId, Optional.empty(),
            currency, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), transactionItems, JsonNullable.undefined(),
            addresses, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Unique identifier of this transaction in the source system.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * Total amount of the transaction.
     */
    @JsonIgnore
    public Optional<String> totalAmount() {
        return totalAmount;
    }

    @JsonIgnore
    public CurrencyEnum currency() {
        return currency;
    }

    /**
     * An optional description of the transaction.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SourceEnum> source() {
        return (JsonNullable<SourceEnum>) source;
    }

    /**
     * Indicates if the transaction involves a marketplace.
     */
    @JsonIgnore
    public JsonNullable<Boolean> marketplace() {
        return marketplace;
    }

    @JsonIgnore
    public List<TransactionItemEstimateResponse> transactionItems() {
        return transactionItems;
    }

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomerBase> customer() {
        return (JsonNullable<CustomerBase>) customer;
    }

    /**
     * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
     */
    @JsonIgnore
    public List<TransactionEstimateResponseAddress> addresses() {
        return addresses;
    }

    /**
     * The total amount of tax determined for the transaction.
     */
    @JsonIgnore
    public Optional<String> totalTaxAmountCalculated() {
        return totalTaxAmountCalculated;
    }

    /**
     * The taxable amount for the transaction.
     */
    @JsonIgnore
    public Optional<String> taxableAmount() {
        return taxableAmount;
    }

    /**
     * The calculated tax rate for the transaction.
     */
    @JsonIgnore
    public Optional<String> taxRateCalculated() {
        return taxRateCalculated;
    }

    /**
     * Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> nexusMet() {
        return nexusMet;
    }

    /**
     * Indicates if there is an active registration for the transaction.
     */
    @JsonIgnore
    public Optional<Boolean> hasActiveRegistration() {
        return hasActiveRegistration;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
     */
    public TransactionEstimateResponse withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Unique identifier of this transaction in the source system.
     */
    public TransactionEstimateResponse withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Total amount of the transaction.
     */
    public TransactionEstimateResponse withTotalAmount(String totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    /**
     * Total amount of the transaction.
     */
    public TransactionEstimateResponse withTotalAmount(Optional<String> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public TransactionEstimateResponse withCurrency(CurrencyEnum currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * An optional description of the transaction.
     */
    public TransactionEstimateResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * An optional description of the transaction.
     */
    public TransactionEstimateResponse withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public TransactionEstimateResponse withSource(SourceEnum source) {
        Utils.checkNotNull(source, "source");
        this.source = JsonNullable.of(source);
        return this;
    }

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public TransactionEstimateResponse withSource(JsonNullable<? extends SourceEnum> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Indicates if the transaction involves a marketplace.
     */
    public TransactionEstimateResponse withMarketplace(boolean marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = JsonNullable.of(marketplace);
        return this;
    }

    /**
     * Indicates if the transaction involves a marketplace.
     */
    public TransactionEstimateResponse withMarketplace(JsonNullable<Boolean> marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = marketplace;
        return this;
    }

    public TransactionEstimateResponse withTransactionItems(List<TransactionItemEstimateResponse> transactionItems) {
        Utils.checkNotNull(transactionItems, "transactionItems");
        this.transactionItems = transactionItems;
        return this;
    }

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     */
    public TransactionEstimateResponse withCustomer(CustomerBase customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     */
    public TransactionEstimateResponse withCustomer(JsonNullable<? extends CustomerBase> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
     */
    public TransactionEstimateResponse withAddresses(List<TransactionEstimateResponseAddress> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * The total amount of tax determined for the transaction.
     */
    public TransactionEstimateResponse withTotalTaxAmountCalculated(String totalTaxAmountCalculated) {
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        this.totalTaxAmountCalculated = Optional.ofNullable(totalTaxAmountCalculated);
        return this;
    }


    /**
     * The total amount of tax determined for the transaction.
     */
    public TransactionEstimateResponse withTotalTaxAmountCalculated(Optional<String> totalTaxAmountCalculated) {
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        this.totalTaxAmountCalculated = totalTaxAmountCalculated;
        return this;
    }

    /**
     * The taxable amount for the transaction.
     */
    public TransactionEstimateResponse withTaxableAmount(String taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = Optional.ofNullable(taxableAmount);
        return this;
    }


    /**
     * The taxable amount for the transaction.
     */
    public TransactionEstimateResponse withTaxableAmount(Optional<String> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    /**
     * The calculated tax rate for the transaction.
     */
    public TransactionEstimateResponse withTaxRateCalculated(String taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
        return this;
    }


    /**
     * The calculated tax rate for the transaction.
     */
    public TransactionEstimateResponse withTaxRateCalculated(Optional<String> taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = taxRateCalculated;
        return this;
    }

    /**
     * Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public TransactionEstimateResponse withNexusMet(boolean nexusMet) {
        Utils.checkNotNull(nexusMet, "nexusMet");
        this.nexusMet = Optional.ofNullable(nexusMet);
        return this;
    }


    /**
     * Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public TransactionEstimateResponse withNexusMet(Optional<Boolean> nexusMet) {
        Utils.checkNotNull(nexusMet, "nexusMet");
        this.nexusMet = nexusMet;
        return this;
    }

    /**
     * Indicates if there is an active registration for the transaction.
     */
    public TransactionEstimateResponse withHasActiveRegistration(boolean hasActiveRegistration) {
        Utils.checkNotNull(hasActiveRegistration, "hasActiveRegistration");
        this.hasActiveRegistration = Optional.ofNullable(hasActiveRegistration);
        return this;
    }


    /**
     * Indicates if there is an active registration for the transaction.
     */
    public TransactionEstimateResponse withHasActiveRegistration(Optional<Boolean> hasActiveRegistration) {
        Utils.checkNotNull(hasActiveRegistration, "hasActiveRegistration");
        this.hasActiveRegistration = hasActiveRegistration;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionEstimateResponse other = (TransactionEstimateResponse) o;
        return 
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.marketplace, other.marketplace) &&
            Utils.enhancedDeepEquals(this.transactionItems, other.transactionItems) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.totalTaxAmountCalculated, other.totalTaxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.taxRateCalculated, other.taxRateCalculated) &&
            Utils.enhancedDeepEquals(this.nexusMet, other.nexusMet) &&
            Utils.enhancedDeepEquals(this.hasActiveRegistration, other.hasActiveRegistration);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            date, externalId, totalAmount,
            currency, description, source,
            marketplace, transactionItems, customer,
            addresses, totalTaxAmountCalculated, taxableAmount,
            taxRateCalculated, nexusMet, hasActiveRegistration);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionEstimateResponse.class,
                "date", date,
                "externalId", externalId,
                "totalAmount", totalAmount,
                "currency", currency,
                "description", description,
                "source", source,
                "marketplace", marketplace,
                "transactionItems", transactionItems,
                "customer", customer,
                "addresses", addresses,
                "totalTaxAmountCalculated", totalTaxAmountCalculated,
                "taxableAmount", taxableAmount,
                "taxRateCalculated", taxRateCalculated,
                "nexusMet", nexusMet,
                "hasActiveRegistration", hasActiveRegistration);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OffsetDateTime date;

        private String externalId;

        private Optional<String> totalAmount;

        private CurrencyEnum currency;

        private JsonNullable<String> description = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends SourceEnum> source = JsonNullable.undefined();

        private JsonNullable<Boolean> marketplace = JsonNullable.undefined();

        private List<TransactionItemEstimateResponse> transactionItems;

        private JsonNullable<? extends CustomerBase> customer = JsonNullable.undefined();

        private List<TransactionEstimateResponseAddress> addresses;

        private Optional<String> totalTaxAmountCalculated;

        private Optional<String> taxableAmount;

        private Optional<String> taxRateCalculated;

        @Deprecated
        private Optional<Boolean> nexusMet;

        private Optional<Boolean> hasActiveRegistration;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Unique identifier of this transaction in the source system.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Total amount of the transaction.
         */
        public Builder totalAmount(String totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * Total amount of the transaction.
         */
        public Builder totalAmount(Optional<String> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        public Builder currency(CurrencyEnum currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * An optional description of the transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * An optional description of the transaction.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder source(SourceEnum source) {
            Utils.checkNotNull(source, "source");
            this.source = JsonNullable.of(source);
            return this;
        }

        /**
         * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder source(JsonNullable<? extends SourceEnum> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        /**
         * Indicates if the transaction involves a marketplace.
         */
        public Builder marketplace(boolean marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = JsonNullable.of(marketplace);
            return this;
        }

        /**
         * Indicates if the transaction involves a marketplace.
         */
        public Builder marketplace(JsonNullable<Boolean> marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = marketplace;
            return this;
        }


        public Builder transactionItems(List<TransactionItemEstimateResponse> transactionItems) {
            Utils.checkNotNull(transactionItems, "transactionItems");
            this.transactionItems = transactionItems;
            return this;
        }


        /**
         * Details about the customer. If the customer is not found, it will be ignored.
         */
        public Builder customer(CustomerBase customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * Details about the customer. If the customer is not found, it will be ignored.
         */
        public Builder customer(JsonNullable<? extends CustomerBase> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }


        /**
         * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
         */
        public Builder addresses(List<TransactionEstimateResponseAddress> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        /**
         * The total amount of tax determined for the transaction.
         */
        public Builder totalTaxAmountCalculated(String totalTaxAmountCalculated) {
            Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
            this.totalTaxAmountCalculated = Optional.ofNullable(totalTaxAmountCalculated);
            return this;
        }

        /**
         * The total amount of tax determined for the transaction.
         */
        public Builder totalTaxAmountCalculated(Optional<String> totalTaxAmountCalculated) {
            Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
            this.totalTaxAmountCalculated = totalTaxAmountCalculated;
            return this;
        }


        /**
         * The taxable amount for the transaction.
         */
        public Builder taxableAmount(String taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = Optional.ofNullable(taxableAmount);
            return this;
        }

        /**
         * The taxable amount for the transaction.
         */
        public Builder taxableAmount(Optional<String> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        /**
         * The calculated tax rate for the transaction.
         */
        public Builder taxRateCalculated(String taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
            return this;
        }

        /**
         * The calculated tax rate for the transaction.
         */
        public Builder taxRateCalculated(Optional<String> taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = taxRateCalculated;
            return this;
        }


        /**
         * Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nexusMet(boolean nexusMet) {
            Utils.checkNotNull(nexusMet, "nexusMet");
            this.nexusMet = Optional.ofNullable(nexusMet);
            return this;
        }

        /**
         * Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nexusMet(Optional<Boolean> nexusMet) {
            Utils.checkNotNull(nexusMet, "nexusMet");
            this.nexusMet = nexusMet;
            return this;
        }


        /**
         * Indicates if there is an active registration for the transaction.
         */
        public Builder hasActiveRegistration(boolean hasActiveRegistration) {
            Utils.checkNotNull(hasActiveRegistration, "hasActiveRegistration");
            this.hasActiveRegistration = Optional.ofNullable(hasActiveRegistration);
            return this;
        }

        /**
         * Indicates if there is an active registration for the transaction.
         */
        public Builder hasActiveRegistration(Optional<Boolean> hasActiveRegistration) {
            Utils.checkNotNull(hasActiveRegistration, "hasActiveRegistration");
            this.hasActiveRegistration = hasActiveRegistration;
            return this;
        }

        public TransactionEstimateResponse build() {
            if (totalAmount == null) {
                totalAmount = _SINGLETON_VALUE_TotalAmount.value();
            }
            if (totalTaxAmountCalculated == null) {
                totalTaxAmountCalculated = _SINGLETON_VALUE_TotalTaxAmountCalculated.value();
            }
            if (taxableAmount == null) {
                taxableAmount = _SINGLETON_VALUE_TaxableAmount.value();
            }
            if (taxRateCalculated == null) {
                taxRateCalculated = _SINGLETON_VALUE_TaxRateCalculated.value();
            }
            if (nexusMet == null) {
                nexusMet = _SINGLETON_VALUE_NexusMet.value();
            }
            if (hasActiveRegistration == null) {
                hasActiveRegistration = _SINGLETON_VALUE_HasActiveRegistration.value();
            }

            return new TransactionEstimateResponse(
                date, externalId, totalAmount,
                currency, description, source,
                marketplace, transactionItems, customer,
                addresses, totalTaxAmountCalculated, taxableAmount,
                taxRateCalculated, nexusMet, hasActiveRegistration);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TotalAmount =
                new LazySingletonValue<>(
                        "total_amount",
                        "\"0.0\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TotalTaxAmountCalculated =
                new LazySingletonValue<>(
                        "total_tax_amount_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxableAmount =
                new LazySingletonValue<>(
                        "taxable_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxRateCalculated =
                new LazySingletonValue<>(
                        "tax_rate_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_NexusMet =
                new LazySingletonValue<>(
                        "nexus_met",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_HasActiveRegistration =
                new LazySingletonValue<>(
                        "has_active_registration",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
