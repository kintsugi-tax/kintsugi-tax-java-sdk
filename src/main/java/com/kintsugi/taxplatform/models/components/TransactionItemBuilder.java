/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransactionItemBuilder {
    /**
     * External item identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;

    /**
     * Organization identifier.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("organization_id")
    private Optional<String> organizationId;

    /**
     * Date/time of item.
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Item description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * External product identifier.
     */
    @JsonProperty("external_product_id")
    private String externalProductId;

    /**
     * Product name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    private JsonNullable<String> product;

    /**
     * Product identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_id")
    private JsonNullable<String> productId;

    /**
     * Product name (detailed)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_name")
    private JsonNullable<String> productName;

    /**
     * Product description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_description")
    private JsonNullable<String> productDescription;

    /**
     * Quantity of item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<? extends TransactionItemBuilderQuantity> quantity;

    /**
     * Item amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends TransactionItemBuilderAmount> amount;

    /**
     * Imported tax amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount_imported")
    private Optional<? extends TransactionItemBuilderTaxAmountImported> taxAmountImported;

    /**
     * Imported tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_imported")
    private Optional<? extends TransactionItemBuilderTaxRateImported> taxRateImported;

    /**
     * Calculated tax amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount_calculated")
    private Optional<? extends TransactionItemBuilderTaxAmountCalculated> taxAmountCalculated;

    /**
     * Calculated tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_calculated")
    private Optional<? extends TransactionItemBuilderTaxRateCalculated> taxRateCalculated;

    /**
     * Original currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_currency")
    private JsonNullable<? extends CurrencyEnum> originalCurrency;

    /**
     * Destination currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_currency")
    private JsonNullable<? extends CurrencyEnum> destinationCurrency;

    /**
     * Converted item amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_amount")
    private JsonNullable<? extends TransactionItemBuilderConvertedAmount> convertedAmount;

    /**
     * Converted taxable amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_taxable_amount")
    private JsonNullable<? extends TransactionItemBuilderConvertedTaxableAmount> convertedTaxableAmount;

    /**
     * Converted imported tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_tax_amount_imported")
    private JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountImported> convertedTaxAmountImported;

    /**
     * Converted calculated tax amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_tax_amount_calculated")
    private JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountCalculated> convertedTaxAmountCalculated;

    /**
     * Converted total discount amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_total_discount")
    private JsonNullable<? extends TransactionItemBuilderConvertedTotalDiscount> convertedTotalDiscount;

    /**
     * Converted subtotal amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_subtotal")
    private JsonNullable<? extends TransactionItemBuilderConvertedSubtotal> convertedSubtotal;

    /**
     * Taxable amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private Optional<? extends TransactionItemBuilderTaxableAmount> taxableAmount;

    /**
     * Tax exemption status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_exemption")
    private JsonNullable<? extends TaxExemptionEnum> taxExemption;

    /**
     * Indicates if the item is exempt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt")
    private Optional<Boolean> exempt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_items")
    private Optional<? extends List<TaxItemBuilder>> taxItems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_builder")
    private JsonNullable<? extends DiscountBuilder> discountBuilder;

    @JsonCreator
    public TransactionItemBuilder(
            @JsonProperty("external_id") JsonNullable<String> externalId,
            @JsonProperty("organization_id") Optional<String> organizationId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("external_product_id") String externalProductId,
            @JsonProperty("product") JsonNullable<String> product,
            @JsonProperty("product_id") JsonNullable<String> productId,
            @JsonProperty("product_name") JsonNullable<String> productName,
            @JsonProperty("product_description") JsonNullable<String> productDescription,
            @JsonProperty("quantity") Optional<? extends TransactionItemBuilderQuantity> quantity,
            @JsonProperty("amount") Optional<? extends TransactionItemBuilderAmount> amount,
            @JsonProperty("tax_amount_imported") Optional<? extends TransactionItemBuilderTaxAmountImported> taxAmountImported,
            @JsonProperty("tax_rate_imported") Optional<? extends TransactionItemBuilderTaxRateImported> taxRateImported,
            @JsonProperty("tax_amount_calculated") Optional<? extends TransactionItemBuilderTaxAmountCalculated> taxAmountCalculated,
            @JsonProperty("tax_rate_calculated") Optional<? extends TransactionItemBuilderTaxRateCalculated> taxRateCalculated,
            @JsonProperty("original_currency") JsonNullable<? extends CurrencyEnum> originalCurrency,
            @JsonProperty("destination_currency") JsonNullable<? extends CurrencyEnum> destinationCurrency,
            @JsonProperty("converted_amount") JsonNullable<? extends TransactionItemBuilderConvertedAmount> convertedAmount,
            @JsonProperty("converted_taxable_amount") JsonNullable<? extends TransactionItemBuilderConvertedTaxableAmount> convertedTaxableAmount,
            @JsonProperty("converted_tax_amount_imported") JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountImported> convertedTaxAmountImported,
            @JsonProperty("converted_tax_amount_calculated") JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountCalculated> convertedTaxAmountCalculated,
            @JsonProperty("converted_total_discount") JsonNullable<? extends TransactionItemBuilderConvertedTotalDiscount> convertedTotalDiscount,
            @JsonProperty("converted_subtotal") JsonNullable<? extends TransactionItemBuilderConvertedSubtotal> convertedSubtotal,
            @JsonProperty("taxable_amount") Optional<? extends TransactionItemBuilderTaxableAmount> taxableAmount,
            @JsonProperty("tax_exemption") JsonNullable<? extends TaxExemptionEnum> taxExemption,
            @JsonProperty("exempt") Optional<Boolean> exempt,
            @JsonProperty("tax_items") Optional<? extends List<TaxItemBuilder>> taxItems,
            @JsonProperty("discount_builder") JsonNullable<? extends DiscountBuilder> discountBuilder) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(externalProductId, "externalProductId");
        Utils.checkNotNull(product, "product");
        Utils.checkNotNull(productId, "productId");
        Utils.checkNotNull(productName, "productName");
        Utils.checkNotNull(productDescription, "productDescription");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(taxExemption, "taxExemption");
        Utils.checkNotNull(exempt, "exempt");
        Utils.checkNotNull(taxItems, "taxItems");
        Utils.checkNotNull(discountBuilder, "discountBuilder");
        this.externalId = externalId;
        this.organizationId = organizationId;
        this.date = date;
        this.description = description;
        this.externalProductId = externalProductId;
        this.product = product;
        this.productId = productId;
        this.productName = productName;
        this.productDescription = productDescription;
        this.quantity = quantity;
        this.amount = amount;
        this.taxAmountImported = taxAmountImported;
        this.taxRateImported = taxRateImported;
        this.taxAmountCalculated = taxAmountCalculated;
        this.taxRateCalculated = taxRateCalculated;
        this.originalCurrency = originalCurrency;
        this.destinationCurrency = destinationCurrency;
        this.convertedAmount = convertedAmount;
        this.convertedTaxableAmount = convertedTaxableAmount;
        this.convertedTaxAmountImported = convertedTaxAmountImported;
        this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
        this.convertedTotalDiscount = convertedTotalDiscount;
        this.convertedSubtotal = convertedSubtotal;
        this.taxableAmount = taxableAmount;
        this.taxExemption = taxExemption;
        this.exempt = exempt;
        this.taxItems = taxItems;
        this.discountBuilder = discountBuilder;
    }
    
    public TransactionItemBuilder(
            OffsetDateTime date,
            String externalProductId) {
        this(JsonNullable.undefined(), Optional.empty(), date,
            JsonNullable.undefined(), externalProductId, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined());
    }

    /**
     * External item identifier.
     */
    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    /**
     * Organization identifier.
     */
    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    /**
     * Date/time of item.
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Item description
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * External product identifier.
     */
    @JsonIgnore
    public String externalProductId() {
        return externalProductId;
    }

    /**
     * Product name
     */
    @JsonIgnore
    public JsonNullable<String> product() {
        return product;
    }

    /**
     * Product identifier.
     */
    @JsonIgnore
    public JsonNullable<String> productId() {
        return productId;
    }

    /**
     * Product name (detailed)
     */
    @JsonIgnore
    public JsonNullable<String> productName() {
        return productName;
    }

    /**
     * Product description
     */
    @JsonIgnore
    public JsonNullable<String> productDescription() {
        return productDescription;
    }

    /**
     * Quantity of item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionItemBuilderQuantity> quantity() {
        return (Optional<TransactionItemBuilderQuantity>) quantity;
    }

    /**
     * Item amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionItemBuilderAmount> amount() {
        return (Optional<TransactionItemBuilderAmount>) amount;
    }

    /**
     * Imported tax amount for the item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionItemBuilderTaxAmountImported> taxAmountImported() {
        return (Optional<TransactionItemBuilderTaxAmountImported>) taxAmountImported;
    }

    /**
     * Imported tax rate.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionItemBuilderTaxRateImported> taxRateImported() {
        return (Optional<TransactionItemBuilderTaxRateImported>) taxRateImported;
    }

    /**
     * Calculated tax amount for the item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionItemBuilderTaxAmountCalculated> taxAmountCalculated() {
        return (Optional<TransactionItemBuilderTaxAmountCalculated>) taxAmountCalculated;
    }

    /**
     * Calculated tax rate.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionItemBuilderTaxRateCalculated> taxRateCalculated() {
        return (Optional<TransactionItemBuilderTaxRateCalculated>) taxRateCalculated;
    }

    /**
     * Original currency code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyEnum> originalCurrency() {
        return (JsonNullable<CurrencyEnum>) originalCurrency;
    }

    /**
     * Destination currency code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyEnum> destinationCurrency() {
        return (JsonNullable<CurrencyEnum>) destinationCurrency;
    }

    /**
     * Converted item amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionItemBuilderConvertedAmount> convertedAmount() {
        return (JsonNullable<TransactionItemBuilderConvertedAmount>) convertedAmount;
    }

    /**
     * Converted taxable amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionItemBuilderConvertedTaxableAmount> convertedTaxableAmount() {
        return (JsonNullable<TransactionItemBuilderConvertedTaxableAmount>) convertedTaxableAmount;
    }

    /**
     * Converted imported tax amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionItemBuilderConvertedTaxAmountImported> convertedTaxAmountImported() {
        return (JsonNullable<TransactionItemBuilderConvertedTaxAmountImported>) convertedTaxAmountImported;
    }

    /**
     * Converted calculated tax amount
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionItemBuilderConvertedTaxAmountCalculated> convertedTaxAmountCalculated() {
        return (JsonNullable<TransactionItemBuilderConvertedTaxAmountCalculated>) convertedTaxAmountCalculated;
    }

    /**
     * Converted total discount amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionItemBuilderConvertedTotalDiscount> convertedTotalDiscount() {
        return (JsonNullable<TransactionItemBuilderConvertedTotalDiscount>) convertedTotalDiscount;
    }

    /**
     * Converted subtotal amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionItemBuilderConvertedSubtotal> convertedSubtotal() {
        return (JsonNullable<TransactionItemBuilderConvertedSubtotal>) convertedSubtotal;
    }

    /**
     * Taxable amount for the item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionItemBuilderTaxableAmount> taxableAmount() {
        return (Optional<TransactionItemBuilderTaxableAmount>) taxableAmount;
    }

    /**
     * Tax exemption status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TaxExemptionEnum> taxExemption() {
        return (JsonNullable<TaxExemptionEnum>) taxExemption;
    }

    /**
     * Indicates if the item is exempt.
     */
    @JsonIgnore
    public Optional<Boolean> exempt() {
        return exempt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TaxItemBuilder>> taxItems() {
        return (Optional<List<TaxItemBuilder>>) taxItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<DiscountBuilder> discountBuilder() {
        return (JsonNullable<DiscountBuilder>) discountBuilder;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * External item identifier.
     */
    public TransactionItemBuilder withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    /**
     * External item identifier.
     */
    public TransactionItemBuilder withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Organization identifier.
     */
    public TransactionItemBuilder withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }


    /**
     * Organization identifier.
     */
    public TransactionItemBuilder withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Date/time of item.
     */
    public TransactionItemBuilder withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Item description
     */
    public TransactionItemBuilder withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Item description
     */
    public TransactionItemBuilder withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * External product identifier.
     */
    public TransactionItemBuilder withExternalProductId(String externalProductId) {
        Utils.checkNotNull(externalProductId, "externalProductId");
        this.externalProductId = externalProductId;
        return this;
    }

    /**
     * Product name
     */
    public TransactionItemBuilder withProduct(String product) {
        Utils.checkNotNull(product, "product");
        this.product = JsonNullable.of(product);
        return this;
    }

    /**
     * Product name
     */
    public TransactionItemBuilder withProduct(JsonNullable<String> product) {
        Utils.checkNotNull(product, "product");
        this.product = product;
        return this;
    }

    /**
     * Product identifier.
     */
    public TransactionItemBuilder withProductId(String productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = JsonNullable.of(productId);
        return this;
    }

    /**
     * Product identifier.
     */
    public TransactionItemBuilder withProductId(JsonNullable<String> productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = productId;
        return this;
    }

    /**
     * Product name (detailed)
     */
    public TransactionItemBuilder withProductName(String productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = JsonNullable.of(productName);
        return this;
    }

    /**
     * Product name (detailed)
     */
    public TransactionItemBuilder withProductName(JsonNullable<String> productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = productName;
        return this;
    }

    /**
     * Product description
     */
    public TransactionItemBuilder withProductDescription(String productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = JsonNullable.of(productDescription);
        return this;
    }

    /**
     * Product description
     */
    public TransactionItemBuilder withProductDescription(JsonNullable<String> productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = productDescription;
        return this;
    }

    /**
     * Quantity of item.
     */
    public TransactionItemBuilder withQuantity(TransactionItemBuilderQuantity quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }


    /**
     * Quantity of item.
     */
    public TransactionItemBuilder withQuantity(Optional<? extends TransactionItemBuilderQuantity> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Item amount.
     */
    public TransactionItemBuilder withAmount(TransactionItemBuilderAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * Item amount.
     */
    public TransactionItemBuilder withAmount(Optional<? extends TransactionItemBuilderAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Imported tax amount for the item.
     */
    public TransactionItemBuilder withTaxAmountImported(TransactionItemBuilderTaxAmountImported taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = Optional.ofNullable(taxAmountImported);
        return this;
    }


    /**
     * Imported tax amount for the item.
     */
    public TransactionItemBuilder withTaxAmountImported(Optional<? extends TransactionItemBuilderTaxAmountImported> taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = taxAmountImported;
        return this;
    }

    /**
     * Imported tax rate.
     */
    public TransactionItemBuilder withTaxRateImported(TransactionItemBuilderTaxRateImported taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = Optional.ofNullable(taxRateImported);
        return this;
    }


    /**
     * Imported tax rate.
     */
    public TransactionItemBuilder withTaxRateImported(Optional<? extends TransactionItemBuilderTaxRateImported> taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = taxRateImported;
        return this;
    }

    /**
     * Calculated tax amount for the item.
     */
    public TransactionItemBuilder withTaxAmountCalculated(TransactionItemBuilderTaxAmountCalculated taxAmountCalculated) {
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        this.taxAmountCalculated = Optional.ofNullable(taxAmountCalculated);
        return this;
    }


    /**
     * Calculated tax amount for the item.
     */
    public TransactionItemBuilder withTaxAmountCalculated(Optional<? extends TransactionItemBuilderTaxAmountCalculated> taxAmountCalculated) {
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        this.taxAmountCalculated = taxAmountCalculated;
        return this;
    }

    /**
     * Calculated tax rate.
     */
    public TransactionItemBuilder withTaxRateCalculated(TransactionItemBuilderTaxRateCalculated taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
        return this;
    }


    /**
     * Calculated tax rate.
     */
    public TransactionItemBuilder withTaxRateCalculated(Optional<? extends TransactionItemBuilderTaxRateCalculated> taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = taxRateCalculated;
        return this;
    }

    /**
     * Original currency code.
     */
    public TransactionItemBuilder withOriginalCurrency(CurrencyEnum originalCurrency) {
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        this.originalCurrency = JsonNullable.of(originalCurrency);
        return this;
    }

    /**
     * Original currency code.
     */
    public TransactionItemBuilder withOriginalCurrency(JsonNullable<? extends CurrencyEnum> originalCurrency) {
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        this.originalCurrency = originalCurrency;
        return this;
    }

    /**
     * Destination currency code.
     */
    public TransactionItemBuilder withDestinationCurrency(CurrencyEnum destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = JsonNullable.of(destinationCurrency);
        return this;
    }

    /**
     * Destination currency code.
     */
    public TransactionItemBuilder withDestinationCurrency(JsonNullable<? extends CurrencyEnum> destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = destinationCurrency;
        return this;
    }

    /**
     * Converted item amount.
     */
    public TransactionItemBuilder withConvertedAmount(TransactionItemBuilderConvertedAmount convertedAmount) {
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        this.convertedAmount = JsonNullable.of(convertedAmount);
        return this;
    }

    /**
     * Converted item amount.
     */
    public TransactionItemBuilder withConvertedAmount(JsonNullable<? extends TransactionItemBuilderConvertedAmount> convertedAmount) {
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        this.convertedAmount = convertedAmount;
        return this;
    }

    /**
     * Converted taxable amount.
     */
    public TransactionItemBuilder withConvertedTaxableAmount(TransactionItemBuilderConvertedTaxableAmount convertedTaxableAmount) {
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        this.convertedTaxableAmount = JsonNullable.of(convertedTaxableAmount);
        return this;
    }

    /**
     * Converted taxable amount.
     */
    public TransactionItemBuilder withConvertedTaxableAmount(JsonNullable<? extends TransactionItemBuilderConvertedTaxableAmount> convertedTaxableAmount) {
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        this.convertedTaxableAmount = convertedTaxableAmount;
        return this;
    }

    /**
     * Converted imported tax amount.
     */
    public TransactionItemBuilder withConvertedTaxAmountImported(TransactionItemBuilderConvertedTaxAmountImported convertedTaxAmountImported) {
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        this.convertedTaxAmountImported = JsonNullable.of(convertedTaxAmountImported);
        return this;
    }

    /**
     * Converted imported tax amount.
     */
    public TransactionItemBuilder withConvertedTaxAmountImported(JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountImported> convertedTaxAmountImported) {
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        this.convertedTaxAmountImported = convertedTaxAmountImported;
        return this;
    }

    /**
     * Converted calculated tax amount
     */
    public TransactionItemBuilder withConvertedTaxAmountCalculated(TransactionItemBuilderConvertedTaxAmountCalculated convertedTaxAmountCalculated) {
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        this.convertedTaxAmountCalculated = JsonNullable.of(convertedTaxAmountCalculated);
        return this;
    }

    /**
     * Converted calculated tax amount
     */
    public TransactionItemBuilder withConvertedTaxAmountCalculated(JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountCalculated> convertedTaxAmountCalculated) {
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
        return this;
    }

    /**
     * Converted total discount amount.
     */
    public TransactionItemBuilder withConvertedTotalDiscount(TransactionItemBuilderConvertedTotalDiscount convertedTotalDiscount) {
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        this.convertedTotalDiscount = JsonNullable.of(convertedTotalDiscount);
        return this;
    }

    /**
     * Converted total discount amount.
     */
    public TransactionItemBuilder withConvertedTotalDiscount(JsonNullable<? extends TransactionItemBuilderConvertedTotalDiscount> convertedTotalDiscount) {
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        this.convertedTotalDiscount = convertedTotalDiscount;
        return this;
    }

    /**
     * Converted subtotal amount.
     */
    public TransactionItemBuilder withConvertedSubtotal(TransactionItemBuilderConvertedSubtotal convertedSubtotal) {
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        this.convertedSubtotal = JsonNullable.of(convertedSubtotal);
        return this;
    }

    /**
     * Converted subtotal amount.
     */
    public TransactionItemBuilder withConvertedSubtotal(JsonNullable<? extends TransactionItemBuilderConvertedSubtotal> convertedSubtotal) {
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        this.convertedSubtotal = convertedSubtotal;
        return this;
    }

    /**
     * Taxable amount for the item.
     */
    public TransactionItemBuilder withTaxableAmount(TransactionItemBuilderTaxableAmount taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = Optional.ofNullable(taxableAmount);
        return this;
    }


    /**
     * Taxable amount for the item.
     */
    public TransactionItemBuilder withTaxableAmount(Optional<? extends TransactionItemBuilderTaxableAmount> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    /**
     * Tax exemption status.
     */
    public TransactionItemBuilder withTaxExemption(TaxExemptionEnum taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = JsonNullable.of(taxExemption);
        return this;
    }

    /**
     * Tax exemption status.
     */
    public TransactionItemBuilder withTaxExemption(JsonNullable<? extends TaxExemptionEnum> taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = taxExemption;
        return this;
    }

    /**
     * Indicates if the item is exempt.
     */
    public TransactionItemBuilder withExempt(boolean exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = Optional.ofNullable(exempt);
        return this;
    }


    /**
     * Indicates if the item is exempt.
     */
    public TransactionItemBuilder withExempt(Optional<Boolean> exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = exempt;
        return this;
    }

    public TransactionItemBuilder withTaxItems(List<TaxItemBuilder> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = Optional.ofNullable(taxItems);
        return this;
    }


    public TransactionItemBuilder withTaxItems(Optional<? extends List<TaxItemBuilder>> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = taxItems;
        return this;
    }

    public TransactionItemBuilder withDiscountBuilder(DiscountBuilder discountBuilder) {
        Utils.checkNotNull(discountBuilder, "discountBuilder");
        this.discountBuilder = JsonNullable.of(discountBuilder);
        return this;
    }

    public TransactionItemBuilder withDiscountBuilder(JsonNullable<? extends DiscountBuilder> discountBuilder) {
        Utils.checkNotNull(discountBuilder, "discountBuilder");
        this.discountBuilder = discountBuilder;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionItemBuilder other = (TransactionItemBuilder) o;
        return 
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.externalProductId, other.externalProductId) &&
            Utils.enhancedDeepEquals(this.product, other.product) &&
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.productName, other.productName) &&
            Utils.enhancedDeepEquals(this.productDescription, other.productDescription) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.taxAmountImported, other.taxAmountImported) &&
            Utils.enhancedDeepEquals(this.taxRateImported, other.taxRateImported) &&
            Utils.enhancedDeepEquals(this.taxAmountCalculated, other.taxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.taxRateCalculated, other.taxRateCalculated) &&
            Utils.enhancedDeepEquals(this.originalCurrency, other.originalCurrency) &&
            Utils.enhancedDeepEquals(this.destinationCurrency, other.destinationCurrency) &&
            Utils.enhancedDeepEquals(this.convertedAmount, other.convertedAmount) &&
            Utils.enhancedDeepEquals(this.convertedTaxableAmount, other.convertedTaxableAmount) &&
            Utils.enhancedDeepEquals(this.convertedTaxAmountImported, other.convertedTaxAmountImported) &&
            Utils.enhancedDeepEquals(this.convertedTaxAmountCalculated, other.convertedTaxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.convertedTotalDiscount, other.convertedTotalDiscount) &&
            Utils.enhancedDeepEquals(this.convertedSubtotal, other.convertedSubtotal) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.taxExemption, other.taxExemption) &&
            Utils.enhancedDeepEquals(this.exempt, other.exempt) &&
            Utils.enhancedDeepEquals(this.taxItems, other.taxItems) &&
            Utils.enhancedDeepEquals(this.discountBuilder, other.discountBuilder);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalId, organizationId, date,
            description, externalProductId, product,
            productId, productName, productDescription,
            quantity, amount, taxAmountImported,
            taxRateImported, taxAmountCalculated, taxRateCalculated,
            originalCurrency, destinationCurrency, convertedAmount,
            convertedTaxableAmount, convertedTaxAmountImported, convertedTaxAmountCalculated,
            convertedTotalDiscount, convertedSubtotal, taxableAmount,
            taxExemption, exempt, taxItems,
            discountBuilder);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionItemBuilder.class,
                "externalId", externalId,
                "organizationId", organizationId,
                "date", date,
                "description", description,
                "externalProductId", externalProductId,
                "product", product,
                "productId", productId,
                "productName", productName,
                "productDescription", productDescription,
                "quantity", quantity,
                "amount", amount,
                "taxAmountImported", taxAmountImported,
                "taxRateImported", taxRateImported,
                "taxAmountCalculated", taxAmountCalculated,
                "taxRateCalculated", taxRateCalculated,
                "originalCurrency", originalCurrency,
                "destinationCurrency", destinationCurrency,
                "convertedAmount", convertedAmount,
                "convertedTaxableAmount", convertedTaxableAmount,
                "convertedTaxAmountImported", convertedTaxAmountImported,
                "convertedTaxAmountCalculated", convertedTaxAmountCalculated,
                "convertedTotalDiscount", convertedTotalDiscount,
                "convertedSubtotal", convertedSubtotal,
                "taxableAmount", taxableAmount,
                "taxExemption", taxExemption,
                "exempt", exempt,
                "taxItems", taxItems,
                "discountBuilder", discountBuilder);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> externalId = JsonNullable.undefined();

        private Optional<String> organizationId = Optional.empty();

        private OffsetDateTime date;

        private JsonNullable<String> description = JsonNullable.undefined();

        private String externalProductId;

        private JsonNullable<String> product = JsonNullable.undefined();

        private JsonNullable<String> productId = JsonNullable.undefined();

        private JsonNullable<String> productName = JsonNullable.undefined();

        private JsonNullable<String> productDescription = JsonNullable.undefined();

        private Optional<? extends TransactionItemBuilderQuantity> quantity = Optional.empty();

        private Optional<? extends TransactionItemBuilderAmount> amount = Optional.empty();

        private Optional<? extends TransactionItemBuilderTaxAmountImported> taxAmountImported = Optional.empty();

        private Optional<? extends TransactionItemBuilderTaxRateImported> taxRateImported = Optional.empty();

        private Optional<? extends TransactionItemBuilderTaxAmountCalculated> taxAmountCalculated = Optional.empty();

        private Optional<? extends TransactionItemBuilderTaxRateCalculated> taxRateCalculated = Optional.empty();

        private JsonNullable<? extends CurrencyEnum> originalCurrency = JsonNullable.undefined();

        private JsonNullable<? extends CurrencyEnum> destinationCurrency = JsonNullable.undefined();

        private JsonNullable<? extends TransactionItemBuilderConvertedAmount> convertedAmount = JsonNullable.undefined();

        private JsonNullable<? extends TransactionItemBuilderConvertedTaxableAmount> convertedTaxableAmount = JsonNullable.undefined();

        private JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountImported> convertedTaxAmountImported = JsonNullable.undefined();

        private JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountCalculated> convertedTaxAmountCalculated = JsonNullable.undefined();

        private JsonNullable<? extends TransactionItemBuilderConvertedTotalDiscount> convertedTotalDiscount = JsonNullable.undefined();

        private JsonNullable<? extends TransactionItemBuilderConvertedSubtotal> convertedSubtotal = JsonNullable.undefined();

        private Optional<? extends TransactionItemBuilderTaxableAmount> taxableAmount = Optional.empty();

        private JsonNullable<? extends TaxExemptionEnum> taxExemption = JsonNullable.undefined();

        private Optional<Boolean> exempt;

        private Optional<? extends List<TaxItemBuilder>> taxItems = Optional.empty();

        private JsonNullable<? extends DiscountBuilder> discountBuilder = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * External item identifier.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        /**
         * External item identifier.
         */
        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Organization identifier.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * Organization identifier.
         */
        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * Date/time of item.
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Item description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Item description
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * External product identifier.
         */
        public Builder externalProductId(String externalProductId) {
            Utils.checkNotNull(externalProductId, "externalProductId");
            this.externalProductId = externalProductId;
            return this;
        }


        /**
         * Product name
         */
        public Builder product(String product) {
            Utils.checkNotNull(product, "product");
            this.product = JsonNullable.of(product);
            return this;
        }

        /**
         * Product name
         */
        public Builder product(JsonNullable<String> product) {
            Utils.checkNotNull(product, "product");
            this.product = product;
            return this;
        }


        /**
         * Product identifier.
         */
        public Builder productId(String productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = JsonNullable.of(productId);
            return this;
        }

        /**
         * Product identifier.
         */
        public Builder productId(JsonNullable<String> productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = productId;
            return this;
        }


        /**
         * Product name (detailed)
         */
        public Builder productName(String productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = JsonNullable.of(productName);
            return this;
        }

        /**
         * Product name (detailed)
         */
        public Builder productName(JsonNullable<String> productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = productName;
            return this;
        }


        /**
         * Product description
         */
        public Builder productDescription(String productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = JsonNullable.of(productDescription);
            return this;
        }

        /**
         * Product description
         */
        public Builder productDescription(JsonNullable<String> productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = productDescription;
            return this;
        }


        /**
         * Quantity of item.
         */
        public Builder quantity(TransactionItemBuilderQuantity quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * Quantity of item.
         */
        public Builder quantity(Optional<? extends TransactionItemBuilderQuantity> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * Item amount.
         */
        public Builder amount(TransactionItemBuilderAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Item amount.
         */
        public Builder amount(Optional<? extends TransactionItemBuilderAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Imported tax amount for the item.
         */
        public Builder taxAmountImported(TransactionItemBuilderTaxAmountImported taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = Optional.ofNullable(taxAmountImported);
            return this;
        }

        /**
         * Imported tax amount for the item.
         */
        public Builder taxAmountImported(Optional<? extends TransactionItemBuilderTaxAmountImported> taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = taxAmountImported;
            return this;
        }


        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(TransactionItemBuilderTaxRateImported taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = Optional.ofNullable(taxRateImported);
            return this;
        }

        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(Optional<? extends TransactionItemBuilderTaxRateImported> taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = taxRateImported;
            return this;
        }


        /**
         * Calculated tax amount for the item.
         */
        public Builder taxAmountCalculated(TransactionItemBuilderTaxAmountCalculated taxAmountCalculated) {
            Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
            this.taxAmountCalculated = Optional.ofNullable(taxAmountCalculated);
            return this;
        }

        /**
         * Calculated tax amount for the item.
         */
        public Builder taxAmountCalculated(Optional<? extends TransactionItemBuilderTaxAmountCalculated> taxAmountCalculated) {
            Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
            this.taxAmountCalculated = taxAmountCalculated;
            return this;
        }


        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(TransactionItemBuilderTaxRateCalculated taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
            return this;
        }

        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(Optional<? extends TransactionItemBuilderTaxRateCalculated> taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = taxRateCalculated;
            return this;
        }


        /**
         * Original currency code.
         */
        public Builder originalCurrency(CurrencyEnum originalCurrency) {
            Utils.checkNotNull(originalCurrency, "originalCurrency");
            this.originalCurrency = JsonNullable.of(originalCurrency);
            return this;
        }

        /**
         * Original currency code.
         */
        public Builder originalCurrency(JsonNullable<? extends CurrencyEnum> originalCurrency) {
            Utils.checkNotNull(originalCurrency, "originalCurrency");
            this.originalCurrency = originalCurrency;
            return this;
        }


        /**
         * Destination currency code.
         */
        public Builder destinationCurrency(CurrencyEnum destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = JsonNullable.of(destinationCurrency);
            return this;
        }

        /**
         * Destination currency code.
         */
        public Builder destinationCurrency(JsonNullable<? extends CurrencyEnum> destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = destinationCurrency;
            return this;
        }


        /**
         * Converted item amount.
         */
        public Builder convertedAmount(TransactionItemBuilderConvertedAmount convertedAmount) {
            Utils.checkNotNull(convertedAmount, "convertedAmount");
            this.convertedAmount = JsonNullable.of(convertedAmount);
            return this;
        }

        /**
         * Converted item amount.
         */
        public Builder convertedAmount(JsonNullable<? extends TransactionItemBuilderConvertedAmount> convertedAmount) {
            Utils.checkNotNull(convertedAmount, "convertedAmount");
            this.convertedAmount = convertedAmount;
            return this;
        }


        /**
         * Converted taxable amount.
         */
        public Builder convertedTaxableAmount(TransactionItemBuilderConvertedTaxableAmount convertedTaxableAmount) {
            Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
            this.convertedTaxableAmount = JsonNullable.of(convertedTaxableAmount);
            return this;
        }

        /**
         * Converted taxable amount.
         */
        public Builder convertedTaxableAmount(JsonNullable<? extends TransactionItemBuilderConvertedTaxableAmount> convertedTaxableAmount) {
            Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
            this.convertedTaxableAmount = convertedTaxableAmount;
            return this;
        }


        /**
         * Converted imported tax amount.
         */
        public Builder convertedTaxAmountImported(TransactionItemBuilderConvertedTaxAmountImported convertedTaxAmountImported) {
            Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
            this.convertedTaxAmountImported = JsonNullable.of(convertedTaxAmountImported);
            return this;
        }

        /**
         * Converted imported tax amount.
         */
        public Builder convertedTaxAmountImported(JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountImported> convertedTaxAmountImported) {
            Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
            this.convertedTaxAmountImported = convertedTaxAmountImported;
            return this;
        }


        /**
         * Converted calculated tax amount
         */
        public Builder convertedTaxAmountCalculated(TransactionItemBuilderConvertedTaxAmountCalculated convertedTaxAmountCalculated) {
            Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
            this.convertedTaxAmountCalculated = JsonNullable.of(convertedTaxAmountCalculated);
            return this;
        }

        /**
         * Converted calculated tax amount
         */
        public Builder convertedTaxAmountCalculated(JsonNullable<? extends TransactionItemBuilderConvertedTaxAmountCalculated> convertedTaxAmountCalculated) {
            Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
            this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
            return this;
        }


        /**
         * Converted total discount amount.
         */
        public Builder convertedTotalDiscount(TransactionItemBuilderConvertedTotalDiscount convertedTotalDiscount) {
            Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
            this.convertedTotalDiscount = JsonNullable.of(convertedTotalDiscount);
            return this;
        }

        /**
         * Converted total discount amount.
         */
        public Builder convertedTotalDiscount(JsonNullable<? extends TransactionItemBuilderConvertedTotalDiscount> convertedTotalDiscount) {
            Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
            this.convertedTotalDiscount = convertedTotalDiscount;
            return this;
        }


        /**
         * Converted subtotal amount.
         */
        public Builder convertedSubtotal(TransactionItemBuilderConvertedSubtotal convertedSubtotal) {
            Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
            this.convertedSubtotal = JsonNullable.of(convertedSubtotal);
            return this;
        }

        /**
         * Converted subtotal amount.
         */
        public Builder convertedSubtotal(JsonNullable<? extends TransactionItemBuilderConvertedSubtotal> convertedSubtotal) {
            Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
            this.convertedSubtotal = convertedSubtotal;
            return this;
        }


        /**
         * Taxable amount for the item.
         */
        public Builder taxableAmount(TransactionItemBuilderTaxableAmount taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = Optional.ofNullable(taxableAmount);
            return this;
        }

        /**
         * Taxable amount for the item.
         */
        public Builder taxableAmount(Optional<? extends TransactionItemBuilderTaxableAmount> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        /**
         * Tax exemption status.
         */
        public Builder taxExemption(TaxExemptionEnum taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = JsonNullable.of(taxExemption);
            return this;
        }

        /**
         * Tax exemption status.
         */
        public Builder taxExemption(JsonNullable<? extends TaxExemptionEnum> taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = taxExemption;
            return this;
        }


        /**
         * Indicates if the item is exempt.
         */
        public Builder exempt(boolean exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = Optional.ofNullable(exempt);
            return this;
        }

        /**
         * Indicates if the item is exempt.
         */
        public Builder exempt(Optional<Boolean> exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = exempt;
            return this;
        }


        public Builder taxItems(List<TaxItemBuilder> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = Optional.ofNullable(taxItems);
            return this;
        }

        public Builder taxItems(Optional<? extends List<TaxItemBuilder>> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = taxItems;
            return this;
        }


        public Builder discountBuilder(DiscountBuilder discountBuilder) {
            Utils.checkNotNull(discountBuilder, "discountBuilder");
            this.discountBuilder = JsonNullable.of(discountBuilder);
            return this;
        }

        public Builder discountBuilder(JsonNullable<? extends DiscountBuilder> discountBuilder) {
            Utils.checkNotNull(discountBuilder, "discountBuilder");
            this.discountBuilder = discountBuilder;
            return this;
        }

        public TransactionItemBuilder build() {
            if (exempt == null) {
                exempt = _SINGLETON_VALUE_Exempt.value();
            }

            return new TransactionItemBuilder(
                externalId, organizationId, date,
                description, externalProductId, product,
                productId, productName, productDescription,
                quantity, amount, taxAmountImported,
                taxRateImported, taxAmountCalculated, taxRateCalculated,
                originalCurrency, destinationCurrency, convertedAmount,
                convertedTaxableAmount, convertedTaxAmountImported, convertedTaxAmountCalculated,
                convertedTotalDiscount, convertedSubtotal, taxableAmount,
                taxExemption, exempt, taxItems,
                discountBuilder);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Exempt =
                new LazySingletonValue<>(
                        "exempt",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
