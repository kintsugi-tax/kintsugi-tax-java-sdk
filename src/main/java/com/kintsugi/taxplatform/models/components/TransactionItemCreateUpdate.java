/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class TransactionItemCreateUpdate {
    /**
     * External item identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private Optional<String> externalId;

    /**
     * Organization identifier.
     */
    @JsonProperty("organization_id")
    private String organizationId;

    /**
     * Date/time of item.
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Item description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * External product identifier.
     */
    @JsonProperty("external_product_id")
    private String externalProductId;

    /**
     * Product name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    private Optional<String> product;

    /**
     * Product identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_id")
    private Optional<String> productId;

    /**
     * Product name (detailed)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_name")
    private Optional<String> productName;

    /**
     * Product description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_description")
    private Optional<String> productDescription;

    /**
     * Quantity of item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<Double> quantity;

    /**
     * Item amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Double> amount;

    /**
     * Imported tax amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount_imported")
    private Optional<Double> taxAmountImported;

    /**
     * Imported tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_imported")
    private Optional<Double> taxRateImported;

    /**
     * Calculated tax amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount_calculated")
    private Optional<Double> taxAmountCalculated;

    /**
     * Calculated tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_calculated")
    private Optional<Double> taxRateCalculated;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_currency")
    private Optional<? extends CurrencyEnum> originalCurrency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_currency")
    private Optional<? extends CurrencyEnum> destinationCurrency;

    /**
     * Converted item amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_amount")
    private Optional<Double> convertedAmount;

    /**
     * Converted taxable amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_taxable_amount")
    private Optional<Double> convertedTaxableAmount;

    /**
     * Converted imported tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_tax_amount_imported")
    private Optional<Double> convertedTaxAmountImported;

    /**
     * Converted calculated tax amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_tax_amount_calculated")
    private Optional<Double> convertedTaxAmountCalculated;

    /**
     * Converted total discount amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_total_discount")
    private Optional<Double> convertedTotalDiscount;

    /**
     * Converted subtotal amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_subtotal")
    private Optional<Double> convertedSubtotal;

    /**
     * Taxable amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private Optional<Double> taxableAmount;

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_exemption")
    private Optional<? extends TaxExemptionEnum> taxExemption;

    /**
     * Indicates if the item is exempt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt")
    private Optional<Boolean> exempt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_items")
    private Optional<? extends List<TaxItemBuilder>> taxItems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_builder")
    private Optional<? extends DiscountBuilder> discountBuilder;

    @JsonCreator
    public TransactionItemCreateUpdate(
            @JsonProperty("external_id") Optional<String> externalId,
            @JsonProperty("organization_id") String organizationId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("external_product_id") String externalProductId,
            @JsonProperty("product") Optional<String> product,
            @JsonProperty("product_id") Optional<String> productId,
            @JsonProperty("product_name") Optional<String> productName,
            @JsonProperty("product_description") Optional<String> productDescription,
            @JsonProperty("quantity") Optional<Double> quantity,
            @JsonProperty("amount") Optional<Double> amount,
            @JsonProperty("tax_amount_imported") Optional<Double> taxAmountImported,
            @JsonProperty("tax_rate_imported") Optional<Double> taxRateImported,
            @JsonProperty("tax_amount_calculated") Optional<Double> taxAmountCalculated,
            @JsonProperty("tax_rate_calculated") Optional<Double> taxRateCalculated,
            @JsonProperty("original_currency") Optional<? extends CurrencyEnum> originalCurrency,
            @JsonProperty("destination_currency") Optional<? extends CurrencyEnum> destinationCurrency,
            @JsonProperty("converted_amount") Optional<Double> convertedAmount,
            @JsonProperty("converted_taxable_amount") Optional<Double> convertedTaxableAmount,
            @JsonProperty("converted_tax_amount_imported") Optional<Double> convertedTaxAmountImported,
            @JsonProperty("converted_tax_amount_calculated") Optional<Double> convertedTaxAmountCalculated,
            @JsonProperty("converted_total_discount") Optional<Double> convertedTotalDiscount,
            @JsonProperty("converted_subtotal") Optional<Double> convertedSubtotal,
            @JsonProperty("taxable_amount") Optional<Double> taxableAmount,
            @JsonProperty("tax_exemption") Optional<? extends TaxExemptionEnum> taxExemption,
            @JsonProperty("exempt") Optional<Boolean> exempt,
            @JsonProperty("tax_items") Optional<? extends List<TaxItemBuilder>> taxItems,
            @JsonProperty("discount_builder") Optional<? extends DiscountBuilder> discountBuilder) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(externalProductId, "externalProductId");
        Utils.checkNotNull(product, "product");
        Utils.checkNotNull(productId, "productId");
        Utils.checkNotNull(productName, "productName");
        Utils.checkNotNull(productDescription, "productDescription");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(taxExemption, "taxExemption");
        Utils.checkNotNull(exempt, "exempt");
        Utils.checkNotNull(taxItems, "taxItems");
        Utils.checkNotNull(discountBuilder, "discountBuilder");
        this.externalId = externalId;
        this.organizationId = organizationId;
        this.date = date;
        this.description = description;
        this.externalProductId = externalProductId;
        this.product = product;
        this.productId = productId;
        this.productName = productName;
        this.productDescription = productDescription;
        this.quantity = quantity;
        this.amount = amount;
        this.taxAmountImported = taxAmountImported;
        this.taxRateImported = taxRateImported;
        this.taxAmountCalculated = taxAmountCalculated;
        this.taxRateCalculated = taxRateCalculated;
        this.originalCurrency = originalCurrency;
        this.destinationCurrency = destinationCurrency;
        this.convertedAmount = convertedAmount;
        this.convertedTaxableAmount = convertedTaxableAmount;
        this.convertedTaxAmountImported = convertedTaxAmountImported;
        this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
        this.convertedTotalDiscount = convertedTotalDiscount;
        this.convertedSubtotal = convertedSubtotal;
        this.taxableAmount = taxableAmount;
        this.taxExemption = taxExemption;
        this.exempt = exempt;
        this.taxItems = taxItems;
        this.discountBuilder = discountBuilder;
    }
    
    public TransactionItemCreateUpdate(
            String organizationId,
            OffsetDateTime date,
            String externalProductId) {
        this(Optional.empty(), organizationId, date,
            Optional.empty(), externalProductId, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * External item identifier.
     */
    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    /**
     * Organization identifier.
     */
    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    /**
     * Date/time of item.
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Item description
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * External product identifier.
     */
    @JsonIgnore
    public String externalProductId() {
        return externalProductId;
    }

    /**
     * Product name
     */
    @JsonIgnore
    public Optional<String> product() {
        return product;
    }

    /**
     * Product identifier.
     */
    @JsonIgnore
    public Optional<String> productId() {
        return productId;
    }

    /**
     * Product name (detailed)
     */
    @JsonIgnore
    public Optional<String> productName() {
        return productName;
    }

    /**
     * Product description
     */
    @JsonIgnore
    public Optional<String> productDescription() {
        return productDescription;
    }

    /**
     * Quantity of item.
     */
    @JsonIgnore
    public Optional<Double> quantity() {
        return quantity;
    }

    /**
     * Item amount.
     */
    @JsonIgnore
    public Optional<Double> amount() {
        return amount;
    }

    /**
     * Imported tax amount for the item.
     */
    @JsonIgnore
    public Optional<Double> taxAmountImported() {
        return taxAmountImported;
    }

    /**
     * Imported tax rate.
     */
    @JsonIgnore
    public Optional<Double> taxRateImported() {
        return taxRateImported;
    }

    /**
     * Calculated tax amount for the item.
     */
    @JsonIgnore
    public Optional<Double> taxAmountCalculated() {
        return taxAmountCalculated;
    }

    /**
     * Calculated tax rate.
     */
    @JsonIgnore
    public Optional<Double> taxRateCalculated() {
        return taxRateCalculated;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CurrencyEnum> originalCurrency() {
        return (Optional<CurrencyEnum>) originalCurrency;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CurrencyEnum> destinationCurrency() {
        return (Optional<CurrencyEnum>) destinationCurrency;
    }

    /**
     * Converted item amount.
     */
    @JsonIgnore
    public Optional<Double> convertedAmount() {
        return convertedAmount;
    }

    /**
     * Converted taxable amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTaxableAmount() {
        return convertedTaxableAmount;
    }

    /**
     * Converted imported tax amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTaxAmountImported() {
        return convertedTaxAmountImported;
    }

    /**
     * Converted calculated tax amount
     */
    @JsonIgnore
    public Optional<Double> convertedTaxAmountCalculated() {
        return convertedTaxAmountCalculated;
    }

    /**
     * Converted total discount amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTotalDiscount() {
        return convertedTotalDiscount;
    }

    /**
     * Converted subtotal amount.
     */
    @JsonIgnore
    public Optional<Double> convertedSubtotal() {
        return convertedSubtotal;
    }

    /**
     * Taxable amount for the item.
     */
    @JsonIgnore
    public Optional<Double> taxableAmount() {
        return taxableAmount;
    }

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxExemptionEnum> taxExemption() {
        return (Optional<TaxExemptionEnum>) taxExemption;
    }

    /**
     * Indicates if the item is exempt.
     */
    @JsonIgnore
    public Optional<Boolean> exempt() {
        return exempt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TaxItemBuilder>> taxItems() {
        return (Optional<List<TaxItemBuilder>>) taxItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DiscountBuilder> discountBuilder() {
        return (Optional<DiscountBuilder>) discountBuilder;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * External item identifier.
     */
    public TransactionItemCreateUpdate withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }


    /**
     * External item identifier.
     */
    public TransactionItemCreateUpdate withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Organization identifier.
     */
    public TransactionItemCreateUpdate withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Date/time of item.
     */
    public TransactionItemCreateUpdate withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Item description
     */
    public TransactionItemCreateUpdate withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * Item description
     */
    public TransactionItemCreateUpdate withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * External product identifier.
     */
    public TransactionItemCreateUpdate withExternalProductId(String externalProductId) {
        Utils.checkNotNull(externalProductId, "externalProductId");
        this.externalProductId = externalProductId;
        return this;
    }

    /**
     * Product name
     */
    public TransactionItemCreateUpdate withProduct(String product) {
        Utils.checkNotNull(product, "product");
        this.product = Optional.ofNullable(product);
        return this;
    }


    /**
     * Product name
     */
    public TransactionItemCreateUpdate withProduct(Optional<String> product) {
        Utils.checkNotNull(product, "product");
        this.product = product;
        return this;
    }

    /**
     * Product identifier.
     */
    public TransactionItemCreateUpdate withProductId(String productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = Optional.ofNullable(productId);
        return this;
    }


    /**
     * Product identifier.
     */
    public TransactionItemCreateUpdate withProductId(Optional<String> productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = productId;
        return this;
    }

    /**
     * Product name (detailed)
     */
    public TransactionItemCreateUpdate withProductName(String productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = Optional.ofNullable(productName);
        return this;
    }


    /**
     * Product name (detailed)
     */
    public TransactionItemCreateUpdate withProductName(Optional<String> productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = productName;
        return this;
    }

    /**
     * Product description
     */
    public TransactionItemCreateUpdate withProductDescription(String productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = Optional.ofNullable(productDescription);
        return this;
    }


    /**
     * Product description
     */
    public TransactionItemCreateUpdate withProductDescription(Optional<String> productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = productDescription;
        return this;
    }

    /**
     * Quantity of item.
     */
    public TransactionItemCreateUpdate withQuantity(double quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }


    /**
     * Quantity of item.
     */
    public TransactionItemCreateUpdate withQuantity(Optional<Double> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Item amount.
     */
    public TransactionItemCreateUpdate withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * Item amount.
     */
    public TransactionItemCreateUpdate withAmount(Optional<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Imported tax amount for the item.
     */
    public TransactionItemCreateUpdate withTaxAmountImported(double taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = Optional.ofNullable(taxAmountImported);
        return this;
    }


    /**
     * Imported tax amount for the item.
     */
    public TransactionItemCreateUpdate withTaxAmountImported(Optional<Double> taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = taxAmountImported;
        return this;
    }

    /**
     * Imported tax rate.
     */
    public TransactionItemCreateUpdate withTaxRateImported(double taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = Optional.ofNullable(taxRateImported);
        return this;
    }


    /**
     * Imported tax rate.
     */
    public TransactionItemCreateUpdate withTaxRateImported(Optional<Double> taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = taxRateImported;
        return this;
    }

    /**
     * Calculated tax amount for the item.
     */
    public TransactionItemCreateUpdate withTaxAmountCalculated(double taxAmountCalculated) {
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        this.taxAmountCalculated = Optional.ofNullable(taxAmountCalculated);
        return this;
    }


    /**
     * Calculated tax amount for the item.
     */
    public TransactionItemCreateUpdate withTaxAmountCalculated(Optional<Double> taxAmountCalculated) {
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        this.taxAmountCalculated = taxAmountCalculated;
        return this;
    }

    /**
     * Calculated tax rate.
     */
    public TransactionItemCreateUpdate withTaxRateCalculated(double taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
        return this;
    }


    /**
     * Calculated tax rate.
     */
    public TransactionItemCreateUpdate withTaxRateCalculated(Optional<Double> taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = taxRateCalculated;
        return this;
    }

    public TransactionItemCreateUpdate withOriginalCurrency(CurrencyEnum originalCurrency) {
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        this.originalCurrency = Optional.ofNullable(originalCurrency);
        return this;
    }


    public TransactionItemCreateUpdate withOriginalCurrency(Optional<? extends CurrencyEnum> originalCurrency) {
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        this.originalCurrency = originalCurrency;
        return this;
    }

    public TransactionItemCreateUpdate withDestinationCurrency(CurrencyEnum destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = Optional.ofNullable(destinationCurrency);
        return this;
    }


    public TransactionItemCreateUpdate withDestinationCurrency(Optional<? extends CurrencyEnum> destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = destinationCurrency;
        return this;
    }

    /**
     * Converted item amount.
     */
    public TransactionItemCreateUpdate withConvertedAmount(double convertedAmount) {
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        this.convertedAmount = Optional.ofNullable(convertedAmount);
        return this;
    }


    /**
     * Converted item amount.
     */
    public TransactionItemCreateUpdate withConvertedAmount(Optional<Double> convertedAmount) {
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        this.convertedAmount = convertedAmount;
        return this;
    }

    /**
     * Converted taxable amount.
     */
    public TransactionItemCreateUpdate withConvertedTaxableAmount(double convertedTaxableAmount) {
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        this.convertedTaxableAmount = Optional.ofNullable(convertedTaxableAmount);
        return this;
    }


    /**
     * Converted taxable amount.
     */
    public TransactionItemCreateUpdate withConvertedTaxableAmount(Optional<Double> convertedTaxableAmount) {
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        this.convertedTaxableAmount = convertedTaxableAmount;
        return this;
    }

    /**
     * Converted imported tax amount.
     */
    public TransactionItemCreateUpdate withConvertedTaxAmountImported(double convertedTaxAmountImported) {
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        this.convertedTaxAmountImported = Optional.ofNullable(convertedTaxAmountImported);
        return this;
    }


    /**
     * Converted imported tax amount.
     */
    public TransactionItemCreateUpdate withConvertedTaxAmountImported(Optional<Double> convertedTaxAmountImported) {
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        this.convertedTaxAmountImported = convertedTaxAmountImported;
        return this;
    }

    /**
     * Converted calculated tax amount
     */
    public TransactionItemCreateUpdate withConvertedTaxAmountCalculated(double convertedTaxAmountCalculated) {
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        this.convertedTaxAmountCalculated = Optional.ofNullable(convertedTaxAmountCalculated);
        return this;
    }


    /**
     * Converted calculated tax amount
     */
    public TransactionItemCreateUpdate withConvertedTaxAmountCalculated(Optional<Double> convertedTaxAmountCalculated) {
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
        return this;
    }

    /**
     * Converted total discount amount.
     */
    public TransactionItemCreateUpdate withConvertedTotalDiscount(double convertedTotalDiscount) {
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        this.convertedTotalDiscount = Optional.ofNullable(convertedTotalDiscount);
        return this;
    }


    /**
     * Converted total discount amount.
     */
    public TransactionItemCreateUpdate withConvertedTotalDiscount(Optional<Double> convertedTotalDiscount) {
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        this.convertedTotalDiscount = convertedTotalDiscount;
        return this;
    }

    /**
     * Converted subtotal amount.
     */
    public TransactionItemCreateUpdate withConvertedSubtotal(double convertedSubtotal) {
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        this.convertedSubtotal = Optional.ofNullable(convertedSubtotal);
        return this;
    }


    /**
     * Converted subtotal amount.
     */
    public TransactionItemCreateUpdate withConvertedSubtotal(Optional<Double> convertedSubtotal) {
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        this.convertedSubtotal = convertedSubtotal;
        return this;
    }

    /**
     * Taxable amount for the item.
     */
    public TransactionItemCreateUpdate withTaxableAmount(double taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = Optional.ofNullable(taxableAmount);
        return this;
    }


    /**
     * Taxable amount for the item.
     */
    public TransactionItemCreateUpdate withTaxableAmount(Optional<Double> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    public TransactionItemCreateUpdate withTaxExemption(TaxExemptionEnum taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = Optional.ofNullable(taxExemption);
        return this;
    }


    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    public TransactionItemCreateUpdate withTaxExemption(Optional<? extends TaxExemptionEnum> taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = taxExemption;
        return this;
    }

    /**
     * Indicates if the item is exempt.
     */
    public TransactionItemCreateUpdate withExempt(boolean exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = Optional.ofNullable(exempt);
        return this;
    }


    /**
     * Indicates if the item is exempt.
     */
    public TransactionItemCreateUpdate withExempt(Optional<Boolean> exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = exempt;
        return this;
    }

    public TransactionItemCreateUpdate withTaxItems(List<TaxItemBuilder> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = Optional.ofNullable(taxItems);
        return this;
    }


    public TransactionItemCreateUpdate withTaxItems(Optional<? extends List<TaxItemBuilder>> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = taxItems;
        return this;
    }

    public TransactionItemCreateUpdate withDiscountBuilder(DiscountBuilder discountBuilder) {
        Utils.checkNotNull(discountBuilder, "discountBuilder");
        this.discountBuilder = Optional.ofNullable(discountBuilder);
        return this;
    }


    public TransactionItemCreateUpdate withDiscountBuilder(Optional<? extends DiscountBuilder> discountBuilder) {
        Utils.checkNotNull(discountBuilder, "discountBuilder");
        this.discountBuilder = discountBuilder;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionItemCreateUpdate other = (TransactionItemCreateUpdate) o;
        return 
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.externalProductId, other.externalProductId) &&
            Utils.enhancedDeepEquals(this.product, other.product) &&
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.productName, other.productName) &&
            Utils.enhancedDeepEquals(this.productDescription, other.productDescription) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.taxAmountImported, other.taxAmountImported) &&
            Utils.enhancedDeepEquals(this.taxRateImported, other.taxRateImported) &&
            Utils.enhancedDeepEquals(this.taxAmountCalculated, other.taxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.taxRateCalculated, other.taxRateCalculated) &&
            Utils.enhancedDeepEquals(this.originalCurrency, other.originalCurrency) &&
            Utils.enhancedDeepEquals(this.destinationCurrency, other.destinationCurrency) &&
            Utils.enhancedDeepEquals(this.convertedAmount, other.convertedAmount) &&
            Utils.enhancedDeepEquals(this.convertedTaxableAmount, other.convertedTaxableAmount) &&
            Utils.enhancedDeepEquals(this.convertedTaxAmountImported, other.convertedTaxAmountImported) &&
            Utils.enhancedDeepEquals(this.convertedTaxAmountCalculated, other.convertedTaxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.convertedTotalDiscount, other.convertedTotalDiscount) &&
            Utils.enhancedDeepEquals(this.convertedSubtotal, other.convertedSubtotal) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.taxExemption, other.taxExemption) &&
            Utils.enhancedDeepEquals(this.exempt, other.exempt) &&
            Utils.enhancedDeepEquals(this.taxItems, other.taxItems) &&
            Utils.enhancedDeepEquals(this.discountBuilder, other.discountBuilder);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalId, organizationId, date,
            description, externalProductId, product,
            productId, productName, productDescription,
            quantity, amount, taxAmountImported,
            taxRateImported, taxAmountCalculated, taxRateCalculated,
            originalCurrency, destinationCurrency, convertedAmount,
            convertedTaxableAmount, convertedTaxAmountImported, convertedTaxAmountCalculated,
            convertedTotalDiscount, convertedSubtotal, taxableAmount,
            taxExemption, exempt, taxItems,
            discountBuilder);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionItemCreateUpdate.class,
                "externalId", externalId,
                "organizationId", organizationId,
                "date", date,
                "description", description,
                "externalProductId", externalProductId,
                "product", product,
                "productId", productId,
                "productName", productName,
                "productDescription", productDescription,
                "quantity", quantity,
                "amount", amount,
                "taxAmountImported", taxAmountImported,
                "taxRateImported", taxRateImported,
                "taxAmountCalculated", taxAmountCalculated,
                "taxRateCalculated", taxRateCalculated,
                "originalCurrency", originalCurrency,
                "destinationCurrency", destinationCurrency,
                "convertedAmount", convertedAmount,
                "convertedTaxableAmount", convertedTaxableAmount,
                "convertedTaxAmountImported", convertedTaxAmountImported,
                "convertedTaxAmountCalculated", convertedTaxAmountCalculated,
                "convertedTotalDiscount", convertedTotalDiscount,
                "convertedSubtotal", convertedSubtotal,
                "taxableAmount", taxableAmount,
                "taxExemption", taxExemption,
                "exempt", exempt,
                "taxItems", taxItems,
                "discountBuilder", discountBuilder);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> externalId = Optional.empty();

        private String organizationId;

        private OffsetDateTime date;

        private Optional<String> description = Optional.empty();

        private String externalProductId;

        private Optional<String> product = Optional.empty();

        private Optional<String> productId = Optional.empty();

        private Optional<String> productName = Optional.empty();

        private Optional<String> productDescription = Optional.empty();

        private Optional<Double> quantity;

        private Optional<Double> amount;

        private Optional<Double> taxAmountImported;

        private Optional<Double> taxRateImported;

        private Optional<Double> taxAmountCalculated;

        private Optional<Double> taxRateCalculated;

        private Optional<? extends CurrencyEnum> originalCurrency = Optional.empty();

        private Optional<? extends CurrencyEnum> destinationCurrency = Optional.empty();

        private Optional<Double> convertedAmount = Optional.empty();

        private Optional<Double> convertedTaxableAmount = Optional.empty();

        private Optional<Double> convertedTaxAmountImported = Optional.empty();

        private Optional<Double> convertedTaxAmountCalculated = Optional.empty();

        private Optional<Double> convertedTotalDiscount = Optional.empty();

        private Optional<Double> convertedSubtotal = Optional.empty();

        private Optional<Double> taxableAmount;

        private Optional<? extends TaxExemptionEnum> taxExemption = Optional.empty();

        private Optional<Boolean> exempt;

        private Optional<? extends List<TaxItemBuilder>> taxItems = Optional.empty();

        private Optional<? extends DiscountBuilder> discountBuilder = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * External item identifier.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        /**
         * External item identifier.
         */
        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Organization identifier.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * Date/time of item.
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Item description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Item description
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * External product identifier.
         */
        public Builder externalProductId(String externalProductId) {
            Utils.checkNotNull(externalProductId, "externalProductId");
            this.externalProductId = externalProductId;
            return this;
        }


        /**
         * Product name
         */
        public Builder product(String product) {
            Utils.checkNotNull(product, "product");
            this.product = Optional.ofNullable(product);
            return this;
        }

        /**
         * Product name
         */
        public Builder product(Optional<String> product) {
            Utils.checkNotNull(product, "product");
            this.product = product;
            return this;
        }


        /**
         * Product identifier.
         */
        public Builder productId(String productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = Optional.ofNullable(productId);
            return this;
        }

        /**
         * Product identifier.
         */
        public Builder productId(Optional<String> productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = productId;
            return this;
        }


        /**
         * Product name (detailed)
         */
        public Builder productName(String productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = Optional.ofNullable(productName);
            return this;
        }

        /**
         * Product name (detailed)
         */
        public Builder productName(Optional<String> productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = productName;
            return this;
        }


        /**
         * Product description
         */
        public Builder productDescription(String productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = Optional.ofNullable(productDescription);
            return this;
        }

        /**
         * Product description
         */
        public Builder productDescription(Optional<String> productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = productDescription;
            return this;
        }


        /**
         * Quantity of item.
         */
        public Builder quantity(double quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * Quantity of item.
         */
        public Builder quantity(Optional<Double> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * Item amount.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Item amount.
         */
        public Builder amount(Optional<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Imported tax amount for the item.
         */
        public Builder taxAmountImported(double taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = Optional.ofNullable(taxAmountImported);
            return this;
        }

        /**
         * Imported tax amount for the item.
         */
        public Builder taxAmountImported(Optional<Double> taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = taxAmountImported;
            return this;
        }


        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(double taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = Optional.ofNullable(taxRateImported);
            return this;
        }

        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(Optional<Double> taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = taxRateImported;
            return this;
        }


        /**
         * Calculated tax amount for the item.
         */
        public Builder taxAmountCalculated(double taxAmountCalculated) {
            Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
            this.taxAmountCalculated = Optional.ofNullable(taxAmountCalculated);
            return this;
        }

        /**
         * Calculated tax amount for the item.
         */
        public Builder taxAmountCalculated(Optional<Double> taxAmountCalculated) {
            Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
            this.taxAmountCalculated = taxAmountCalculated;
            return this;
        }


        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(double taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
            return this;
        }

        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(Optional<Double> taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = taxRateCalculated;
            return this;
        }


        public Builder originalCurrency(CurrencyEnum originalCurrency) {
            Utils.checkNotNull(originalCurrency, "originalCurrency");
            this.originalCurrency = Optional.ofNullable(originalCurrency);
            return this;
        }

        public Builder originalCurrency(Optional<? extends CurrencyEnum> originalCurrency) {
            Utils.checkNotNull(originalCurrency, "originalCurrency");
            this.originalCurrency = originalCurrency;
            return this;
        }


        public Builder destinationCurrency(CurrencyEnum destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = Optional.ofNullable(destinationCurrency);
            return this;
        }

        public Builder destinationCurrency(Optional<? extends CurrencyEnum> destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = destinationCurrency;
            return this;
        }


        /**
         * Converted item amount.
         */
        public Builder convertedAmount(double convertedAmount) {
            Utils.checkNotNull(convertedAmount, "convertedAmount");
            this.convertedAmount = Optional.ofNullable(convertedAmount);
            return this;
        }

        /**
         * Converted item amount.
         */
        public Builder convertedAmount(Optional<Double> convertedAmount) {
            Utils.checkNotNull(convertedAmount, "convertedAmount");
            this.convertedAmount = convertedAmount;
            return this;
        }


        /**
         * Converted taxable amount.
         */
        public Builder convertedTaxableAmount(double convertedTaxableAmount) {
            Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
            this.convertedTaxableAmount = Optional.ofNullable(convertedTaxableAmount);
            return this;
        }

        /**
         * Converted taxable amount.
         */
        public Builder convertedTaxableAmount(Optional<Double> convertedTaxableAmount) {
            Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
            this.convertedTaxableAmount = convertedTaxableAmount;
            return this;
        }


        /**
         * Converted imported tax amount.
         */
        public Builder convertedTaxAmountImported(double convertedTaxAmountImported) {
            Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
            this.convertedTaxAmountImported = Optional.ofNullable(convertedTaxAmountImported);
            return this;
        }

        /**
         * Converted imported tax amount.
         */
        public Builder convertedTaxAmountImported(Optional<Double> convertedTaxAmountImported) {
            Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
            this.convertedTaxAmountImported = convertedTaxAmountImported;
            return this;
        }


        /**
         * Converted calculated tax amount
         */
        public Builder convertedTaxAmountCalculated(double convertedTaxAmountCalculated) {
            Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
            this.convertedTaxAmountCalculated = Optional.ofNullable(convertedTaxAmountCalculated);
            return this;
        }

        /**
         * Converted calculated tax amount
         */
        public Builder convertedTaxAmountCalculated(Optional<Double> convertedTaxAmountCalculated) {
            Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
            this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
            return this;
        }


        /**
         * Converted total discount amount.
         */
        public Builder convertedTotalDiscount(double convertedTotalDiscount) {
            Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
            this.convertedTotalDiscount = Optional.ofNullable(convertedTotalDiscount);
            return this;
        }

        /**
         * Converted total discount amount.
         */
        public Builder convertedTotalDiscount(Optional<Double> convertedTotalDiscount) {
            Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
            this.convertedTotalDiscount = convertedTotalDiscount;
            return this;
        }


        /**
         * Converted subtotal amount.
         */
        public Builder convertedSubtotal(double convertedSubtotal) {
            Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
            this.convertedSubtotal = Optional.ofNullable(convertedSubtotal);
            return this;
        }

        /**
         * Converted subtotal amount.
         */
        public Builder convertedSubtotal(Optional<Double> convertedSubtotal) {
            Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
            this.convertedSubtotal = convertedSubtotal;
            return this;
        }


        /**
         * Taxable amount for the item.
         */
        public Builder taxableAmount(double taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = Optional.ofNullable(taxableAmount);
            return this;
        }

        /**
         * Taxable amount for the item.
         */
        public Builder taxableAmount(Optional<Double> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        /**
         * This enum is used to determine if a transaction is exempt from tax.
         */
        public Builder taxExemption(TaxExemptionEnum taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = Optional.ofNullable(taxExemption);
            return this;
        }

        /**
         * This enum is used to determine if a transaction is exempt from tax.
         */
        public Builder taxExemption(Optional<? extends TaxExemptionEnum> taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = taxExemption;
            return this;
        }


        /**
         * Indicates if the item is exempt.
         */
        public Builder exempt(boolean exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = Optional.ofNullable(exempt);
            return this;
        }

        /**
         * Indicates if the item is exempt.
         */
        public Builder exempt(Optional<Boolean> exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = exempt;
            return this;
        }


        public Builder taxItems(List<TaxItemBuilder> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = Optional.ofNullable(taxItems);
            return this;
        }

        public Builder taxItems(Optional<? extends List<TaxItemBuilder>> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = taxItems;
            return this;
        }


        public Builder discountBuilder(DiscountBuilder discountBuilder) {
            Utils.checkNotNull(discountBuilder, "discountBuilder");
            this.discountBuilder = Optional.ofNullable(discountBuilder);
            return this;
        }

        public Builder discountBuilder(Optional<? extends DiscountBuilder> discountBuilder) {
            Utils.checkNotNull(discountBuilder, "discountBuilder");
            this.discountBuilder = discountBuilder;
            return this;
        }

        public TransactionItemCreateUpdate build() {
            if (quantity == null) {
                quantity = _SINGLETON_VALUE_Quantity.value();
            }
            if (amount == null) {
                amount = _SINGLETON_VALUE_Amount.value();
            }
            if (taxAmountImported == null) {
                taxAmountImported = _SINGLETON_VALUE_TaxAmountImported.value();
            }
            if (taxRateImported == null) {
                taxRateImported = _SINGLETON_VALUE_TaxRateImported.value();
            }
            if (taxAmountCalculated == null) {
                taxAmountCalculated = _SINGLETON_VALUE_TaxAmountCalculated.value();
            }
            if (taxRateCalculated == null) {
                taxRateCalculated = _SINGLETON_VALUE_TaxRateCalculated.value();
            }
            if (taxableAmount == null) {
                taxableAmount = _SINGLETON_VALUE_TaxableAmount.value();
            }
            if (exempt == null) {
                exempt = _SINGLETON_VALUE_Exempt.value();
            }

            return new TransactionItemCreateUpdate(
                externalId, organizationId, date,
                description, externalProductId, product,
                productId, productName, productDescription,
                quantity, amount, taxAmountImported,
                taxRateImported, taxAmountCalculated, taxRateCalculated,
                originalCurrency, destinationCurrency, convertedAmount,
                convertedTaxableAmount, convertedTaxAmountImported, convertedTaxAmountCalculated,
                convertedTotalDiscount, convertedSubtotal, taxableAmount,
                taxExemption, exempt, taxItems,
                discountBuilder);
        }


        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Quantity =
                new LazySingletonValue<>(
                        "quantity",
                        "\"1.0\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Amount =
                new LazySingletonValue<>(
                        "amount",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TaxAmountImported =
                new LazySingletonValue<>(
                        "tax_amount_imported",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TaxRateImported =
                new LazySingletonValue<>(
                        "tax_rate_imported",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TaxAmountCalculated =
                new LazySingletonValue<>(
                        "tax_amount_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TaxRateCalculated =
                new LazySingletonValue<>(
                        "tax_rate_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TaxableAmount =
                new LazySingletonValue<>(
                        "taxable_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Exempt =
                new LazySingletonValue<>(
                        "exempt",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
