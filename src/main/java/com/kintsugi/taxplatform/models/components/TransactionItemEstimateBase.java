/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransactionItemEstimateBase {
    /**
     * A unique identifier for the transaction item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;

    /**
     * The date of the transaction item.
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * A description of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * External product identifier. If not found and product_subcategory
     *         and product_category are not provided, an error occurs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_product_id")
    private JsonNullable<String> externalProductId;

    /**
     * Name of the product. Used if creating a new product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_name")
    private JsonNullable<String> productName;

    /**
     * Description of the product. Used if creating a new product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_description")
    private JsonNullable<String> productDescription;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_source")
    private JsonNullable<? extends SourceEnum> productSource;

    /**
     * Subcategory of the product. Required if product_category is used
     *         in place of external_product_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_subcategory")
    private JsonNullable<? extends ProductSubCategoryEnum> productSubcategory;

    /**
     * Category of the product. Required if product_subcategory is used
     *         in place of external_product_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_category")
    private JsonNullable<? extends ProductCategoryEnum> productCategory;

    /**
     * Defaults to 1.0. The quantity of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<? extends QuantityOfTheProduct> quantity;

    /**
     * The total amount of the item.
     */
    @JsonProperty("amount")
    private TotalAmountOfThisTransactionItemAfterDiscounts amount;

    /**
     * Defaults to false. Indicates whether the item is exempt from tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt")
    private Optional<Boolean> exempt;

    @JsonCreator
    public TransactionItemEstimateBase(
            @JsonProperty("external_id") JsonNullable<String> externalId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("external_product_id") JsonNullable<String> externalProductId,
            @JsonProperty("product_name") JsonNullable<String> productName,
            @JsonProperty("product_description") JsonNullable<String> productDescription,
            @JsonProperty("product_source") JsonNullable<? extends SourceEnum> productSource,
            @JsonProperty("product_subcategory") JsonNullable<? extends ProductSubCategoryEnum> productSubcategory,
            @JsonProperty("product_category") JsonNullable<? extends ProductCategoryEnum> productCategory,
            @JsonProperty("quantity") Optional<? extends QuantityOfTheProduct> quantity,
            @JsonProperty("amount") TotalAmountOfThisTransactionItemAfterDiscounts amount,
            @JsonProperty("exempt") Optional<Boolean> exempt) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(externalProductId, "externalProductId");
        Utils.checkNotNull(productName, "productName");
        Utils.checkNotNull(productDescription, "productDescription");
        Utils.checkNotNull(productSource, "productSource");
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        Utils.checkNotNull(productCategory, "productCategory");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(exempt, "exempt");
        this.externalId = externalId;
        this.date = date;
        this.description = description;
        this.externalProductId = externalProductId;
        this.productName = productName;
        this.productDescription = productDescription;
        this.productSource = productSource;
        this.productSubcategory = productSubcategory;
        this.productCategory = productCategory;
        this.quantity = quantity;
        this.amount = amount;
        this.exempt = exempt;
    }
    
    public TransactionItemEstimateBase(
            OffsetDateTime date,
            TotalAmountOfThisTransactionItemAfterDiscounts amount) {
        this(JsonNullable.undefined(), date, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), amount, Optional.empty());
    }

    /**
     * A unique identifier for the transaction item.
     */
    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    /**
     * The date of the transaction item.
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * A description of the item.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * External product identifier. If not found and product_subcategory
     *         and product_category are not provided, an error occurs.
     */
    @JsonIgnore
    public JsonNullable<String> externalProductId() {
        return externalProductId;
    }

    /**
     * Name of the product. Used if creating a new product.
     */
    @JsonIgnore
    public JsonNullable<String> productName() {
        return productName;
    }

    /**
     * Description of the product. Used if creating a new product.
     */
    @JsonIgnore
    public JsonNullable<String> productDescription() {
        return productDescription;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SourceEnum> productSource() {
        return (JsonNullable<SourceEnum>) productSource;
    }

    /**
     * Subcategory of the product. Required if product_category is used
     *         in place of external_product_id.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProductSubCategoryEnum> productSubcategory() {
        return (JsonNullable<ProductSubCategoryEnum>) productSubcategory;
    }

    /**
     * Category of the product. Required if product_subcategory is used
     *         in place of external_product_id.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProductCategoryEnum> productCategory() {
        return (JsonNullable<ProductCategoryEnum>) productCategory;
    }

    /**
     * Defaults to 1.0. The quantity of the item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QuantityOfTheProduct> quantity() {
        return (Optional<QuantityOfTheProduct>) quantity;
    }

    /**
     * The total amount of the item.
     */
    @JsonIgnore
    public TotalAmountOfThisTransactionItemAfterDiscounts amount() {
        return amount;
    }

    /**
     * Defaults to false. Indicates whether the item is exempt from tax.
     */
    @JsonIgnore
    public Optional<Boolean> exempt() {
        return exempt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for the transaction item.
     */
    public TransactionItemEstimateBase withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    /**
     * A unique identifier for the transaction item.
     */
    public TransactionItemEstimateBase withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * The date of the transaction item.
     */
    public TransactionItemEstimateBase withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * A description of the item.
     */
    public TransactionItemEstimateBase withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the item.
     */
    public TransactionItemEstimateBase withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * External product identifier. If not found and product_subcategory
     *         and product_category are not provided, an error occurs.
     */
    public TransactionItemEstimateBase withExternalProductId(String externalProductId) {
        Utils.checkNotNull(externalProductId, "externalProductId");
        this.externalProductId = JsonNullable.of(externalProductId);
        return this;
    }

    /**
     * External product identifier. If not found and product_subcategory
     *         and product_category are not provided, an error occurs.
     */
    public TransactionItemEstimateBase withExternalProductId(JsonNullable<String> externalProductId) {
        Utils.checkNotNull(externalProductId, "externalProductId");
        this.externalProductId = externalProductId;
        return this;
    }

    /**
     * Name of the product. Used if creating a new product.
     */
    public TransactionItemEstimateBase withProductName(String productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = JsonNullable.of(productName);
        return this;
    }

    /**
     * Name of the product. Used if creating a new product.
     */
    public TransactionItemEstimateBase withProductName(JsonNullable<String> productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = productName;
        return this;
    }

    /**
     * Description of the product. Used if creating a new product.
     */
    public TransactionItemEstimateBase withProductDescription(String productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = JsonNullable.of(productDescription);
        return this;
    }

    /**
     * Description of the product. Used if creating a new product.
     */
    public TransactionItemEstimateBase withProductDescription(JsonNullable<String> productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = productDescription;
        return this;
    }

    public TransactionItemEstimateBase withProductSource(SourceEnum productSource) {
        Utils.checkNotNull(productSource, "productSource");
        this.productSource = JsonNullable.of(productSource);
        return this;
    }

    public TransactionItemEstimateBase withProductSource(JsonNullable<? extends SourceEnum> productSource) {
        Utils.checkNotNull(productSource, "productSource");
        this.productSource = productSource;
        return this;
    }

    /**
     * Subcategory of the product. Required if product_category is used
     *         in place of external_product_id.
     */
    public TransactionItemEstimateBase withProductSubcategory(ProductSubCategoryEnum productSubcategory) {
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        this.productSubcategory = JsonNullable.of(productSubcategory);
        return this;
    }

    /**
     * Subcategory of the product. Required if product_category is used
     *         in place of external_product_id.
     */
    public TransactionItemEstimateBase withProductSubcategory(JsonNullable<? extends ProductSubCategoryEnum> productSubcategory) {
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        this.productSubcategory = productSubcategory;
        return this;
    }

    /**
     * Category of the product. Required if product_subcategory is used
     *         in place of external_product_id.
     */
    public TransactionItemEstimateBase withProductCategory(ProductCategoryEnum productCategory) {
        Utils.checkNotNull(productCategory, "productCategory");
        this.productCategory = JsonNullable.of(productCategory);
        return this;
    }

    /**
     * Category of the product. Required if product_subcategory is used
     *         in place of external_product_id.
     */
    public TransactionItemEstimateBase withProductCategory(JsonNullable<? extends ProductCategoryEnum> productCategory) {
        Utils.checkNotNull(productCategory, "productCategory");
        this.productCategory = productCategory;
        return this;
    }

    /**
     * Defaults to 1.0. The quantity of the item.
     */
    public TransactionItemEstimateBase withQuantity(QuantityOfTheProduct quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }


    /**
     * Defaults to 1.0. The quantity of the item.
     */
    public TransactionItemEstimateBase withQuantity(Optional<? extends QuantityOfTheProduct> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The total amount of the item.
     */
    public TransactionItemEstimateBase withAmount(TotalAmountOfThisTransactionItemAfterDiscounts amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Defaults to false. Indicates whether the item is exempt from tax.
     */
    public TransactionItemEstimateBase withExempt(boolean exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = Optional.ofNullable(exempt);
        return this;
    }


    /**
     * Defaults to false. Indicates whether the item is exempt from tax.
     */
    public TransactionItemEstimateBase withExempt(Optional<Boolean> exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = exempt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionItemEstimateBase other = (TransactionItemEstimateBase) o;
        return 
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.externalProductId, other.externalProductId) &&
            Utils.enhancedDeepEquals(this.productName, other.productName) &&
            Utils.enhancedDeepEquals(this.productDescription, other.productDescription) &&
            Utils.enhancedDeepEquals(this.productSource, other.productSource) &&
            Utils.enhancedDeepEquals(this.productSubcategory, other.productSubcategory) &&
            Utils.enhancedDeepEquals(this.productCategory, other.productCategory) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.exempt, other.exempt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalId, date, description,
            externalProductId, productName, productDescription,
            productSource, productSubcategory, productCategory,
            quantity, amount, exempt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionItemEstimateBase.class,
                "externalId", externalId,
                "date", date,
                "description", description,
                "externalProductId", externalProductId,
                "productName", productName,
                "productDescription", productDescription,
                "productSource", productSource,
                "productSubcategory", productSubcategory,
                "productCategory", productCategory,
                "quantity", quantity,
                "amount", amount,
                "exempt", exempt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> externalId = JsonNullable.undefined();

        private OffsetDateTime date;

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<String> externalProductId = JsonNullable.undefined();

        private JsonNullable<String> productName = JsonNullable.undefined();

        private JsonNullable<String> productDescription = JsonNullable.undefined();

        private JsonNullable<? extends SourceEnum> productSource = JsonNullable.undefined();

        private JsonNullable<? extends ProductSubCategoryEnum> productSubcategory = JsonNullable.undefined();

        private JsonNullable<? extends ProductCategoryEnum> productCategory = JsonNullable.undefined();

        private Optional<? extends QuantityOfTheProduct> quantity = Optional.empty();

        private TotalAmountOfThisTransactionItemAfterDiscounts amount;

        private Optional<Boolean> exempt;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique identifier for the transaction item.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        /**
         * A unique identifier for the transaction item.
         */
        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * The date of the transaction item.
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * A description of the item.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the item.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * External product identifier. If not found and product_subcategory
         *         and product_category are not provided, an error occurs.
         */
        public Builder externalProductId(String externalProductId) {
            Utils.checkNotNull(externalProductId, "externalProductId");
            this.externalProductId = JsonNullable.of(externalProductId);
            return this;
        }

        /**
         * External product identifier. If not found and product_subcategory
         *         and product_category are not provided, an error occurs.
         */
        public Builder externalProductId(JsonNullable<String> externalProductId) {
            Utils.checkNotNull(externalProductId, "externalProductId");
            this.externalProductId = externalProductId;
            return this;
        }


        /**
         * Name of the product. Used if creating a new product.
         */
        public Builder productName(String productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = JsonNullable.of(productName);
            return this;
        }

        /**
         * Name of the product. Used if creating a new product.
         */
        public Builder productName(JsonNullable<String> productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = productName;
            return this;
        }


        /**
         * Description of the product. Used if creating a new product.
         */
        public Builder productDescription(String productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = JsonNullable.of(productDescription);
            return this;
        }

        /**
         * Description of the product. Used if creating a new product.
         */
        public Builder productDescription(JsonNullable<String> productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = productDescription;
            return this;
        }


        public Builder productSource(SourceEnum productSource) {
            Utils.checkNotNull(productSource, "productSource");
            this.productSource = JsonNullable.of(productSource);
            return this;
        }

        public Builder productSource(JsonNullable<? extends SourceEnum> productSource) {
            Utils.checkNotNull(productSource, "productSource");
            this.productSource = productSource;
            return this;
        }


        /**
         * Subcategory of the product. Required if product_category is used
         *         in place of external_product_id.
         */
        public Builder productSubcategory(ProductSubCategoryEnum productSubcategory) {
            Utils.checkNotNull(productSubcategory, "productSubcategory");
            this.productSubcategory = JsonNullable.of(productSubcategory);
            return this;
        }

        /**
         * Subcategory of the product. Required if product_category is used
         *         in place of external_product_id.
         */
        public Builder productSubcategory(JsonNullable<? extends ProductSubCategoryEnum> productSubcategory) {
            Utils.checkNotNull(productSubcategory, "productSubcategory");
            this.productSubcategory = productSubcategory;
            return this;
        }


        /**
         * Category of the product. Required if product_subcategory is used
         *         in place of external_product_id.
         */
        public Builder productCategory(ProductCategoryEnum productCategory) {
            Utils.checkNotNull(productCategory, "productCategory");
            this.productCategory = JsonNullable.of(productCategory);
            return this;
        }

        /**
         * Category of the product. Required if product_subcategory is used
         *         in place of external_product_id.
         */
        public Builder productCategory(JsonNullable<? extends ProductCategoryEnum> productCategory) {
            Utils.checkNotNull(productCategory, "productCategory");
            this.productCategory = productCategory;
            return this;
        }


        /**
         * Defaults to 1.0. The quantity of the item.
         */
        public Builder quantity(QuantityOfTheProduct quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * Defaults to 1.0. The quantity of the item.
         */
        public Builder quantity(Optional<? extends QuantityOfTheProduct> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * The total amount of the item.
         */
        public Builder amount(TotalAmountOfThisTransactionItemAfterDiscounts amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Defaults to false. Indicates whether the item is exempt from tax.
         */
        public Builder exempt(boolean exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = Optional.ofNullable(exempt);
            return this;
        }

        /**
         * Defaults to false. Indicates whether the item is exempt from tax.
         */
        public Builder exempt(Optional<Boolean> exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = exempt;
            return this;
        }

        public TransactionItemEstimateBase build() {
            if (exempt == null) {
                exempt = _SINGLETON_VALUE_Exempt.value();
            }

            return new TransactionItemEstimateBase(
                externalId, date, description,
                externalProductId, productName, productDescription,
                productSource, productSubcategory, productCategory,
                quantity, amount, exempt);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Exempt =
                new LazySingletonValue<>(
                        "exempt",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
