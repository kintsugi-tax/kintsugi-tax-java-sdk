/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class TransactionItemEstimateResponse {
    /**
     * A unique identifier for the transaction item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private Optional<String> externalId;

    /**
     * The date of the transaction item.
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * A description of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * External product identifier. If not found and product_subcategory
     * and product_category are not provided, an error occurs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_product_id")
    private Optional<String> externalProductId;

    /**
     * Name of the product. Used if creating a new product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_name")
    private Optional<String> productName;

    /**
     * Description of the product. Used if creating a new product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_description")
    private Optional<String> productDescription;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_source")
    private Optional<? extends SourceEnum> productSource;

    /**
     * Subcategory of the product. Required if product_category is used
     * in place of external_product_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_subcategory")
    private Optional<String> productSubcategory;

    /**
     * Category of the product. Required if product_subcategory is used
     * in place of external_product_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_category")
    private Optional<String> productCategory;

    /**
     * Defaults to 1.0. The quantity of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<String> quantity;

    /**
     * The total amount of the item.
     */
    @JsonProperty("amount")
    private String amount;

    /**
     * Indicates whether the transaction item is exempt from tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt")
    private Optional<Boolean> exempt;

    /**
     * The total tax amount for the transaction item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private Optional<String> taxAmount;

    /**
     * The taxable amount for the transaction item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private Optional<String> taxableAmount;

    /**
     * The tax rate applied to the transaction item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private Optional<String> taxRate;

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt_reason")
    private Optional<? extends TaxExemptionEnum> exemptReason;

    /**
     * List of tax items applied to the transaction item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_items")
    private Optional<? extends List<TaxItemEstimate>> taxItems;

    @JsonCreator
    public TransactionItemEstimateResponse(
            @JsonProperty("external_id") Optional<String> externalId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("external_product_id") Optional<String> externalProductId,
            @JsonProperty("product_name") Optional<String> productName,
            @JsonProperty("product_description") Optional<String> productDescription,
            @JsonProperty("product_source") Optional<? extends SourceEnum> productSource,
            @JsonProperty("product_subcategory") Optional<String> productSubcategory,
            @JsonProperty("product_category") Optional<String> productCategory,
            @JsonProperty("quantity") Optional<String> quantity,
            @JsonProperty("amount") String amount,
            @JsonProperty("exempt") Optional<Boolean> exempt,
            @JsonProperty("tax_amount") Optional<String> taxAmount,
            @JsonProperty("taxable_amount") Optional<String> taxableAmount,
            @JsonProperty("tax_rate") Optional<String> taxRate,
            @JsonProperty("exempt_reason") Optional<? extends TaxExemptionEnum> exemptReason,
            @JsonProperty("tax_items") Optional<? extends List<TaxItemEstimate>> taxItems) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(externalProductId, "externalProductId");
        Utils.checkNotNull(productName, "productName");
        Utils.checkNotNull(productDescription, "productDescription");
        Utils.checkNotNull(productSource, "productSource");
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        Utils.checkNotNull(productCategory, "productCategory");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(exempt, "exempt");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(taxRate, "taxRate");
        Utils.checkNotNull(exemptReason, "exemptReason");
        Utils.checkNotNull(taxItems, "taxItems");
        this.externalId = externalId;
        this.date = date;
        this.description = description;
        this.externalProductId = externalProductId;
        this.productName = productName;
        this.productDescription = productDescription;
        this.productSource = productSource;
        this.productSubcategory = productSubcategory;
        this.productCategory = productCategory;
        this.quantity = quantity;
        this.amount = amount;
        this.exempt = exempt;
        this.taxAmount = taxAmount;
        this.taxableAmount = taxableAmount;
        this.taxRate = taxRate;
        this.exemptReason = exemptReason;
        this.taxItems = taxItems;
    }
    
    public TransactionItemEstimateResponse(
            OffsetDateTime date,
            String amount) {
        this(Optional.empty(), date, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), amount, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier for the transaction item.
     */
    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    /**
     * The date of the transaction item.
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * A description of the item.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * External product identifier. If not found and product_subcategory
     * and product_category are not provided, an error occurs.
     */
    @JsonIgnore
    public Optional<String> externalProductId() {
        return externalProductId;
    }

    /**
     * Name of the product. Used if creating a new product.
     */
    @JsonIgnore
    public Optional<String> productName() {
        return productName;
    }

    /**
     * Description of the product. Used if creating a new product.
     */
    @JsonIgnore
    public Optional<String> productDescription() {
        return productDescription;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceEnum> productSource() {
        return (Optional<SourceEnum>) productSource;
    }

    /**
     * Subcategory of the product. Required if product_category is used
     * in place of external_product_id.
     */
    @JsonIgnore
    public Optional<String> productSubcategory() {
        return productSubcategory;
    }

    /**
     * Category of the product. Required if product_subcategory is used
     * in place of external_product_id.
     */
    @JsonIgnore
    public Optional<String> productCategory() {
        return productCategory;
    }

    /**
     * Defaults to 1.0. The quantity of the item.
     */
    @JsonIgnore
    public Optional<String> quantity() {
        return quantity;
    }

    /**
     * The total amount of the item.
     */
    @JsonIgnore
    public String amount() {
        return amount;
    }

    /**
     * Indicates whether the transaction item is exempt from tax.
     */
    @JsonIgnore
    public Optional<Boolean> exempt() {
        return exempt;
    }

    /**
     * The total tax amount for the transaction item.
     */
    @JsonIgnore
    public Optional<String> taxAmount() {
        return taxAmount;
    }

    /**
     * The taxable amount for the transaction item.
     */
    @JsonIgnore
    public Optional<String> taxableAmount() {
        return taxableAmount;
    }

    /**
     * The tax rate applied to the transaction item.
     */
    @JsonIgnore
    public Optional<String> taxRate() {
        return taxRate;
    }

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxExemptionEnum> exemptReason() {
        return (Optional<TaxExemptionEnum>) exemptReason;
    }

    /**
     * List of tax items applied to the transaction item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TaxItemEstimate>> taxItems() {
        return (Optional<List<TaxItemEstimate>>) taxItems;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for the transaction item.
     */
    public TransactionItemEstimateResponse withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }


    /**
     * A unique identifier for the transaction item.
     */
    public TransactionItemEstimateResponse withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * The date of the transaction item.
     */
    public TransactionItemEstimateResponse withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * A description of the item.
     */
    public TransactionItemEstimateResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A description of the item.
     */
    public TransactionItemEstimateResponse withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * External product identifier. If not found and product_subcategory
     * and product_category are not provided, an error occurs.
     */
    public TransactionItemEstimateResponse withExternalProductId(String externalProductId) {
        Utils.checkNotNull(externalProductId, "externalProductId");
        this.externalProductId = Optional.ofNullable(externalProductId);
        return this;
    }


    /**
     * External product identifier. If not found and product_subcategory
     * and product_category are not provided, an error occurs.
     */
    public TransactionItemEstimateResponse withExternalProductId(Optional<String> externalProductId) {
        Utils.checkNotNull(externalProductId, "externalProductId");
        this.externalProductId = externalProductId;
        return this;
    }

    /**
     * Name of the product. Used if creating a new product.
     */
    public TransactionItemEstimateResponse withProductName(String productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = Optional.ofNullable(productName);
        return this;
    }


    /**
     * Name of the product. Used if creating a new product.
     */
    public TransactionItemEstimateResponse withProductName(Optional<String> productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = productName;
        return this;
    }

    /**
     * Description of the product. Used if creating a new product.
     */
    public TransactionItemEstimateResponse withProductDescription(String productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = Optional.ofNullable(productDescription);
        return this;
    }


    /**
     * Description of the product. Used if creating a new product.
     */
    public TransactionItemEstimateResponse withProductDescription(Optional<String> productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = productDescription;
        return this;
    }

    public TransactionItemEstimateResponse withProductSource(SourceEnum productSource) {
        Utils.checkNotNull(productSource, "productSource");
        this.productSource = Optional.ofNullable(productSource);
        return this;
    }


    public TransactionItemEstimateResponse withProductSource(Optional<? extends SourceEnum> productSource) {
        Utils.checkNotNull(productSource, "productSource");
        this.productSource = productSource;
        return this;
    }

    /**
     * Subcategory of the product. Required if product_category is used
     * in place of external_product_id.
     */
    public TransactionItemEstimateResponse withProductSubcategory(String productSubcategory) {
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        this.productSubcategory = Optional.ofNullable(productSubcategory);
        return this;
    }


    /**
     * Subcategory of the product. Required if product_category is used
     * in place of external_product_id.
     */
    public TransactionItemEstimateResponse withProductSubcategory(Optional<String> productSubcategory) {
        Utils.checkNotNull(productSubcategory, "productSubcategory");
        this.productSubcategory = productSubcategory;
        return this;
    }

    /**
     * Category of the product. Required if product_subcategory is used
     * in place of external_product_id.
     */
    public TransactionItemEstimateResponse withProductCategory(String productCategory) {
        Utils.checkNotNull(productCategory, "productCategory");
        this.productCategory = Optional.ofNullable(productCategory);
        return this;
    }


    /**
     * Category of the product. Required if product_subcategory is used
     * in place of external_product_id.
     */
    public TransactionItemEstimateResponse withProductCategory(Optional<String> productCategory) {
        Utils.checkNotNull(productCategory, "productCategory");
        this.productCategory = productCategory;
        return this;
    }

    /**
     * Defaults to 1.0. The quantity of the item.
     */
    public TransactionItemEstimateResponse withQuantity(String quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }


    /**
     * Defaults to 1.0. The quantity of the item.
     */
    public TransactionItemEstimateResponse withQuantity(Optional<String> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The total amount of the item.
     */
    public TransactionItemEstimateResponse withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Indicates whether the transaction item is exempt from tax.
     */
    public TransactionItemEstimateResponse withExempt(boolean exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = Optional.ofNullable(exempt);
        return this;
    }


    /**
     * Indicates whether the transaction item is exempt from tax.
     */
    public TransactionItemEstimateResponse withExempt(Optional<Boolean> exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = exempt;
        return this;
    }

    /**
     * The total tax amount for the transaction item.
     */
    public TransactionItemEstimateResponse withTaxAmount(String taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = Optional.ofNullable(taxAmount);
        return this;
    }


    /**
     * The total tax amount for the transaction item.
     */
    public TransactionItemEstimateResponse withTaxAmount(Optional<String> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * The taxable amount for the transaction item.
     */
    public TransactionItemEstimateResponse withTaxableAmount(String taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = Optional.ofNullable(taxableAmount);
        return this;
    }


    /**
     * The taxable amount for the transaction item.
     */
    public TransactionItemEstimateResponse withTaxableAmount(Optional<String> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    /**
     * The tax rate applied to the transaction item.
     */
    public TransactionItemEstimateResponse withTaxRate(String taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = Optional.ofNullable(taxRate);
        return this;
    }


    /**
     * The tax rate applied to the transaction item.
     */
    public TransactionItemEstimateResponse withTaxRate(Optional<String> taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = taxRate;
        return this;
    }

    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    public TransactionItemEstimateResponse withExemptReason(TaxExemptionEnum exemptReason) {
        Utils.checkNotNull(exemptReason, "exemptReason");
        this.exemptReason = Optional.ofNullable(exemptReason);
        return this;
    }


    /**
     * This enum is used to determine if a transaction is exempt from tax.
     */
    public TransactionItemEstimateResponse withExemptReason(Optional<? extends TaxExemptionEnum> exemptReason) {
        Utils.checkNotNull(exemptReason, "exemptReason");
        this.exemptReason = exemptReason;
        return this;
    }

    /**
     * List of tax items applied to the transaction item.
     */
    public TransactionItemEstimateResponse withTaxItems(List<TaxItemEstimate> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = Optional.ofNullable(taxItems);
        return this;
    }


    /**
     * List of tax items applied to the transaction item.
     */
    public TransactionItemEstimateResponse withTaxItems(Optional<? extends List<TaxItemEstimate>> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = taxItems;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionItemEstimateResponse other = (TransactionItemEstimateResponse) o;
        return 
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.externalProductId, other.externalProductId) &&
            Utils.enhancedDeepEquals(this.productName, other.productName) &&
            Utils.enhancedDeepEquals(this.productDescription, other.productDescription) &&
            Utils.enhancedDeepEquals(this.productSource, other.productSource) &&
            Utils.enhancedDeepEquals(this.productSubcategory, other.productSubcategory) &&
            Utils.enhancedDeepEquals(this.productCategory, other.productCategory) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.exempt, other.exempt) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.exemptReason, other.exemptReason) &&
            Utils.enhancedDeepEquals(this.taxItems, other.taxItems);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalId, date, description,
            externalProductId, productName, productDescription,
            productSource, productSubcategory, productCategory,
            quantity, amount, exempt,
            taxAmount, taxableAmount, taxRate,
            exemptReason, taxItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionItemEstimateResponse.class,
                "externalId", externalId,
                "date", date,
                "description", description,
                "externalProductId", externalProductId,
                "productName", productName,
                "productDescription", productDescription,
                "productSource", productSource,
                "productSubcategory", productSubcategory,
                "productCategory", productCategory,
                "quantity", quantity,
                "amount", amount,
                "exempt", exempt,
                "taxAmount", taxAmount,
                "taxableAmount", taxableAmount,
                "taxRate", taxRate,
                "exemptReason", exemptReason,
                "taxItems", taxItems);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> externalId = Optional.empty();

        private OffsetDateTime date;

        private Optional<String> description = Optional.empty();

        private Optional<String> externalProductId = Optional.empty();

        private Optional<String> productName = Optional.empty();

        private Optional<String> productDescription = Optional.empty();

        private Optional<? extends SourceEnum> productSource = Optional.empty();

        private Optional<String> productSubcategory = Optional.empty();

        private Optional<String> productCategory = Optional.empty();

        private Optional<String> quantity;

        private String amount;

        private Optional<Boolean> exempt;

        private Optional<String> taxAmount;

        private Optional<String> taxableAmount;

        private Optional<String> taxRate;

        private Optional<? extends TaxExemptionEnum> exemptReason = Optional.empty();

        private Optional<? extends List<TaxItemEstimate>> taxItems = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique identifier for the transaction item.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        /**
         * A unique identifier for the transaction item.
         */
        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * The date of the transaction item.
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * A description of the item.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A description of the item.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * External product identifier. If not found and product_subcategory
         * and product_category are not provided, an error occurs.
         */
        public Builder externalProductId(String externalProductId) {
            Utils.checkNotNull(externalProductId, "externalProductId");
            this.externalProductId = Optional.ofNullable(externalProductId);
            return this;
        }

        /**
         * External product identifier. If not found and product_subcategory
         * and product_category are not provided, an error occurs.
         */
        public Builder externalProductId(Optional<String> externalProductId) {
            Utils.checkNotNull(externalProductId, "externalProductId");
            this.externalProductId = externalProductId;
            return this;
        }


        /**
         * Name of the product. Used if creating a new product.
         */
        public Builder productName(String productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = Optional.ofNullable(productName);
            return this;
        }

        /**
         * Name of the product. Used if creating a new product.
         */
        public Builder productName(Optional<String> productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = productName;
            return this;
        }


        /**
         * Description of the product. Used if creating a new product.
         */
        public Builder productDescription(String productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = Optional.ofNullable(productDescription);
            return this;
        }

        /**
         * Description of the product. Used if creating a new product.
         */
        public Builder productDescription(Optional<String> productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = productDescription;
            return this;
        }


        public Builder productSource(SourceEnum productSource) {
            Utils.checkNotNull(productSource, "productSource");
            this.productSource = Optional.ofNullable(productSource);
            return this;
        }

        public Builder productSource(Optional<? extends SourceEnum> productSource) {
            Utils.checkNotNull(productSource, "productSource");
            this.productSource = productSource;
            return this;
        }


        /**
         * Subcategory of the product. Required if product_category is used
         * in place of external_product_id.
         */
        public Builder productSubcategory(String productSubcategory) {
            Utils.checkNotNull(productSubcategory, "productSubcategory");
            this.productSubcategory = Optional.ofNullable(productSubcategory);
            return this;
        }

        /**
         * Subcategory of the product. Required if product_category is used
         * in place of external_product_id.
         */
        public Builder productSubcategory(Optional<String> productSubcategory) {
            Utils.checkNotNull(productSubcategory, "productSubcategory");
            this.productSubcategory = productSubcategory;
            return this;
        }


        /**
         * Category of the product. Required if product_subcategory is used
         * in place of external_product_id.
         */
        public Builder productCategory(String productCategory) {
            Utils.checkNotNull(productCategory, "productCategory");
            this.productCategory = Optional.ofNullable(productCategory);
            return this;
        }

        /**
         * Category of the product. Required if product_subcategory is used
         * in place of external_product_id.
         */
        public Builder productCategory(Optional<String> productCategory) {
            Utils.checkNotNull(productCategory, "productCategory");
            this.productCategory = productCategory;
            return this;
        }


        /**
         * Defaults to 1.0. The quantity of the item.
         */
        public Builder quantity(String quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * Defaults to 1.0. The quantity of the item.
         */
        public Builder quantity(Optional<String> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * The total amount of the item.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Indicates whether the transaction item is exempt from tax.
         */
        public Builder exempt(boolean exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = Optional.ofNullable(exempt);
            return this;
        }

        /**
         * Indicates whether the transaction item is exempt from tax.
         */
        public Builder exempt(Optional<Boolean> exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = exempt;
            return this;
        }


        /**
         * The total tax amount for the transaction item.
         */
        public Builder taxAmount(String taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        /**
         * The total tax amount for the transaction item.
         */
        public Builder taxAmount(Optional<String> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }


        /**
         * The taxable amount for the transaction item.
         */
        public Builder taxableAmount(String taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = Optional.ofNullable(taxableAmount);
            return this;
        }

        /**
         * The taxable amount for the transaction item.
         */
        public Builder taxableAmount(Optional<String> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        /**
         * The tax rate applied to the transaction item.
         */
        public Builder taxRate(String taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = Optional.ofNullable(taxRate);
            return this;
        }

        /**
         * The tax rate applied to the transaction item.
         */
        public Builder taxRate(Optional<String> taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = taxRate;
            return this;
        }


        /**
         * This enum is used to determine if a transaction is exempt from tax.
         */
        public Builder exemptReason(TaxExemptionEnum exemptReason) {
            Utils.checkNotNull(exemptReason, "exemptReason");
            this.exemptReason = Optional.ofNullable(exemptReason);
            return this;
        }

        /**
         * This enum is used to determine if a transaction is exempt from tax.
         */
        public Builder exemptReason(Optional<? extends TaxExemptionEnum> exemptReason) {
            Utils.checkNotNull(exemptReason, "exemptReason");
            this.exemptReason = exemptReason;
            return this;
        }


        /**
         * List of tax items applied to the transaction item.
         */
        public Builder taxItems(List<TaxItemEstimate> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = Optional.ofNullable(taxItems);
            return this;
        }

        /**
         * List of tax items applied to the transaction item.
         */
        public Builder taxItems(Optional<? extends List<TaxItemEstimate>> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = taxItems;
            return this;
        }

        public TransactionItemEstimateResponse build() {
            if (quantity == null) {
                quantity = _SINGLETON_VALUE_Quantity.value();
            }
            if (exempt == null) {
                exempt = _SINGLETON_VALUE_Exempt.value();
            }
            if (taxAmount == null) {
                taxAmount = _SINGLETON_VALUE_TaxAmount.value();
            }
            if (taxableAmount == null) {
                taxableAmount = _SINGLETON_VALUE_TaxableAmount.value();
            }
            if (taxRate == null) {
                taxRate = _SINGLETON_VALUE_TaxRate.value();
            }

            return new TransactionItemEstimateResponse(
                externalId, date, description,
                externalProductId, productName, productDescription,
                productSource, productSubcategory, productCategory,
                quantity, amount, exempt,
                taxAmount, taxableAmount, taxRate,
                exemptReason, taxItems);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Quantity =
                new LazySingletonValue<>(
                        "quantity",
                        "\"1.0\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Exempt =
                new LazySingletonValue<>(
                        "exempt",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxAmount =
                new LazySingletonValue<>(
                        "tax_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxableAmount =
                new LazySingletonValue<>(
                        "taxable_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxRate =
                new LazySingletonValue<>(
                        "tax_rate",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});
    }
}
