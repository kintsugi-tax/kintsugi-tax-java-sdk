/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransactionItemRead {
    /**
     * External item identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;

    /**
     * Organization identifier.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("organization_id")
    private Optional<String> organizationId;

    /**
     * Date/time of item.
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Item description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * External product identifier.
     */
    @JsonProperty("external_product_id")
    private String externalProductId;

    /**
     * Product name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    private JsonNullable<String> product;

    /**
     * Product identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_id")
    private JsonNullable<String> productId;

    /**
     * Product name (detailed)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_name")
    private JsonNullable<String> productName;

    /**
     * Product description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_description")
    private JsonNullable<String> productDescription;

    /**
     * Quantity of item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<String> quantity;

    /**
     * Item amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * Imported tax amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount_imported")
    private Optional<String> taxAmountImported;

    /**
     * Imported tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_imported")
    private Optional<String> taxRateImported;

    /**
     * Calculated tax amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount_calculated")
    private Optional<String> taxAmountCalculated;

    /**
     * Calculated tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_calculated")
    private Optional<String> taxRateCalculated;

    /**
     * Original currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_currency")
    private JsonNullable<? extends CurrencyEnum> originalCurrency;

    /**
     * Destination currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_currency")
    private JsonNullable<? extends CurrencyEnum> destinationCurrency;

    /**
     * Converted item amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_amount")
    private JsonNullable<String> convertedAmount;

    /**
     * Converted taxable amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_taxable_amount")
    private JsonNullable<String> convertedTaxableAmount;

    /**
     * Converted imported tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_tax_amount_imported")
    private JsonNullable<String> convertedTaxAmountImported;

    /**
     * Converted calculated tax amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_tax_amount_calculated")
    private JsonNullable<String> convertedTaxAmountCalculated;

    /**
     * Converted total discount amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_total_discount")
    private JsonNullable<String> convertedTotalDiscount;

    /**
     * Converted subtotal amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_subtotal")
    private JsonNullable<String> convertedSubtotal;

    /**
     * Taxable amount for the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private Optional<String> taxableAmount;

    /**
     * Tax exemption status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_exemption")
    private JsonNullable<? extends TaxExemptionEnum> taxExemption;

    /**
     * Indicates if the item is exempt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt")
    private Optional<Boolean> exempt;

    /**
     * The unique transaction item identifier.
     */
    @JsonProperty("id")
    private String id;

    /**
     * List of tax items associated with the transaction item.
     */
    @JsonProperty("tax_items")
    private List<TaxItemRead> taxItems;

    /**
     * Total discount amount applied to this transaction item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount")
    private JsonNullable<String> totalDiscount;

    /**
     * Subtotal amount before any discount is applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtotal")
    private JsonNullable<String> subtotal;

    @JsonCreator
    public TransactionItemRead(
            @JsonProperty("external_id") JsonNullable<String> externalId,
            @JsonProperty("organization_id") Optional<String> organizationId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("external_product_id") String externalProductId,
            @JsonProperty("product") JsonNullable<String> product,
            @JsonProperty("product_id") JsonNullable<String> productId,
            @JsonProperty("product_name") JsonNullable<String> productName,
            @JsonProperty("product_description") JsonNullable<String> productDescription,
            @JsonProperty("quantity") Optional<String> quantity,
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("tax_amount_imported") Optional<String> taxAmountImported,
            @JsonProperty("tax_rate_imported") Optional<String> taxRateImported,
            @JsonProperty("tax_amount_calculated") Optional<String> taxAmountCalculated,
            @JsonProperty("tax_rate_calculated") Optional<String> taxRateCalculated,
            @JsonProperty("original_currency") JsonNullable<? extends CurrencyEnum> originalCurrency,
            @JsonProperty("destination_currency") JsonNullable<? extends CurrencyEnum> destinationCurrency,
            @JsonProperty("converted_amount") JsonNullable<String> convertedAmount,
            @JsonProperty("converted_taxable_amount") JsonNullable<String> convertedTaxableAmount,
            @JsonProperty("converted_tax_amount_imported") JsonNullable<String> convertedTaxAmountImported,
            @JsonProperty("converted_tax_amount_calculated") JsonNullable<String> convertedTaxAmountCalculated,
            @JsonProperty("converted_total_discount") JsonNullable<String> convertedTotalDiscount,
            @JsonProperty("converted_subtotal") JsonNullable<String> convertedSubtotal,
            @JsonProperty("taxable_amount") Optional<String> taxableAmount,
            @JsonProperty("tax_exemption") JsonNullable<? extends TaxExemptionEnum> taxExemption,
            @JsonProperty("exempt") Optional<Boolean> exempt,
            @JsonProperty("id") String id,
            @JsonProperty("tax_items") List<TaxItemRead> taxItems,
            @JsonProperty("total_discount") JsonNullable<String> totalDiscount,
            @JsonProperty("subtotal") JsonNullable<String> subtotal) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(externalProductId, "externalProductId");
        Utils.checkNotNull(product, "product");
        Utils.checkNotNull(productId, "productId");
        Utils.checkNotNull(productName, "productName");
        Utils.checkNotNull(productDescription, "productDescription");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(taxExemption, "taxExemption");
        Utils.checkNotNull(exempt, "exempt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(taxItems, "taxItems");
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        Utils.checkNotNull(subtotal, "subtotal");
        this.externalId = externalId;
        this.organizationId = organizationId;
        this.date = date;
        this.description = description;
        this.externalProductId = externalProductId;
        this.product = product;
        this.productId = productId;
        this.productName = productName;
        this.productDescription = productDescription;
        this.quantity = quantity;
        this.amount = amount;
        this.taxAmountImported = taxAmountImported;
        this.taxRateImported = taxRateImported;
        this.taxAmountCalculated = taxAmountCalculated;
        this.taxRateCalculated = taxRateCalculated;
        this.originalCurrency = originalCurrency;
        this.destinationCurrency = destinationCurrency;
        this.convertedAmount = convertedAmount;
        this.convertedTaxableAmount = convertedTaxableAmount;
        this.convertedTaxAmountImported = convertedTaxAmountImported;
        this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
        this.convertedTotalDiscount = convertedTotalDiscount;
        this.convertedSubtotal = convertedSubtotal;
        this.taxableAmount = taxableAmount;
        this.taxExemption = taxExemption;
        this.exempt = exempt;
        this.id = id;
        this.taxItems = taxItems;
        this.totalDiscount = totalDiscount;
        this.subtotal = subtotal;
    }
    
    public TransactionItemRead(
            OffsetDateTime date,
            String externalProductId,
            String id,
            List<TaxItemRead> taxItems) {
        this(JsonNullable.undefined(), Optional.empty(), date,
            JsonNullable.undefined(), externalProductId, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), id,
            taxItems, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * External item identifier.
     */
    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    /**
     * Organization identifier.
     */
    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    /**
     * Date/time of item.
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Item description
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * External product identifier.
     */
    @JsonIgnore
    public String externalProductId() {
        return externalProductId;
    }

    /**
     * Product name
     */
    @JsonIgnore
    public JsonNullable<String> product() {
        return product;
    }

    /**
     * Product identifier.
     */
    @JsonIgnore
    public JsonNullable<String> productId() {
        return productId;
    }

    /**
     * Product name (detailed)
     */
    @JsonIgnore
    public JsonNullable<String> productName() {
        return productName;
    }

    /**
     * Product description
     */
    @JsonIgnore
    public JsonNullable<String> productDescription() {
        return productDescription;
    }

    /**
     * Quantity of item.
     */
    @JsonIgnore
    public Optional<String> quantity() {
        return quantity;
    }

    /**
     * Item amount.
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * Imported tax amount for the item.
     */
    @JsonIgnore
    public Optional<String> taxAmountImported() {
        return taxAmountImported;
    }

    /**
     * Imported tax rate.
     */
    @JsonIgnore
    public Optional<String> taxRateImported() {
        return taxRateImported;
    }

    /**
     * Calculated tax amount for the item.
     */
    @JsonIgnore
    public Optional<String> taxAmountCalculated() {
        return taxAmountCalculated;
    }

    /**
     * Calculated tax rate.
     */
    @JsonIgnore
    public Optional<String> taxRateCalculated() {
        return taxRateCalculated;
    }

    /**
     * Original currency code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyEnum> originalCurrency() {
        return (JsonNullable<CurrencyEnum>) originalCurrency;
    }

    /**
     * Destination currency code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyEnum> destinationCurrency() {
        return (JsonNullable<CurrencyEnum>) destinationCurrency;
    }

    /**
     * Converted item amount.
     */
    @JsonIgnore
    public JsonNullable<String> convertedAmount() {
        return convertedAmount;
    }

    /**
     * Converted taxable amount.
     */
    @JsonIgnore
    public JsonNullable<String> convertedTaxableAmount() {
        return convertedTaxableAmount;
    }

    /**
     * Converted imported tax amount.
     */
    @JsonIgnore
    public JsonNullable<String> convertedTaxAmountImported() {
        return convertedTaxAmountImported;
    }

    /**
     * Converted calculated tax amount
     */
    @JsonIgnore
    public JsonNullable<String> convertedTaxAmountCalculated() {
        return convertedTaxAmountCalculated;
    }

    /**
     * Converted total discount amount.
     */
    @JsonIgnore
    public JsonNullable<String> convertedTotalDiscount() {
        return convertedTotalDiscount;
    }

    /**
     * Converted subtotal amount.
     */
    @JsonIgnore
    public JsonNullable<String> convertedSubtotal() {
        return convertedSubtotal;
    }

    /**
     * Taxable amount for the item.
     */
    @JsonIgnore
    public Optional<String> taxableAmount() {
        return taxableAmount;
    }

    /**
     * Tax exemption status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TaxExemptionEnum> taxExemption() {
        return (JsonNullable<TaxExemptionEnum>) taxExemption;
    }

    /**
     * Indicates if the item is exempt.
     */
    @JsonIgnore
    public Optional<Boolean> exempt() {
        return exempt;
    }

    /**
     * The unique transaction item identifier.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * List of tax items associated with the transaction item.
     */
    @JsonIgnore
    public List<TaxItemRead> taxItems() {
        return taxItems;
    }

    /**
     * Total discount amount applied to this transaction item.
     */
    @JsonIgnore
    public JsonNullable<String> totalDiscount() {
        return totalDiscount;
    }

    /**
     * Subtotal amount before any discount is applied.
     */
    @JsonIgnore
    public JsonNullable<String> subtotal() {
        return subtotal;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * External item identifier.
     */
    public TransactionItemRead withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    /**
     * External item identifier.
     */
    public TransactionItemRead withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Organization identifier.
     */
    public TransactionItemRead withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }


    /**
     * Organization identifier.
     */
    public TransactionItemRead withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Date/time of item.
     */
    public TransactionItemRead withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Item description
     */
    public TransactionItemRead withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Item description
     */
    public TransactionItemRead withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * External product identifier.
     */
    public TransactionItemRead withExternalProductId(String externalProductId) {
        Utils.checkNotNull(externalProductId, "externalProductId");
        this.externalProductId = externalProductId;
        return this;
    }

    /**
     * Product name
     */
    public TransactionItemRead withProduct(String product) {
        Utils.checkNotNull(product, "product");
        this.product = JsonNullable.of(product);
        return this;
    }

    /**
     * Product name
     */
    public TransactionItemRead withProduct(JsonNullable<String> product) {
        Utils.checkNotNull(product, "product");
        this.product = product;
        return this;
    }

    /**
     * Product identifier.
     */
    public TransactionItemRead withProductId(String productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = JsonNullable.of(productId);
        return this;
    }

    /**
     * Product identifier.
     */
    public TransactionItemRead withProductId(JsonNullable<String> productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = productId;
        return this;
    }

    /**
     * Product name (detailed)
     */
    public TransactionItemRead withProductName(String productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = JsonNullable.of(productName);
        return this;
    }

    /**
     * Product name (detailed)
     */
    public TransactionItemRead withProductName(JsonNullable<String> productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = productName;
        return this;
    }

    /**
     * Product description
     */
    public TransactionItemRead withProductDescription(String productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = JsonNullable.of(productDescription);
        return this;
    }

    /**
     * Product description
     */
    public TransactionItemRead withProductDescription(JsonNullable<String> productDescription) {
        Utils.checkNotNull(productDescription, "productDescription");
        this.productDescription = productDescription;
        return this;
    }

    /**
     * Quantity of item.
     */
    public TransactionItemRead withQuantity(String quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }


    /**
     * Quantity of item.
     */
    public TransactionItemRead withQuantity(Optional<String> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Item amount.
     */
    public TransactionItemRead withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * Item amount.
     */
    public TransactionItemRead withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Imported tax amount for the item.
     */
    public TransactionItemRead withTaxAmountImported(String taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = Optional.ofNullable(taxAmountImported);
        return this;
    }


    /**
     * Imported tax amount for the item.
     */
    public TransactionItemRead withTaxAmountImported(Optional<String> taxAmountImported) {
        Utils.checkNotNull(taxAmountImported, "taxAmountImported");
        this.taxAmountImported = taxAmountImported;
        return this;
    }

    /**
     * Imported tax rate.
     */
    public TransactionItemRead withTaxRateImported(String taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = Optional.ofNullable(taxRateImported);
        return this;
    }


    /**
     * Imported tax rate.
     */
    public TransactionItemRead withTaxRateImported(Optional<String> taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = taxRateImported;
        return this;
    }

    /**
     * Calculated tax amount for the item.
     */
    public TransactionItemRead withTaxAmountCalculated(String taxAmountCalculated) {
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        this.taxAmountCalculated = Optional.ofNullable(taxAmountCalculated);
        return this;
    }


    /**
     * Calculated tax amount for the item.
     */
    public TransactionItemRead withTaxAmountCalculated(Optional<String> taxAmountCalculated) {
        Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
        this.taxAmountCalculated = taxAmountCalculated;
        return this;
    }

    /**
     * Calculated tax rate.
     */
    public TransactionItemRead withTaxRateCalculated(String taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
        return this;
    }


    /**
     * Calculated tax rate.
     */
    public TransactionItemRead withTaxRateCalculated(Optional<String> taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = taxRateCalculated;
        return this;
    }

    /**
     * Original currency code.
     */
    public TransactionItemRead withOriginalCurrency(CurrencyEnum originalCurrency) {
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        this.originalCurrency = JsonNullable.of(originalCurrency);
        return this;
    }

    /**
     * Original currency code.
     */
    public TransactionItemRead withOriginalCurrency(JsonNullable<? extends CurrencyEnum> originalCurrency) {
        Utils.checkNotNull(originalCurrency, "originalCurrency");
        this.originalCurrency = originalCurrency;
        return this;
    }

    /**
     * Destination currency code.
     */
    public TransactionItemRead withDestinationCurrency(CurrencyEnum destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = JsonNullable.of(destinationCurrency);
        return this;
    }

    /**
     * Destination currency code.
     */
    public TransactionItemRead withDestinationCurrency(JsonNullable<? extends CurrencyEnum> destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = destinationCurrency;
        return this;
    }

    /**
     * Converted item amount.
     */
    public TransactionItemRead withConvertedAmount(String convertedAmount) {
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        this.convertedAmount = JsonNullable.of(convertedAmount);
        return this;
    }

    /**
     * Converted item amount.
     */
    public TransactionItemRead withConvertedAmount(JsonNullable<String> convertedAmount) {
        Utils.checkNotNull(convertedAmount, "convertedAmount");
        this.convertedAmount = convertedAmount;
        return this;
    }

    /**
     * Converted taxable amount.
     */
    public TransactionItemRead withConvertedTaxableAmount(String convertedTaxableAmount) {
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        this.convertedTaxableAmount = JsonNullable.of(convertedTaxableAmount);
        return this;
    }

    /**
     * Converted taxable amount.
     */
    public TransactionItemRead withConvertedTaxableAmount(JsonNullable<String> convertedTaxableAmount) {
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        this.convertedTaxableAmount = convertedTaxableAmount;
        return this;
    }

    /**
     * Converted imported tax amount.
     */
    public TransactionItemRead withConvertedTaxAmountImported(String convertedTaxAmountImported) {
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        this.convertedTaxAmountImported = JsonNullable.of(convertedTaxAmountImported);
        return this;
    }

    /**
     * Converted imported tax amount.
     */
    public TransactionItemRead withConvertedTaxAmountImported(JsonNullable<String> convertedTaxAmountImported) {
        Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
        this.convertedTaxAmountImported = convertedTaxAmountImported;
        return this;
    }

    /**
     * Converted calculated tax amount
     */
    public TransactionItemRead withConvertedTaxAmountCalculated(String convertedTaxAmountCalculated) {
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        this.convertedTaxAmountCalculated = JsonNullable.of(convertedTaxAmountCalculated);
        return this;
    }

    /**
     * Converted calculated tax amount
     */
    public TransactionItemRead withConvertedTaxAmountCalculated(JsonNullable<String> convertedTaxAmountCalculated) {
        Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
        this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
        return this;
    }

    /**
     * Converted total discount amount.
     */
    public TransactionItemRead withConvertedTotalDiscount(String convertedTotalDiscount) {
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        this.convertedTotalDiscount = JsonNullable.of(convertedTotalDiscount);
        return this;
    }

    /**
     * Converted total discount amount.
     */
    public TransactionItemRead withConvertedTotalDiscount(JsonNullable<String> convertedTotalDiscount) {
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        this.convertedTotalDiscount = convertedTotalDiscount;
        return this;
    }

    /**
     * Converted subtotal amount.
     */
    public TransactionItemRead withConvertedSubtotal(String convertedSubtotal) {
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        this.convertedSubtotal = JsonNullable.of(convertedSubtotal);
        return this;
    }

    /**
     * Converted subtotal amount.
     */
    public TransactionItemRead withConvertedSubtotal(JsonNullable<String> convertedSubtotal) {
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        this.convertedSubtotal = convertedSubtotal;
        return this;
    }

    /**
     * Taxable amount for the item.
     */
    public TransactionItemRead withTaxableAmount(String taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = Optional.ofNullable(taxableAmount);
        return this;
    }


    /**
     * Taxable amount for the item.
     */
    public TransactionItemRead withTaxableAmount(Optional<String> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    /**
     * Tax exemption status.
     */
    public TransactionItemRead withTaxExemption(TaxExemptionEnum taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = JsonNullable.of(taxExemption);
        return this;
    }

    /**
     * Tax exemption status.
     */
    public TransactionItemRead withTaxExemption(JsonNullable<? extends TaxExemptionEnum> taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = taxExemption;
        return this;
    }

    /**
     * Indicates if the item is exempt.
     */
    public TransactionItemRead withExempt(boolean exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = Optional.ofNullable(exempt);
        return this;
    }


    /**
     * Indicates if the item is exempt.
     */
    public TransactionItemRead withExempt(Optional<Boolean> exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = exempt;
        return this;
    }

    /**
     * The unique transaction item identifier.
     */
    public TransactionItemRead withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * List of tax items associated with the transaction item.
     */
    public TransactionItemRead withTaxItems(List<TaxItemRead> taxItems) {
        Utils.checkNotNull(taxItems, "taxItems");
        this.taxItems = taxItems;
        return this;
    }

    /**
     * Total discount amount applied to this transaction item.
     */
    public TransactionItemRead withTotalDiscount(String totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = JsonNullable.of(totalDiscount);
        return this;
    }

    /**
     * Total discount amount applied to this transaction item.
     */
    public TransactionItemRead withTotalDiscount(JsonNullable<String> totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = totalDiscount;
        return this;
    }

    /**
     * Subtotal amount before any discount is applied.
     */
    public TransactionItemRead withSubtotal(String subtotal) {
        Utils.checkNotNull(subtotal, "subtotal");
        this.subtotal = JsonNullable.of(subtotal);
        return this;
    }

    /**
     * Subtotal amount before any discount is applied.
     */
    public TransactionItemRead withSubtotal(JsonNullable<String> subtotal) {
        Utils.checkNotNull(subtotal, "subtotal");
        this.subtotal = subtotal;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionItemRead other = (TransactionItemRead) o;
        return 
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.externalProductId, other.externalProductId) &&
            Utils.enhancedDeepEquals(this.product, other.product) &&
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.productName, other.productName) &&
            Utils.enhancedDeepEquals(this.productDescription, other.productDescription) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.taxAmountImported, other.taxAmountImported) &&
            Utils.enhancedDeepEquals(this.taxRateImported, other.taxRateImported) &&
            Utils.enhancedDeepEquals(this.taxAmountCalculated, other.taxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.taxRateCalculated, other.taxRateCalculated) &&
            Utils.enhancedDeepEquals(this.originalCurrency, other.originalCurrency) &&
            Utils.enhancedDeepEquals(this.destinationCurrency, other.destinationCurrency) &&
            Utils.enhancedDeepEquals(this.convertedAmount, other.convertedAmount) &&
            Utils.enhancedDeepEquals(this.convertedTaxableAmount, other.convertedTaxableAmount) &&
            Utils.enhancedDeepEquals(this.convertedTaxAmountImported, other.convertedTaxAmountImported) &&
            Utils.enhancedDeepEquals(this.convertedTaxAmountCalculated, other.convertedTaxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.convertedTotalDiscount, other.convertedTotalDiscount) &&
            Utils.enhancedDeepEquals(this.convertedSubtotal, other.convertedSubtotal) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.taxExemption, other.taxExemption) &&
            Utils.enhancedDeepEquals(this.exempt, other.exempt) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.taxItems, other.taxItems) &&
            Utils.enhancedDeepEquals(this.totalDiscount, other.totalDiscount) &&
            Utils.enhancedDeepEquals(this.subtotal, other.subtotal);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            externalId, organizationId, date,
            description, externalProductId, product,
            productId, productName, productDescription,
            quantity, amount, taxAmountImported,
            taxRateImported, taxAmountCalculated, taxRateCalculated,
            originalCurrency, destinationCurrency, convertedAmount,
            convertedTaxableAmount, convertedTaxAmountImported, convertedTaxAmountCalculated,
            convertedTotalDiscount, convertedSubtotal, taxableAmount,
            taxExemption, exempt, id,
            taxItems, totalDiscount, subtotal);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionItemRead.class,
                "externalId", externalId,
                "organizationId", organizationId,
                "date", date,
                "description", description,
                "externalProductId", externalProductId,
                "product", product,
                "productId", productId,
                "productName", productName,
                "productDescription", productDescription,
                "quantity", quantity,
                "amount", amount,
                "taxAmountImported", taxAmountImported,
                "taxRateImported", taxRateImported,
                "taxAmountCalculated", taxAmountCalculated,
                "taxRateCalculated", taxRateCalculated,
                "originalCurrency", originalCurrency,
                "destinationCurrency", destinationCurrency,
                "convertedAmount", convertedAmount,
                "convertedTaxableAmount", convertedTaxableAmount,
                "convertedTaxAmountImported", convertedTaxAmountImported,
                "convertedTaxAmountCalculated", convertedTaxAmountCalculated,
                "convertedTotalDiscount", convertedTotalDiscount,
                "convertedSubtotal", convertedSubtotal,
                "taxableAmount", taxableAmount,
                "taxExemption", taxExemption,
                "exempt", exempt,
                "id", id,
                "taxItems", taxItems,
                "totalDiscount", totalDiscount,
                "subtotal", subtotal);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> externalId = JsonNullable.undefined();

        private Optional<String> organizationId = Optional.empty();

        private OffsetDateTime date;

        private JsonNullable<String> description = JsonNullable.undefined();

        private String externalProductId;

        private JsonNullable<String> product = JsonNullable.undefined();

        private JsonNullable<String> productId = JsonNullable.undefined();

        private JsonNullable<String> productName = JsonNullable.undefined();

        private JsonNullable<String> productDescription = JsonNullable.undefined();

        private Optional<String> quantity;

        private Optional<String> amount;

        private Optional<String> taxAmountImported;

        private Optional<String> taxRateImported;

        private Optional<String> taxAmountCalculated;

        private Optional<String> taxRateCalculated;

        private JsonNullable<? extends CurrencyEnum> originalCurrency = JsonNullable.undefined();

        private JsonNullable<? extends CurrencyEnum> destinationCurrency = JsonNullable.undefined();

        private JsonNullable<String> convertedAmount = JsonNullable.undefined();

        private JsonNullable<String> convertedTaxableAmount = JsonNullable.undefined();

        private JsonNullable<String> convertedTaxAmountImported = JsonNullable.undefined();

        private JsonNullable<String> convertedTaxAmountCalculated = JsonNullable.undefined();

        private JsonNullable<String> convertedTotalDiscount = JsonNullable.undefined();

        private JsonNullable<String> convertedSubtotal = JsonNullable.undefined();

        private Optional<String> taxableAmount;

        private JsonNullable<? extends TaxExemptionEnum> taxExemption = JsonNullable.undefined();

        private Optional<Boolean> exempt;

        private String id;

        private List<TaxItemRead> taxItems;

        private JsonNullable<String> totalDiscount = JsonNullable.undefined();

        private JsonNullable<String> subtotal = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * External item identifier.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        /**
         * External item identifier.
         */
        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Organization identifier.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * Organization identifier.
         */
        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * Date/time of item.
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Item description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Item description
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * External product identifier.
         */
        public Builder externalProductId(String externalProductId) {
            Utils.checkNotNull(externalProductId, "externalProductId");
            this.externalProductId = externalProductId;
            return this;
        }


        /**
         * Product name
         */
        public Builder product(String product) {
            Utils.checkNotNull(product, "product");
            this.product = JsonNullable.of(product);
            return this;
        }

        /**
         * Product name
         */
        public Builder product(JsonNullable<String> product) {
            Utils.checkNotNull(product, "product");
            this.product = product;
            return this;
        }


        /**
         * Product identifier.
         */
        public Builder productId(String productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = JsonNullable.of(productId);
            return this;
        }

        /**
         * Product identifier.
         */
        public Builder productId(JsonNullable<String> productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = productId;
            return this;
        }


        /**
         * Product name (detailed)
         */
        public Builder productName(String productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = JsonNullable.of(productName);
            return this;
        }

        /**
         * Product name (detailed)
         */
        public Builder productName(JsonNullable<String> productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = productName;
            return this;
        }


        /**
         * Product description
         */
        public Builder productDescription(String productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = JsonNullable.of(productDescription);
            return this;
        }

        /**
         * Product description
         */
        public Builder productDescription(JsonNullable<String> productDescription) {
            Utils.checkNotNull(productDescription, "productDescription");
            this.productDescription = productDescription;
            return this;
        }


        /**
         * Quantity of item.
         */
        public Builder quantity(String quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * Quantity of item.
         */
        public Builder quantity(Optional<String> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * Item amount.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Item amount.
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Imported tax amount for the item.
         */
        public Builder taxAmountImported(String taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = Optional.ofNullable(taxAmountImported);
            return this;
        }

        /**
         * Imported tax amount for the item.
         */
        public Builder taxAmountImported(Optional<String> taxAmountImported) {
            Utils.checkNotNull(taxAmountImported, "taxAmountImported");
            this.taxAmountImported = taxAmountImported;
            return this;
        }


        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(String taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = Optional.ofNullable(taxRateImported);
            return this;
        }

        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(Optional<String> taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = taxRateImported;
            return this;
        }


        /**
         * Calculated tax amount for the item.
         */
        public Builder taxAmountCalculated(String taxAmountCalculated) {
            Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
            this.taxAmountCalculated = Optional.ofNullable(taxAmountCalculated);
            return this;
        }

        /**
         * Calculated tax amount for the item.
         */
        public Builder taxAmountCalculated(Optional<String> taxAmountCalculated) {
            Utils.checkNotNull(taxAmountCalculated, "taxAmountCalculated");
            this.taxAmountCalculated = taxAmountCalculated;
            return this;
        }


        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(String taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
            return this;
        }

        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(Optional<String> taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = taxRateCalculated;
            return this;
        }


        /**
         * Original currency code.
         */
        public Builder originalCurrency(CurrencyEnum originalCurrency) {
            Utils.checkNotNull(originalCurrency, "originalCurrency");
            this.originalCurrency = JsonNullable.of(originalCurrency);
            return this;
        }

        /**
         * Original currency code.
         */
        public Builder originalCurrency(JsonNullable<? extends CurrencyEnum> originalCurrency) {
            Utils.checkNotNull(originalCurrency, "originalCurrency");
            this.originalCurrency = originalCurrency;
            return this;
        }


        /**
         * Destination currency code.
         */
        public Builder destinationCurrency(CurrencyEnum destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = JsonNullable.of(destinationCurrency);
            return this;
        }

        /**
         * Destination currency code.
         */
        public Builder destinationCurrency(JsonNullable<? extends CurrencyEnum> destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = destinationCurrency;
            return this;
        }


        /**
         * Converted item amount.
         */
        public Builder convertedAmount(String convertedAmount) {
            Utils.checkNotNull(convertedAmount, "convertedAmount");
            this.convertedAmount = JsonNullable.of(convertedAmount);
            return this;
        }

        /**
         * Converted item amount.
         */
        public Builder convertedAmount(JsonNullable<String> convertedAmount) {
            Utils.checkNotNull(convertedAmount, "convertedAmount");
            this.convertedAmount = convertedAmount;
            return this;
        }


        /**
         * Converted taxable amount.
         */
        public Builder convertedTaxableAmount(String convertedTaxableAmount) {
            Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
            this.convertedTaxableAmount = JsonNullable.of(convertedTaxableAmount);
            return this;
        }

        /**
         * Converted taxable amount.
         */
        public Builder convertedTaxableAmount(JsonNullable<String> convertedTaxableAmount) {
            Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
            this.convertedTaxableAmount = convertedTaxableAmount;
            return this;
        }


        /**
         * Converted imported tax amount.
         */
        public Builder convertedTaxAmountImported(String convertedTaxAmountImported) {
            Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
            this.convertedTaxAmountImported = JsonNullable.of(convertedTaxAmountImported);
            return this;
        }

        /**
         * Converted imported tax amount.
         */
        public Builder convertedTaxAmountImported(JsonNullable<String> convertedTaxAmountImported) {
            Utils.checkNotNull(convertedTaxAmountImported, "convertedTaxAmountImported");
            this.convertedTaxAmountImported = convertedTaxAmountImported;
            return this;
        }


        /**
         * Converted calculated tax amount
         */
        public Builder convertedTaxAmountCalculated(String convertedTaxAmountCalculated) {
            Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
            this.convertedTaxAmountCalculated = JsonNullable.of(convertedTaxAmountCalculated);
            return this;
        }

        /**
         * Converted calculated tax amount
         */
        public Builder convertedTaxAmountCalculated(JsonNullable<String> convertedTaxAmountCalculated) {
            Utils.checkNotNull(convertedTaxAmountCalculated, "convertedTaxAmountCalculated");
            this.convertedTaxAmountCalculated = convertedTaxAmountCalculated;
            return this;
        }


        /**
         * Converted total discount amount.
         */
        public Builder convertedTotalDiscount(String convertedTotalDiscount) {
            Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
            this.convertedTotalDiscount = JsonNullable.of(convertedTotalDiscount);
            return this;
        }

        /**
         * Converted total discount amount.
         */
        public Builder convertedTotalDiscount(JsonNullable<String> convertedTotalDiscount) {
            Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
            this.convertedTotalDiscount = convertedTotalDiscount;
            return this;
        }


        /**
         * Converted subtotal amount.
         */
        public Builder convertedSubtotal(String convertedSubtotal) {
            Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
            this.convertedSubtotal = JsonNullable.of(convertedSubtotal);
            return this;
        }

        /**
         * Converted subtotal amount.
         */
        public Builder convertedSubtotal(JsonNullable<String> convertedSubtotal) {
            Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
            this.convertedSubtotal = convertedSubtotal;
            return this;
        }


        /**
         * Taxable amount for the item.
         */
        public Builder taxableAmount(String taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = Optional.ofNullable(taxableAmount);
            return this;
        }

        /**
         * Taxable amount for the item.
         */
        public Builder taxableAmount(Optional<String> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        /**
         * Tax exemption status.
         */
        public Builder taxExemption(TaxExemptionEnum taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = JsonNullable.of(taxExemption);
            return this;
        }

        /**
         * Tax exemption status.
         */
        public Builder taxExemption(JsonNullable<? extends TaxExemptionEnum> taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = taxExemption;
            return this;
        }


        /**
         * Indicates if the item is exempt.
         */
        public Builder exempt(boolean exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = Optional.ofNullable(exempt);
            return this;
        }

        /**
         * Indicates if the item is exempt.
         */
        public Builder exempt(Optional<Boolean> exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = exempt;
            return this;
        }


        /**
         * The unique transaction item identifier.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * List of tax items associated with the transaction item.
         */
        public Builder taxItems(List<TaxItemRead> taxItems) {
            Utils.checkNotNull(taxItems, "taxItems");
            this.taxItems = taxItems;
            return this;
        }


        /**
         * Total discount amount applied to this transaction item.
         */
        public Builder totalDiscount(String totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = JsonNullable.of(totalDiscount);
            return this;
        }

        /**
         * Total discount amount applied to this transaction item.
         */
        public Builder totalDiscount(JsonNullable<String> totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = totalDiscount;
            return this;
        }


        /**
         * Subtotal amount before any discount is applied.
         */
        public Builder subtotal(String subtotal) {
            Utils.checkNotNull(subtotal, "subtotal");
            this.subtotal = JsonNullable.of(subtotal);
            return this;
        }

        /**
         * Subtotal amount before any discount is applied.
         */
        public Builder subtotal(JsonNullable<String> subtotal) {
            Utils.checkNotNull(subtotal, "subtotal");
            this.subtotal = subtotal;
            return this;
        }

        public TransactionItemRead build() {
            if (quantity == null) {
                quantity = _SINGLETON_VALUE_Quantity.value();
            }
            if (amount == null) {
                amount = _SINGLETON_VALUE_Amount.value();
            }
            if (taxAmountImported == null) {
                taxAmountImported = _SINGLETON_VALUE_TaxAmountImported.value();
            }
            if (taxRateImported == null) {
                taxRateImported = _SINGLETON_VALUE_TaxRateImported.value();
            }
            if (taxAmountCalculated == null) {
                taxAmountCalculated = _SINGLETON_VALUE_TaxAmountCalculated.value();
            }
            if (taxRateCalculated == null) {
                taxRateCalculated = _SINGLETON_VALUE_TaxRateCalculated.value();
            }
            if (taxableAmount == null) {
                taxableAmount = _SINGLETON_VALUE_TaxableAmount.value();
            }
            if (exempt == null) {
                exempt = _SINGLETON_VALUE_Exempt.value();
            }

            return new TransactionItemRead(
                externalId, organizationId, date,
                description, externalProductId, product,
                productId, productName, productDescription,
                quantity, amount, taxAmountImported,
                taxRateImported, taxAmountCalculated, taxRateCalculated,
                originalCurrency, destinationCurrency, convertedAmount,
                convertedTaxableAmount, convertedTaxAmountImported, convertedTaxAmountCalculated,
                convertedTotalDiscount, convertedSubtotal, taxableAmount,
                taxExemption, exempt, id,
                taxItems, totalDiscount, subtotal);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Quantity =
                new LazySingletonValue<>(
                        "quantity",
                        "\"1.0\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Amount =
                new LazySingletonValue<>(
                        "amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxAmountImported =
                new LazySingletonValue<>(
                        "tax_amount_imported",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxRateImported =
                new LazySingletonValue<>(
                        "tax_rate_imported",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxAmountCalculated =
                new LazySingletonValue<>(
                        "tax_amount_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxRateCalculated =
                new LazySingletonValue<>(
                        "tax_rate_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TaxableAmount =
                new LazySingletonValue<>(
                        "taxable_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Exempt =
                new LazySingletonValue<>(
                        "exempt",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
