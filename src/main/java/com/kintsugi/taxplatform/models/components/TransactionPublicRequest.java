/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransactionPublicRequest {
    /**
     * Indicates if transaction requires tax exemption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requires_exemption")
    private JsonNullable<? extends ExemptionRequired> requiresExemption;

    /**
     * Unique identifier of the organization.
     */
    @JsonProperty("organization_id")
    private String organizationId;

    /**
     * External identifier of the transaction.
     */
    @JsonProperty("external_id")
    private String externalId;

    /**
     * Transaction date and time
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Transaction date in the shop's local timezone
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shop_date")
    private JsonNullable<LocalDate> shopDate;

    /**
     * Timezone of the shop
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shop_date_tz")
    private JsonNullable<String> shopDateTz;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TransactionStatusEnum> status;

    /**
     * Description of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Status of refund, if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_status")
    private JsonNullable<? extends TransactionRefundStatus> refundStatus;

    /**
     * Total amount of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<? extends TransactionPublicRequestTotalAmount> totalAmount;

    /**
     * Unique identifier of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private JsonNullable<String> customerId;

    /**
     * Indicates if transaction is marketplace-based.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketplace")
    private JsonNullable<Boolean> marketplace;

    /**
     * Exemption status (e.g., NOT_EXEMPT)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt")
    private JsonNullable<? extends TransactionExemptStatusEnum> exempt;

    /**
     * List of exemptions applied (if any).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exemptions")
    private JsonNullable<? extends List<Exemption>> exemptions;

    /**
     * Related transaction identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("related_to")
    private JsonNullable<String> relatedTo;

    /**
     * Secondary External Identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondary_external_id")
    private JsonNullable<String> secondaryExternalId;

    /**
     * Secondary source information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondary_source")
    private JsonNullable<String> secondarySource;

    /**
     * Friendly identifier of the original item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_friendly_id")
    private JsonNullable<String> externalFriendlyId;

    /**
     * Imported tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_amount_imported")
    private Optional<? extends TransactionPublicRequestTotalTaxAmountImported> totalTaxAmountImported;

    /**
     * Imported tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_imported")
    private Optional<? extends TransactionPublicRequestTaxRateImported> taxRateImported;

    /**
     * Calculated tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_amount_calculated")
    private Optional<? extends TransactionPublicRequestTotalTaxAmountCalculated> totalTaxAmountCalculated;

    /**
     * Calculated tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_calculated")
    private Optional<? extends TransactionPublicRequestTaxRateCalculated> taxRateCalculated;

    /**
     * Total tax liability amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_liability_amount")
    private Optional<? extends TransactionPublicRequestTotalTaxLiabilityAmount> totalTaxLiabilityAmount;

    /**
     * Source of tax liability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_liability_source")
    private JsonNullable<? extends TaxLiabilitySourceEnum> taxLiabilitySource;

    /**
     * Taxable amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private Optional<? extends TransactionPublicRequestTaxableAmount> taxableAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends CurrencyEnum> currency;

    /**
     * Transaction lock status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    private Optional<Boolean> locked;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends SourceEnum> source;

    /**
     * Connection Identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_id")
    private JsonNullable<String> connectionId;

    /**
     * Filing identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filing_id")
    private JsonNullable<String> filingId;

    /**
     * City of the transaction address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * County of the transaction address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private JsonNullable<String> county;

    /**
     * State of the transaction address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    /**
     * Country code (ISO Alpha-2).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<? extends CountryCodeEnum> country;

    /**
     * Postal code of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    /**
     * Tax ID associated with the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_id")
    private JsonNullable<String> taxId;


    @JsonProperty("addresses")
    private List<TransactionAddressPublic> addresses;


    @JsonProperty("transaction_items")
    private List<TransactionItemBuilder> transactionItems;


    @JsonProperty("customer")
    private Customer customer;


    @JsonProperty("type")
    private TransactionTypeEnum type;

    @JsonCreator
    public TransactionPublicRequest(
            @JsonProperty("requires_exemption") JsonNullable<? extends ExemptionRequired> requiresExemption,
            @JsonProperty("organization_id") String organizationId,
            @JsonProperty("external_id") String externalId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("shop_date") JsonNullable<LocalDate> shopDate,
            @JsonProperty("shop_date_tz") JsonNullable<String> shopDateTz,
            @JsonProperty("status") Optional<? extends TransactionStatusEnum> status,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("refund_status") JsonNullable<? extends TransactionRefundStatus> refundStatus,
            @JsonProperty("total_amount") Optional<? extends TransactionPublicRequestTotalAmount> totalAmount,
            @JsonProperty("customer_id") JsonNullable<String> customerId,
            @JsonProperty("marketplace") JsonNullable<Boolean> marketplace,
            @JsonProperty("exempt") JsonNullable<? extends TransactionExemptStatusEnum> exempt,
            @JsonProperty("exemptions") JsonNullable<? extends List<Exemption>> exemptions,
            @JsonProperty("related_to") JsonNullable<String> relatedTo,
            @JsonProperty("secondary_external_id") JsonNullable<String> secondaryExternalId,
            @JsonProperty("secondary_source") JsonNullable<String> secondarySource,
            @JsonProperty("external_friendly_id") JsonNullable<String> externalFriendlyId,
            @JsonProperty("total_tax_amount_imported") Optional<? extends TransactionPublicRequestTotalTaxAmountImported> totalTaxAmountImported,
            @JsonProperty("tax_rate_imported") Optional<? extends TransactionPublicRequestTaxRateImported> taxRateImported,
            @JsonProperty("total_tax_amount_calculated") Optional<? extends TransactionPublicRequestTotalTaxAmountCalculated> totalTaxAmountCalculated,
            @JsonProperty("tax_rate_calculated") Optional<? extends TransactionPublicRequestTaxRateCalculated> taxRateCalculated,
            @JsonProperty("total_tax_liability_amount") Optional<? extends TransactionPublicRequestTotalTaxLiabilityAmount> totalTaxLiabilityAmount,
            @JsonProperty("tax_liability_source") JsonNullable<? extends TaxLiabilitySourceEnum> taxLiabilitySource,
            @JsonProperty("taxable_amount") Optional<? extends TransactionPublicRequestTaxableAmount> taxableAmount,
            @JsonProperty("currency") Optional<? extends CurrencyEnum> currency,
            @JsonProperty("locked") Optional<Boolean> locked,
            @JsonProperty("source") Optional<? extends SourceEnum> source,
            @JsonProperty("connection_id") JsonNullable<String> connectionId,
            @JsonProperty("filing_id") JsonNullable<String> filingId,
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("county") JsonNullable<String> county,
            @JsonProperty("state") JsonNullable<String> state,
            @JsonProperty("country") JsonNullable<? extends CountryCodeEnum> country,
            @JsonProperty("postal_code") JsonNullable<String> postalCode,
            @JsonProperty("tax_id") JsonNullable<String> taxId,
            @JsonProperty("addresses") List<TransactionAddressPublic> addresses,
            @JsonProperty("transaction_items") List<TransactionItemBuilder> transactionItems,
            @JsonProperty("customer") Customer customer,
            @JsonProperty("type") TransactionTypeEnum type) {
        Utils.checkNotNull(requiresExemption, "requiresExemption");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(shopDate, "shopDate");
        Utils.checkNotNull(shopDateTz, "shopDateTz");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(refundStatus, "refundStatus");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(marketplace, "marketplace");
        Utils.checkNotNull(exempt, "exempt");
        Utils.checkNotNull(exemptions, "exemptions");
        Utils.checkNotNull(relatedTo, "relatedTo");
        Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
        Utils.checkNotNull(secondarySource, "secondarySource");
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
        Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(locked, "locked");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(filingId, "filingId");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(county, "county");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(taxId, "taxId");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(transactionItems, "transactionItems");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(type, "type");
        this.requiresExemption = requiresExemption;
        this.organizationId = organizationId;
        this.externalId = externalId;
        this.date = date;
        this.shopDate = shopDate;
        this.shopDateTz = shopDateTz;
        this.status = status;
        this.description = description;
        this.refundStatus = refundStatus;
        this.totalAmount = totalAmount;
        this.customerId = customerId;
        this.marketplace = marketplace;
        this.exempt = exempt;
        this.exemptions = exemptions;
        this.relatedTo = relatedTo;
        this.secondaryExternalId = secondaryExternalId;
        this.secondarySource = secondarySource;
        this.externalFriendlyId = externalFriendlyId;
        this.totalTaxAmountImported = totalTaxAmountImported;
        this.taxRateImported = taxRateImported;
        this.totalTaxAmountCalculated = totalTaxAmountCalculated;
        this.taxRateCalculated = taxRateCalculated;
        this.totalTaxLiabilityAmount = totalTaxLiabilityAmount;
        this.taxLiabilitySource = taxLiabilitySource;
        this.taxableAmount = taxableAmount;
        this.currency = currency;
        this.locked = locked;
        this.source = source;
        this.connectionId = connectionId;
        this.filingId = filingId;
        this.city = city;
        this.county = county;
        this.state = state;
        this.country = country;
        this.postalCode = postalCode;
        this.taxId = taxId;
        this.addresses = addresses;
        this.transactionItems = transactionItems;
        this.customer = customer;
        this.type = type;
    }
    
    public TransactionPublicRequest(
            String organizationId,
            String externalId,
            OffsetDateTime date,
            List<TransactionAddressPublic> addresses,
            List<TransactionItemBuilder> transactionItems,
            Customer customer,
            TransactionTypeEnum type) {
        this(JsonNullable.undefined(), organizationId, externalId,
            date, JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            addresses, transactionItems, customer,
            type);
    }

    /**
     * Indicates if transaction requires tax exemption.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ExemptionRequired> requiresExemption() {
        return (JsonNullable<ExemptionRequired>) requiresExemption;
    }

    /**
     * Unique identifier of the organization.
     */
    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    /**
     * External identifier of the transaction.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * Transaction date and time
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Transaction date in the shop's local timezone
     */
    @JsonIgnore
    public JsonNullable<LocalDate> shopDate() {
        return shopDate;
    }

    /**
     * Timezone of the shop
     */
    @JsonIgnore
    public JsonNullable<String> shopDateTz() {
        return shopDateTz;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionStatusEnum> status() {
        return (Optional<TransactionStatusEnum>) status;
    }

    /**
     * Description of the transaction.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Status of refund, if applicable
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionRefundStatus> refundStatus() {
        return (JsonNullable<TransactionRefundStatus>) refundStatus;
    }

    /**
     * Total amount of the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionPublicRequestTotalAmount> totalAmount() {
        return (Optional<TransactionPublicRequestTotalAmount>) totalAmount;
    }

    /**
     * Unique identifier of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> customerId() {
        return customerId;
    }

    /**
     * Indicates if transaction is marketplace-based.
     */
    @JsonIgnore
    public JsonNullable<Boolean> marketplace() {
        return marketplace;
    }

    /**
     * Exemption status (e.g., NOT_EXEMPT)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionExemptStatusEnum> exempt() {
        return (JsonNullable<TransactionExemptStatusEnum>) exempt;
    }

    /**
     * List of exemptions applied (if any).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Exemption>> exemptions() {
        return (JsonNullable<List<Exemption>>) exemptions;
    }

    /**
     * Related transaction identifier.
     */
    @JsonIgnore
    public JsonNullable<String> relatedTo() {
        return relatedTo;
    }

    /**
     * Secondary External Identifier.
     */
    @JsonIgnore
    public JsonNullable<String> secondaryExternalId() {
        return secondaryExternalId;
    }

    /**
     * Secondary source information
     */
    @JsonIgnore
    public JsonNullable<String> secondarySource() {
        return secondarySource;
    }

    /**
     * Friendly identifier of the original item.
     */
    @JsonIgnore
    public JsonNullable<String> externalFriendlyId() {
        return externalFriendlyId;
    }

    /**
     * Imported tax amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionPublicRequestTotalTaxAmountImported> totalTaxAmountImported() {
        return (Optional<TransactionPublicRequestTotalTaxAmountImported>) totalTaxAmountImported;
    }

    /**
     * Imported tax rate.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionPublicRequestTaxRateImported> taxRateImported() {
        return (Optional<TransactionPublicRequestTaxRateImported>) taxRateImported;
    }

    /**
     * Calculated tax amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionPublicRequestTotalTaxAmountCalculated> totalTaxAmountCalculated() {
        return (Optional<TransactionPublicRequestTotalTaxAmountCalculated>) totalTaxAmountCalculated;
    }

    /**
     * Calculated tax rate.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionPublicRequestTaxRateCalculated> taxRateCalculated() {
        return (Optional<TransactionPublicRequestTaxRateCalculated>) taxRateCalculated;
    }

    /**
     * Total tax liability amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionPublicRequestTotalTaxLiabilityAmount> totalTaxLiabilityAmount() {
        return (Optional<TransactionPublicRequestTotalTaxLiabilityAmount>) totalTaxLiabilityAmount;
    }

    /**
     * Source of tax liability.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TaxLiabilitySourceEnum> taxLiabilitySource() {
        return (JsonNullable<TaxLiabilitySourceEnum>) taxLiabilitySource;
    }

    /**
     * Taxable amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionPublicRequestTaxableAmount> taxableAmount() {
        return (Optional<TransactionPublicRequestTaxableAmount>) taxableAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CurrencyEnum> currency() {
        return (Optional<CurrencyEnum>) currency;
    }

    /**
     * Transaction lock status.
     */
    @JsonIgnore
    public Optional<Boolean> locked() {
        return locked;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceEnum> source() {
        return (Optional<SourceEnum>) source;
    }

    /**
     * Connection Identifier
     */
    @JsonIgnore
    public JsonNullable<String> connectionId() {
        return connectionId;
    }

    /**
     * Filing identifier.
     */
    @JsonIgnore
    public JsonNullable<String> filingId() {
        return filingId;
    }

    /**
     * City of the transaction address.
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    /**
     * County of the transaction address.
     */
    @JsonIgnore
    public JsonNullable<String> county() {
        return county;
    }

    /**
     * State of the transaction address.
     */
    @JsonIgnore
    public JsonNullable<String> state() {
        return state;
    }

    /**
     * Country code (ISO Alpha-2).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CountryCodeEnum> country() {
        return (JsonNullable<CountryCodeEnum>) country;
    }

    /**
     * Postal code of the transaction.
     */
    @JsonIgnore
    public JsonNullable<String> postalCode() {
        return postalCode;
    }

    /**
     * Tax ID associated with the transaction
     */
    @JsonIgnore
    public JsonNullable<String> taxId() {
        return taxId;
    }

    @JsonIgnore
    public List<TransactionAddressPublic> addresses() {
        return addresses;
    }

    @JsonIgnore
    public List<TransactionItemBuilder> transactionItems() {
        return transactionItems;
    }

    @JsonIgnore
    public Customer customer() {
        return customer;
    }

    @JsonIgnore
    public TransactionTypeEnum type() {
        return type;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates if transaction requires tax exemption.
     */
    public TransactionPublicRequest withRequiresExemption(ExemptionRequired requiresExemption) {
        Utils.checkNotNull(requiresExemption, "requiresExemption");
        this.requiresExemption = JsonNullable.of(requiresExemption);
        return this;
    }

    /**
     * Indicates if transaction requires tax exemption.
     */
    public TransactionPublicRequest withRequiresExemption(JsonNullable<? extends ExemptionRequired> requiresExemption) {
        Utils.checkNotNull(requiresExemption, "requiresExemption");
        this.requiresExemption = requiresExemption;
        return this;
    }

    /**
     * Unique identifier of the organization.
     */
    public TransactionPublicRequest withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * External identifier of the transaction.
     */
    public TransactionPublicRequest withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Transaction date and time
     */
    public TransactionPublicRequest withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Transaction date in the shop's local timezone
     */
    public TransactionPublicRequest withShopDate(LocalDate shopDate) {
        Utils.checkNotNull(shopDate, "shopDate");
        this.shopDate = JsonNullable.of(shopDate);
        return this;
    }

    /**
     * Transaction date in the shop's local timezone
     */
    public TransactionPublicRequest withShopDate(JsonNullable<LocalDate> shopDate) {
        Utils.checkNotNull(shopDate, "shopDate");
        this.shopDate = shopDate;
        return this;
    }

    /**
     * Timezone of the shop
     */
    public TransactionPublicRequest withShopDateTz(String shopDateTz) {
        Utils.checkNotNull(shopDateTz, "shopDateTz");
        this.shopDateTz = JsonNullable.of(shopDateTz);
        return this;
    }

    /**
     * Timezone of the shop
     */
    public TransactionPublicRequest withShopDateTz(JsonNullable<String> shopDateTz) {
        Utils.checkNotNull(shopDateTz, "shopDateTz");
        this.shopDateTz = shopDateTz;
        return this;
    }

    public TransactionPublicRequest withStatus(TransactionStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public TransactionPublicRequest withStatus(Optional<? extends TransactionStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Description of the transaction.
     */
    public TransactionPublicRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Description of the transaction.
     */
    public TransactionPublicRequest withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Status of refund, if applicable
     */
    public TransactionPublicRequest withRefundStatus(TransactionRefundStatus refundStatus) {
        Utils.checkNotNull(refundStatus, "refundStatus");
        this.refundStatus = JsonNullable.of(refundStatus);
        return this;
    }

    /**
     * Status of refund, if applicable
     */
    public TransactionPublicRequest withRefundStatus(JsonNullable<? extends TransactionRefundStatus> refundStatus) {
        Utils.checkNotNull(refundStatus, "refundStatus");
        this.refundStatus = refundStatus;
        return this;
    }

    /**
     * Total amount of the transaction.
     */
    public TransactionPublicRequest withTotalAmount(TransactionPublicRequestTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    /**
     * Total amount of the transaction.
     */
    public TransactionPublicRequest withTotalAmount(Optional<? extends TransactionPublicRequestTotalAmount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Unique identifier of the customer.
     */
    public TransactionPublicRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = JsonNullable.of(customerId);
        return this;
    }

    /**
     * Unique identifier of the customer.
     */
    public TransactionPublicRequest withCustomerId(JsonNullable<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * Indicates if transaction is marketplace-based.
     */
    public TransactionPublicRequest withMarketplace(boolean marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = JsonNullable.of(marketplace);
        return this;
    }

    /**
     * Indicates if transaction is marketplace-based.
     */
    public TransactionPublicRequest withMarketplace(JsonNullable<Boolean> marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Exemption status (e.g., NOT_EXEMPT)
     */
    public TransactionPublicRequest withExempt(TransactionExemptStatusEnum exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = JsonNullable.of(exempt);
        return this;
    }

    /**
     * Exemption status (e.g., NOT_EXEMPT)
     */
    public TransactionPublicRequest withExempt(JsonNullable<? extends TransactionExemptStatusEnum> exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = exempt;
        return this;
    }

    /**
     * List of exemptions applied (if any).
     */
    public TransactionPublicRequest withExemptions(List<Exemption> exemptions) {
        Utils.checkNotNull(exemptions, "exemptions");
        this.exemptions = JsonNullable.of(exemptions);
        return this;
    }

    /**
     * List of exemptions applied (if any).
     */
    public TransactionPublicRequest withExemptions(JsonNullable<? extends List<Exemption>> exemptions) {
        Utils.checkNotNull(exemptions, "exemptions");
        this.exemptions = exemptions;
        return this;
    }

    /**
     * Related transaction identifier.
     */
    public TransactionPublicRequest withRelatedTo(String relatedTo) {
        Utils.checkNotNull(relatedTo, "relatedTo");
        this.relatedTo = JsonNullable.of(relatedTo);
        return this;
    }

    /**
     * Related transaction identifier.
     */
    public TransactionPublicRequest withRelatedTo(JsonNullable<String> relatedTo) {
        Utils.checkNotNull(relatedTo, "relatedTo");
        this.relatedTo = relatedTo;
        return this;
    }

    /**
     * Secondary External Identifier.
     */
    public TransactionPublicRequest withSecondaryExternalId(String secondaryExternalId) {
        Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
        this.secondaryExternalId = JsonNullable.of(secondaryExternalId);
        return this;
    }

    /**
     * Secondary External Identifier.
     */
    public TransactionPublicRequest withSecondaryExternalId(JsonNullable<String> secondaryExternalId) {
        Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
        this.secondaryExternalId = secondaryExternalId;
        return this;
    }

    /**
     * Secondary source information
     */
    public TransactionPublicRequest withSecondarySource(String secondarySource) {
        Utils.checkNotNull(secondarySource, "secondarySource");
        this.secondarySource = JsonNullable.of(secondarySource);
        return this;
    }

    /**
     * Secondary source information
     */
    public TransactionPublicRequest withSecondarySource(JsonNullable<String> secondarySource) {
        Utils.checkNotNull(secondarySource, "secondarySource");
        this.secondarySource = secondarySource;
        return this;
    }

    /**
     * Friendly identifier of the original item.
     */
    public TransactionPublicRequest withExternalFriendlyId(String externalFriendlyId) {
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        this.externalFriendlyId = JsonNullable.of(externalFriendlyId);
        return this;
    }

    /**
     * Friendly identifier of the original item.
     */
    public TransactionPublicRequest withExternalFriendlyId(JsonNullable<String> externalFriendlyId) {
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        this.externalFriendlyId = externalFriendlyId;
        return this;
    }

    /**
     * Imported tax amount.
     */
    public TransactionPublicRequest withTotalTaxAmountImported(TransactionPublicRequestTotalTaxAmountImported totalTaxAmountImported) {
        Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
        this.totalTaxAmountImported = Optional.ofNullable(totalTaxAmountImported);
        return this;
    }


    /**
     * Imported tax amount.
     */
    public TransactionPublicRequest withTotalTaxAmountImported(Optional<? extends TransactionPublicRequestTotalTaxAmountImported> totalTaxAmountImported) {
        Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
        this.totalTaxAmountImported = totalTaxAmountImported;
        return this;
    }

    /**
     * Imported tax rate.
     */
    public TransactionPublicRequest withTaxRateImported(TransactionPublicRequestTaxRateImported taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = Optional.ofNullable(taxRateImported);
        return this;
    }


    /**
     * Imported tax rate.
     */
    public TransactionPublicRequest withTaxRateImported(Optional<? extends TransactionPublicRequestTaxRateImported> taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = taxRateImported;
        return this;
    }

    /**
     * Calculated tax amount.
     */
    public TransactionPublicRequest withTotalTaxAmountCalculated(TransactionPublicRequestTotalTaxAmountCalculated totalTaxAmountCalculated) {
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        this.totalTaxAmountCalculated = Optional.ofNullable(totalTaxAmountCalculated);
        return this;
    }


    /**
     * Calculated tax amount.
     */
    public TransactionPublicRequest withTotalTaxAmountCalculated(Optional<? extends TransactionPublicRequestTotalTaxAmountCalculated> totalTaxAmountCalculated) {
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        this.totalTaxAmountCalculated = totalTaxAmountCalculated;
        return this;
    }

    /**
     * Calculated tax rate.
     */
    public TransactionPublicRequest withTaxRateCalculated(TransactionPublicRequestTaxRateCalculated taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
        return this;
    }


    /**
     * Calculated tax rate.
     */
    public TransactionPublicRequest withTaxRateCalculated(Optional<? extends TransactionPublicRequestTaxRateCalculated> taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = taxRateCalculated;
        return this;
    }

    /**
     * Total tax liability amount.
     */
    public TransactionPublicRequest withTotalTaxLiabilityAmount(TransactionPublicRequestTotalTaxLiabilityAmount totalTaxLiabilityAmount) {
        Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
        this.totalTaxLiabilityAmount = Optional.ofNullable(totalTaxLiabilityAmount);
        return this;
    }


    /**
     * Total tax liability amount.
     */
    public TransactionPublicRequest withTotalTaxLiabilityAmount(Optional<? extends TransactionPublicRequestTotalTaxLiabilityAmount> totalTaxLiabilityAmount) {
        Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
        this.totalTaxLiabilityAmount = totalTaxLiabilityAmount;
        return this;
    }

    /**
     * Source of tax liability.
     */
    public TransactionPublicRequest withTaxLiabilitySource(TaxLiabilitySourceEnum taxLiabilitySource) {
        Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
        this.taxLiabilitySource = JsonNullable.of(taxLiabilitySource);
        return this;
    }

    /**
     * Source of tax liability.
     */
    public TransactionPublicRequest withTaxLiabilitySource(JsonNullable<? extends TaxLiabilitySourceEnum> taxLiabilitySource) {
        Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
        this.taxLiabilitySource = taxLiabilitySource;
        return this;
    }

    /**
     * Taxable amount.
     */
    public TransactionPublicRequest withTaxableAmount(TransactionPublicRequestTaxableAmount taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = Optional.ofNullable(taxableAmount);
        return this;
    }


    /**
     * Taxable amount.
     */
    public TransactionPublicRequest withTaxableAmount(Optional<? extends TransactionPublicRequestTaxableAmount> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    public TransactionPublicRequest withCurrency(CurrencyEnum currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public TransactionPublicRequest withCurrency(Optional<? extends CurrencyEnum> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Transaction lock status.
     */
    public TransactionPublicRequest withLocked(boolean locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = Optional.ofNullable(locked);
        return this;
    }


    /**
     * Transaction lock status.
     */
    public TransactionPublicRequest withLocked(Optional<Boolean> locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = locked;
        return this;
    }

    public TransactionPublicRequest withSource(SourceEnum source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }


    public TransactionPublicRequest withSource(Optional<? extends SourceEnum> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Connection Identifier
     */
    public TransactionPublicRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = JsonNullable.of(connectionId);
        return this;
    }

    /**
     * Connection Identifier
     */
    public TransactionPublicRequest withConnectionId(JsonNullable<String> connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Filing identifier.
     */
    public TransactionPublicRequest withFilingId(String filingId) {
        Utils.checkNotNull(filingId, "filingId");
        this.filingId = JsonNullable.of(filingId);
        return this;
    }

    /**
     * Filing identifier.
     */
    public TransactionPublicRequest withFilingId(JsonNullable<String> filingId) {
        Utils.checkNotNull(filingId, "filingId");
        this.filingId = filingId;
        return this;
    }

    /**
     * City of the transaction address.
     */
    public TransactionPublicRequest withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * City of the transaction address.
     */
    public TransactionPublicRequest withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * County of the transaction address.
     */
    public TransactionPublicRequest withCounty(String county) {
        Utils.checkNotNull(county, "county");
        this.county = JsonNullable.of(county);
        return this;
    }

    /**
     * County of the transaction address.
     */
    public TransactionPublicRequest withCounty(JsonNullable<String> county) {
        Utils.checkNotNull(county, "county");
        this.county = county;
        return this;
    }

    /**
     * State of the transaction address.
     */
    public TransactionPublicRequest withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = JsonNullable.of(state);
        return this;
    }

    /**
     * State of the transaction address.
     */
    public TransactionPublicRequest withState(JsonNullable<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Country code (ISO Alpha-2).
     */
    public TransactionPublicRequest withCountry(CountryCodeEnum country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country code (ISO Alpha-2).
     */
    public TransactionPublicRequest withCountry(JsonNullable<? extends CountryCodeEnum> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Postal code of the transaction.
     */
    public TransactionPublicRequest withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }

    /**
     * Postal code of the transaction.
     */
    public TransactionPublicRequest withPostalCode(JsonNullable<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Tax ID associated with the transaction
     */
    public TransactionPublicRequest withTaxId(String taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = JsonNullable.of(taxId);
        return this;
    }

    /**
     * Tax ID associated with the transaction
     */
    public TransactionPublicRequest withTaxId(JsonNullable<String> taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = taxId;
        return this;
    }

    public TransactionPublicRequest withAddresses(List<TransactionAddressPublic> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public TransactionPublicRequest withTransactionItems(List<TransactionItemBuilder> transactionItems) {
        Utils.checkNotNull(transactionItems, "transactionItems");
        this.transactionItems = transactionItems;
        return this;
    }

    public TransactionPublicRequest withCustomer(Customer customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    public TransactionPublicRequest withType(TransactionTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionPublicRequest other = (TransactionPublicRequest) o;
        return 
            Utils.enhancedDeepEquals(this.requiresExemption, other.requiresExemption) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.shopDate, other.shopDate) &&
            Utils.enhancedDeepEquals(this.shopDateTz, other.shopDateTz) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.refundStatus, other.refundStatus) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.marketplace, other.marketplace) &&
            Utils.enhancedDeepEquals(this.exempt, other.exempt) &&
            Utils.enhancedDeepEquals(this.exemptions, other.exemptions) &&
            Utils.enhancedDeepEquals(this.relatedTo, other.relatedTo) &&
            Utils.enhancedDeepEquals(this.secondaryExternalId, other.secondaryExternalId) &&
            Utils.enhancedDeepEquals(this.secondarySource, other.secondarySource) &&
            Utils.enhancedDeepEquals(this.externalFriendlyId, other.externalFriendlyId) &&
            Utils.enhancedDeepEquals(this.totalTaxAmountImported, other.totalTaxAmountImported) &&
            Utils.enhancedDeepEquals(this.taxRateImported, other.taxRateImported) &&
            Utils.enhancedDeepEquals(this.totalTaxAmountCalculated, other.totalTaxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.taxRateCalculated, other.taxRateCalculated) &&
            Utils.enhancedDeepEquals(this.totalTaxLiabilityAmount, other.totalTaxLiabilityAmount) &&
            Utils.enhancedDeepEquals(this.taxLiabilitySource, other.taxLiabilitySource) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.locked, other.locked) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId) &&
            Utils.enhancedDeepEquals(this.filingId, other.filingId) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.county, other.county) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.taxId, other.taxId) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.transactionItems, other.transactionItems) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            requiresExemption, organizationId, externalId,
            date, shopDate, shopDateTz,
            status, description, refundStatus,
            totalAmount, customerId, marketplace,
            exempt, exemptions, relatedTo,
            secondaryExternalId, secondarySource, externalFriendlyId,
            totalTaxAmountImported, taxRateImported, totalTaxAmountCalculated,
            taxRateCalculated, totalTaxLiabilityAmount, taxLiabilitySource,
            taxableAmount, currency, locked,
            source, connectionId, filingId,
            city, county, state,
            country, postalCode, taxId,
            addresses, transactionItems, customer,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionPublicRequest.class,
                "requiresExemption", requiresExemption,
                "organizationId", organizationId,
                "externalId", externalId,
                "date", date,
                "shopDate", shopDate,
                "shopDateTz", shopDateTz,
                "status", status,
                "description", description,
                "refundStatus", refundStatus,
                "totalAmount", totalAmount,
                "customerId", customerId,
                "marketplace", marketplace,
                "exempt", exempt,
                "exemptions", exemptions,
                "relatedTo", relatedTo,
                "secondaryExternalId", secondaryExternalId,
                "secondarySource", secondarySource,
                "externalFriendlyId", externalFriendlyId,
                "totalTaxAmountImported", totalTaxAmountImported,
                "taxRateImported", taxRateImported,
                "totalTaxAmountCalculated", totalTaxAmountCalculated,
                "taxRateCalculated", taxRateCalculated,
                "totalTaxLiabilityAmount", totalTaxLiabilityAmount,
                "taxLiabilitySource", taxLiabilitySource,
                "taxableAmount", taxableAmount,
                "currency", currency,
                "locked", locked,
                "source", source,
                "connectionId", connectionId,
                "filingId", filingId,
                "city", city,
                "county", county,
                "state", state,
                "country", country,
                "postalCode", postalCode,
                "taxId", taxId,
                "addresses", addresses,
                "transactionItems", transactionItems,
                "customer", customer,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends ExemptionRequired> requiresExemption = JsonNullable.undefined();

        private String organizationId;

        private String externalId;

        private OffsetDateTime date;

        private JsonNullable<LocalDate> shopDate = JsonNullable.undefined();

        private JsonNullable<String> shopDateTz = JsonNullable.undefined();

        private Optional<? extends TransactionStatusEnum> status = Optional.empty();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<? extends TransactionRefundStatus> refundStatus = JsonNullable.undefined();

        private Optional<? extends TransactionPublicRequestTotalAmount> totalAmount = Optional.empty();

        private JsonNullable<String> customerId = JsonNullable.undefined();

        private JsonNullable<Boolean> marketplace = JsonNullable.undefined();

        private JsonNullable<? extends TransactionExemptStatusEnum> exempt = JsonNullable.undefined();

        private JsonNullable<? extends List<Exemption>> exemptions = JsonNullable.undefined();

        private JsonNullable<String> relatedTo = JsonNullable.undefined();

        private JsonNullable<String> secondaryExternalId = JsonNullable.undefined();

        private JsonNullable<String> secondarySource = JsonNullable.undefined();

        private JsonNullable<String> externalFriendlyId = JsonNullable.undefined();

        private Optional<? extends TransactionPublicRequestTotalTaxAmountImported> totalTaxAmountImported = Optional.empty();

        private Optional<? extends TransactionPublicRequestTaxRateImported> taxRateImported = Optional.empty();

        private Optional<? extends TransactionPublicRequestTotalTaxAmountCalculated> totalTaxAmountCalculated = Optional.empty();

        private Optional<? extends TransactionPublicRequestTaxRateCalculated> taxRateCalculated = Optional.empty();

        private Optional<? extends TransactionPublicRequestTotalTaxLiabilityAmount> totalTaxLiabilityAmount = Optional.empty();

        private JsonNullable<? extends TaxLiabilitySourceEnum> taxLiabilitySource = JsonNullable.undefined();

        private Optional<? extends TransactionPublicRequestTaxableAmount> taxableAmount = Optional.empty();

        private Optional<? extends CurrencyEnum> currency = Optional.empty();

        private Optional<Boolean> locked;

        private Optional<? extends SourceEnum> source = Optional.empty();

        private JsonNullable<String> connectionId = JsonNullable.undefined();

        private JsonNullable<String> filingId = JsonNullable.undefined();

        private JsonNullable<String> city = JsonNullable.undefined();

        private JsonNullable<String> county = JsonNullable.undefined();

        private JsonNullable<String> state = JsonNullable.undefined();

        private JsonNullable<? extends CountryCodeEnum> country = JsonNullable.undefined();

        private JsonNullable<String> postalCode = JsonNullable.undefined();

        private JsonNullable<String> taxId = JsonNullable.undefined();

        private List<TransactionAddressPublic> addresses;

        private List<TransactionItemBuilder> transactionItems;

        private Customer customer;

        private TransactionTypeEnum type;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates if transaction requires tax exemption.
         */
        public Builder requiresExemption(ExemptionRequired requiresExemption) {
            Utils.checkNotNull(requiresExemption, "requiresExemption");
            this.requiresExemption = JsonNullable.of(requiresExemption);
            return this;
        }

        /**
         * Indicates if transaction requires tax exemption.
         */
        public Builder requiresExemption(JsonNullable<? extends ExemptionRequired> requiresExemption) {
            Utils.checkNotNull(requiresExemption, "requiresExemption");
            this.requiresExemption = requiresExemption;
            return this;
        }


        /**
         * Unique identifier of the organization.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * External identifier of the transaction.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Transaction date and time
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Transaction date in the shop's local timezone
         */
        public Builder shopDate(LocalDate shopDate) {
            Utils.checkNotNull(shopDate, "shopDate");
            this.shopDate = JsonNullable.of(shopDate);
            return this;
        }

        /**
         * Transaction date in the shop's local timezone
         */
        public Builder shopDate(JsonNullable<LocalDate> shopDate) {
            Utils.checkNotNull(shopDate, "shopDate");
            this.shopDate = shopDate;
            return this;
        }


        /**
         * Timezone of the shop
         */
        public Builder shopDateTz(String shopDateTz) {
            Utils.checkNotNull(shopDateTz, "shopDateTz");
            this.shopDateTz = JsonNullable.of(shopDateTz);
            return this;
        }

        /**
         * Timezone of the shop
         */
        public Builder shopDateTz(JsonNullable<String> shopDateTz) {
            Utils.checkNotNull(shopDateTz, "shopDateTz");
            this.shopDateTz = shopDateTz;
            return this;
        }


        public Builder status(TransactionStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends TransactionStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Description of the transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Description of the transaction.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Status of refund, if applicable
         */
        public Builder refundStatus(TransactionRefundStatus refundStatus) {
            Utils.checkNotNull(refundStatus, "refundStatus");
            this.refundStatus = JsonNullable.of(refundStatus);
            return this;
        }

        /**
         * Status of refund, if applicable
         */
        public Builder refundStatus(JsonNullable<? extends TransactionRefundStatus> refundStatus) {
            Utils.checkNotNull(refundStatus, "refundStatus");
            this.refundStatus = refundStatus;
            return this;
        }


        /**
         * Total amount of the transaction.
         */
        public Builder totalAmount(TransactionPublicRequestTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * Total amount of the transaction.
         */
        public Builder totalAmount(Optional<? extends TransactionPublicRequestTotalAmount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        /**
         * Unique identifier of the customer.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = JsonNullable.of(customerId);
            return this;
        }

        /**
         * Unique identifier of the customer.
         */
        public Builder customerId(JsonNullable<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * Indicates if transaction is marketplace-based.
         */
        public Builder marketplace(boolean marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = JsonNullable.of(marketplace);
            return this;
        }

        /**
         * Indicates if transaction is marketplace-based.
         */
        public Builder marketplace(JsonNullable<Boolean> marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = marketplace;
            return this;
        }


        /**
         * Exemption status (e.g., NOT_EXEMPT)
         */
        public Builder exempt(TransactionExemptStatusEnum exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = JsonNullable.of(exempt);
            return this;
        }

        /**
         * Exemption status (e.g., NOT_EXEMPT)
         */
        public Builder exempt(JsonNullable<? extends TransactionExemptStatusEnum> exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = exempt;
            return this;
        }


        /**
         * List of exemptions applied (if any).
         */
        public Builder exemptions(List<Exemption> exemptions) {
            Utils.checkNotNull(exemptions, "exemptions");
            this.exemptions = JsonNullable.of(exemptions);
            return this;
        }

        /**
         * List of exemptions applied (if any).
         */
        public Builder exemptions(JsonNullable<? extends List<Exemption>> exemptions) {
            Utils.checkNotNull(exemptions, "exemptions");
            this.exemptions = exemptions;
            return this;
        }


        /**
         * Related transaction identifier.
         */
        public Builder relatedTo(String relatedTo) {
            Utils.checkNotNull(relatedTo, "relatedTo");
            this.relatedTo = JsonNullable.of(relatedTo);
            return this;
        }

        /**
         * Related transaction identifier.
         */
        public Builder relatedTo(JsonNullable<String> relatedTo) {
            Utils.checkNotNull(relatedTo, "relatedTo");
            this.relatedTo = relatedTo;
            return this;
        }


        /**
         * Secondary External Identifier.
         */
        public Builder secondaryExternalId(String secondaryExternalId) {
            Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
            this.secondaryExternalId = JsonNullable.of(secondaryExternalId);
            return this;
        }

        /**
         * Secondary External Identifier.
         */
        public Builder secondaryExternalId(JsonNullable<String> secondaryExternalId) {
            Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
            this.secondaryExternalId = secondaryExternalId;
            return this;
        }


        /**
         * Secondary source information
         */
        public Builder secondarySource(String secondarySource) {
            Utils.checkNotNull(secondarySource, "secondarySource");
            this.secondarySource = JsonNullable.of(secondarySource);
            return this;
        }

        /**
         * Secondary source information
         */
        public Builder secondarySource(JsonNullable<String> secondarySource) {
            Utils.checkNotNull(secondarySource, "secondarySource");
            this.secondarySource = secondarySource;
            return this;
        }


        /**
         * Friendly identifier of the original item.
         */
        public Builder externalFriendlyId(String externalFriendlyId) {
            Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
            this.externalFriendlyId = JsonNullable.of(externalFriendlyId);
            return this;
        }

        /**
         * Friendly identifier of the original item.
         */
        public Builder externalFriendlyId(JsonNullable<String> externalFriendlyId) {
            Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
            this.externalFriendlyId = externalFriendlyId;
            return this;
        }


        /**
         * Imported tax amount.
         */
        public Builder totalTaxAmountImported(TransactionPublicRequestTotalTaxAmountImported totalTaxAmountImported) {
            Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
            this.totalTaxAmountImported = Optional.ofNullable(totalTaxAmountImported);
            return this;
        }

        /**
         * Imported tax amount.
         */
        public Builder totalTaxAmountImported(Optional<? extends TransactionPublicRequestTotalTaxAmountImported> totalTaxAmountImported) {
            Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
            this.totalTaxAmountImported = totalTaxAmountImported;
            return this;
        }


        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(TransactionPublicRequestTaxRateImported taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = Optional.ofNullable(taxRateImported);
            return this;
        }

        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(Optional<? extends TransactionPublicRequestTaxRateImported> taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = taxRateImported;
            return this;
        }


        /**
         * Calculated tax amount.
         */
        public Builder totalTaxAmountCalculated(TransactionPublicRequestTotalTaxAmountCalculated totalTaxAmountCalculated) {
            Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
            this.totalTaxAmountCalculated = Optional.ofNullable(totalTaxAmountCalculated);
            return this;
        }

        /**
         * Calculated tax amount.
         */
        public Builder totalTaxAmountCalculated(Optional<? extends TransactionPublicRequestTotalTaxAmountCalculated> totalTaxAmountCalculated) {
            Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
            this.totalTaxAmountCalculated = totalTaxAmountCalculated;
            return this;
        }


        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(TransactionPublicRequestTaxRateCalculated taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
            return this;
        }

        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(Optional<? extends TransactionPublicRequestTaxRateCalculated> taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = taxRateCalculated;
            return this;
        }


        /**
         * Total tax liability amount.
         */
        public Builder totalTaxLiabilityAmount(TransactionPublicRequestTotalTaxLiabilityAmount totalTaxLiabilityAmount) {
            Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
            this.totalTaxLiabilityAmount = Optional.ofNullable(totalTaxLiabilityAmount);
            return this;
        }

        /**
         * Total tax liability amount.
         */
        public Builder totalTaxLiabilityAmount(Optional<? extends TransactionPublicRequestTotalTaxLiabilityAmount> totalTaxLiabilityAmount) {
            Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
            this.totalTaxLiabilityAmount = totalTaxLiabilityAmount;
            return this;
        }


        /**
         * Source of tax liability.
         */
        public Builder taxLiabilitySource(TaxLiabilitySourceEnum taxLiabilitySource) {
            Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
            this.taxLiabilitySource = JsonNullable.of(taxLiabilitySource);
            return this;
        }

        /**
         * Source of tax liability.
         */
        public Builder taxLiabilitySource(JsonNullable<? extends TaxLiabilitySourceEnum> taxLiabilitySource) {
            Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
            this.taxLiabilitySource = taxLiabilitySource;
            return this;
        }


        /**
         * Taxable amount.
         */
        public Builder taxableAmount(TransactionPublicRequestTaxableAmount taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = Optional.ofNullable(taxableAmount);
            return this;
        }

        /**
         * Taxable amount.
         */
        public Builder taxableAmount(Optional<? extends TransactionPublicRequestTaxableAmount> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        public Builder currency(CurrencyEnum currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<? extends CurrencyEnum> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Transaction lock status.
         */
        public Builder locked(boolean locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = Optional.ofNullable(locked);
            return this;
        }

        /**
         * Transaction lock status.
         */
        public Builder locked(Optional<Boolean> locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = locked;
            return this;
        }


        public Builder source(SourceEnum source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Optional<? extends SourceEnum> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        /**
         * Connection Identifier
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = JsonNullable.of(connectionId);
            return this;
        }

        /**
         * Connection Identifier
         */
        public Builder connectionId(JsonNullable<String> connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }


        /**
         * Filing identifier.
         */
        public Builder filingId(String filingId) {
            Utils.checkNotNull(filingId, "filingId");
            this.filingId = JsonNullable.of(filingId);
            return this;
        }

        /**
         * Filing identifier.
         */
        public Builder filingId(JsonNullable<String> filingId) {
            Utils.checkNotNull(filingId, "filingId");
            this.filingId = filingId;
            return this;
        }


        /**
         * City of the transaction address.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * City of the transaction address.
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * County of the transaction address.
         */
        public Builder county(String county) {
            Utils.checkNotNull(county, "county");
            this.county = JsonNullable.of(county);
            return this;
        }

        /**
         * County of the transaction address.
         */
        public Builder county(JsonNullable<String> county) {
            Utils.checkNotNull(county, "county");
            this.county = county;
            return this;
        }


        /**
         * State of the transaction address.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * State of the transaction address.
         */
        public Builder state(JsonNullable<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * Country code (ISO Alpha-2).
         */
        public Builder country(CountryCodeEnum country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country code (ISO Alpha-2).
         */
        public Builder country(JsonNullable<? extends CountryCodeEnum> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Postal code of the transaction.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * Postal code of the transaction.
         */
        public Builder postalCode(JsonNullable<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        /**
         * Tax ID associated with the transaction
         */
        public Builder taxId(String taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = JsonNullable.of(taxId);
            return this;
        }

        /**
         * Tax ID associated with the transaction
         */
        public Builder taxId(JsonNullable<String> taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = taxId;
            return this;
        }


        public Builder addresses(List<TransactionAddressPublic> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        public Builder transactionItems(List<TransactionItemBuilder> transactionItems) {
            Utils.checkNotNull(transactionItems, "transactionItems");
            this.transactionItems = transactionItems;
            return this;
        }


        public Builder customer(Customer customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }


        public Builder type(TransactionTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public TransactionPublicRequest build() {
            if (locked == null) {
                locked = _SINGLETON_VALUE_Locked.value();
            }

            return new TransactionPublicRequest(
                requiresExemption, organizationId, externalId,
                date, shopDate, shopDateTz,
                status, description, refundStatus,
                totalAmount, customerId, marketplace,
                exempt, exemptions, relatedTo,
                secondaryExternalId, secondarySource, externalFriendlyId,
                totalTaxAmountImported, taxRateImported, totalTaxAmountCalculated,
                taxRateCalculated, totalTaxLiabilityAmount, taxLiabilitySource,
                taxableAmount, currency, locked,
                source, connectionId, filingId,
                city, county, state,
                country, postalCode, taxId,
                addresses, transactionItems, customer,
                type);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Locked =
                new LazySingletonValue<>(
                        "locked",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
