/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class TransactionUpdate {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requires_exemption")
    private Optional<? extends ExemptionRequired> requiresExemption;

    /**
     * Unique identifier of the organization.
     */
    @JsonProperty("organization_id")
    private String organizationId;

    /**
     * External identifier of the transaction.
     */
    @JsonProperty("external_id")
    private String externalId;

    /**
     * Transaction date and time
     */
    @JsonProperty("date")
    private OffsetDateTime date;

    /**
     * Transaction date in the shop's local timezone
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shop_date")
    private Optional<String> shopDate;

    /**
     * Timezone of the shop
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shop_date_tz")
    private Optional<String> shopDateTz;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TransactionStatusEnum> status;

    /**
     * Description of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Shopify has 2 order statuses for refund case: refunded and partially_refunded
     * If the given order has different status from these 2, we will set the
     * transaction's refund_status to PARTIALLY_REFUNDED by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_status")
    private Optional<? extends TransactionRefundStatus> refundStatus;

    /**
     * Total amount of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<Double> totalAmount;

    /**
     * Unique identifier of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private Optional<String> customerId;

    /**
     * Indicates if transaction is marketplace-based.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketplace")
    private Optional<Boolean> marketplace;

    /**
     * Based on transaction item exempt status.
     * NOT EXEMPT: None of the items are NOT EXEMPT
     * PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
     * FULLY_EXEMPT: All items sold in the transaction are EXEMPT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exempt")
    private Optional<? extends TransactionExemptStatusEnum> exempt;

    /**
     * List of exemptions applied (if any).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exemptions")
    private Optional<? extends List<Exemption>> exemptions;

    /**
     * Related transaction identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("related_to")
    private Optional<String> relatedTo;

    /**
     * Secondary External Identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondary_external_id")
    private Optional<String> secondaryExternalId;

    /**
     * Secondary source information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondary_source")
    private Optional<String> secondarySource;

    /**
     * Friendly identifier of the original item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_friendly_id")
    private Optional<String> externalFriendlyId;

    /**
     * Imported tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_amount_imported")
    private Optional<Double> totalTaxAmountImported;

    /**
     * Imported tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_imported")
    private Optional<Double> taxRateImported;

    /**
     * Calculated tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_amount_calculated")
    private Optional<Double> totalTaxAmountCalculated;

    /**
     * Calculated tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate_calculated")
    private Optional<Double> taxRateCalculated;

    /**
     * Total tax liability amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_liability_amount")
    private Optional<Double> totalTaxLiabilityAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_liability_source")
    private Optional<? extends TaxLiabilitySourceEnum> taxLiabilitySource;

    /**
     * Taxable amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_amount")
    private Optional<Double> taxableAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends CurrencyEnum> currency;

    /**
     * Transaction lock status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    private Optional<Boolean> locked;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends SourceEnum> source;

    /**
     * Connection Identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_id")
    private Optional<String> connectionId;

    /**
     * Filing identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filing_id")
    private Optional<String> filingId;

    /**
     * City of the transaction address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * County of the transaction address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private Optional<String> county;

    /**
     * State of the transaction address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<? extends CountryCodeEnum> country;

    /**
     * Postal code of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private Optional<String> postalCode;

    /**
     * Tax ID associated with the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_id")
    private Optional<String> taxId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_status")
    private Optional<? extends AddressStatus> addressStatus;

    /**
     * Our transaction state, used to determine when/if a transaction needs additional
     * processing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_status")
    private Optional<? extends ProcessingStatusEnum> processingStatus;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_currency")
    private Optional<? extends CurrencyEnum> destinationCurrency;

    /**
     * Converted total amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_total_amount")
    private Optional<Double> convertedTotalAmount;

    /**
     * Converted imported tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_total_tax_amount_imported")
    private Optional<Double> convertedTotalTaxAmountImported;

    /**
     * Converted calculated tax amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_total_tax_amount_calculated")
    private Optional<Double> convertedTotalTaxAmountCalculated;

    /**
     * Currency conversion rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversion_rate")
    private Optional<Double> conversionRate;

    /**
     * Converted taxable amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_taxable_amount")
    private Optional<Double> convertedTaxableAmount;

    /**
     * Converted total discount amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_total_discount")
    private Optional<Double> convertedTotalDiscount;

    /**
     * Converted subtotal amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_subtotal")
    private Optional<Double> convertedSubtotal;

    /**
     * Converted total tax liability amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("converted_total_tax_liability_amount")
    private Optional<Double> convertedTotalTaxLiabilityAmount;


    @JsonProperty("addresses")
    private List<TransactionAddressBuilder> addresses;


    @JsonProperty("transaction_items")
    private List<TransactionItemCreateUpdate> transactionItems;


    @JsonProperty("customer")
    private CustomerUpdate customer;

    @JsonCreator
    public TransactionUpdate(
            @JsonProperty("requires_exemption") Optional<? extends ExemptionRequired> requiresExemption,
            @JsonProperty("organization_id") String organizationId,
            @JsonProperty("external_id") String externalId,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("shop_date") Optional<String> shopDate,
            @JsonProperty("shop_date_tz") Optional<String> shopDateTz,
            @JsonProperty("status") Optional<? extends TransactionStatusEnum> status,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("refund_status") Optional<? extends TransactionRefundStatus> refundStatus,
            @JsonProperty("total_amount") Optional<Double> totalAmount,
            @JsonProperty("customer_id") Optional<String> customerId,
            @JsonProperty("marketplace") Optional<Boolean> marketplace,
            @JsonProperty("exempt") Optional<? extends TransactionExemptStatusEnum> exempt,
            @JsonProperty("exemptions") Optional<? extends List<Exemption>> exemptions,
            @JsonProperty("related_to") Optional<String> relatedTo,
            @JsonProperty("secondary_external_id") Optional<String> secondaryExternalId,
            @JsonProperty("secondary_source") Optional<String> secondarySource,
            @JsonProperty("external_friendly_id") Optional<String> externalFriendlyId,
            @JsonProperty("total_tax_amount_imported") Optional<Double> totalTaxAmountImported,
            @JsonProperty("tax_rate_imported") Optional<Double> taxRateImported,
            @JsonProperty("total_tax_amount_calculated") Optional<Double> totalTaxAmountCalculated,
            @JsonProperty("tax_rate_calculated") Optional<Double> taxRateCalculated,
            @JsonProperty("total_tax_liability_amount") Optional<Double> totalTaxLiabilityAmount,
            @JsonProperty("tax_liability_source") Optional<? extends TaxLiabilitySourceEnum> taxLiabilitySource,
            @JsonProperty("taxable_amount") Optional<Double> taxableAmount,
            @JsonProperty("currency") Optional<? extends CurrencyEnum> currency,
            @JsonProperty("locked") Optional<Boolean> locked,
            @JsonProperty("source") Optional<? extends SourceEnum> source,
            @JsonProperty("connection_id") Optional<String> connectionId,
            @JsonProperty("filing_id") Optional<String> filingId,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("county") Optional<String> county,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("country") Optional<? extends CountryCodeEnum> country,
            @JsonProperty("postal_code") Optional<String> postalCode,
            @JsonProperty("tax_id") Optional<String> taxId,
            @JsonProperty("address_status") Optional<? extends AddressStatus> addressStatus,
            @JsonProperty("processing_status") Optional<? extends ProcessingStatusEnum> processingStatus,
            @JsonProperty("destination_currency") Optional<? extends CurrencyEnum> destinationCurrency,
            @JsonProperty("converted_total_amount") Optional<Double> convertedTotalAmount,
            @JsonProperty("converted_total_tax_amount_imported") Optional<Double> convertedTotalTaxAmountImported,
            @JsonProperty("converted_total_tax_amount_calculated") Optional<Double> convertedTotalTaxAmountCalculated,
            @JsonProperty("conversion_rate") Optional<Double> conversionRate,
            @JsonProperty("converted_taxable_amount") Optional<Double> convertedTaxableAmount,
            @JsonProperty("converted_total_discount") Optional<Double> convertedTotalDiscount,
            @JsonProperty("converted_subtotal") Optional<Double> convertedSubtotal,
            @JsonProperty("converted_total_tax_liability_amount") Optional<Double> convertedTotalTaxLiabilityAmount,
            @JsonProperty("addresses") List<TransactionAddressBuilder> addresses,
            @JsonProperty("transaction_items") List<TransactionItemCreateUpdate> transactionItems,
            @JsonProperty("customer") CustomerUpdate customer) {
        Utils.checkNotNull(requiresExemption, "requiresExemption");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(shopDate, "shopDate");
        Utils.checkNotNull(shopDateTz, "shopDateTz");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(refundStatus, "refundStatus");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(marketplace, "marketplace");
        Utils.checkNotNull(exempt, "exempt");
        Utils.checkNotNull(exemptions, "exemptions");
        Utils.checkNotNull(relatedTo, "relatedTo");
        Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
        Utils.checkNotNull(secondarySource, "secondarySource");
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
        Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(locked, "locked");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(filingId, "filingId");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(county, "county");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(taxId, "taxId");
        Utils.checkNotNull(addressStatus, "addressStatus");
        Utils.checkNotNull(processingStatus, "processingStatus");
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        Utils.checkNotNull(convertedTotalAmount, "convertedTotalAmount");
        Utils.checkNotNull(convertedTotalTaxAmountImported, "convertedTotalTaxAmountImported");
        Utils.checkNotNull(convertedTotalTaxAmountCalculated, "convertedTotalTaxAmountCalculated");
        Utils.checkNotNull(conversionRate, "conversionRate");
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        Utils.checkNotNull(convertedTotalTaxLiabilityAmount, "convertedTotalTaxLiabilityAmount");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(transactionItems, "transactionItems");
        Utils.checkNotNull(customer, "customer");
        this.requiresExemption = requiresExemption;
        this.organizationId = organizationId;
        this.externalId = externalId;
        this.date = date;
        this.shopDate = shopDate;
        this.shopDateTz = shopDateTz;
        this.status = status;
        this.description = description;
        this.refundStatus = refundStatus;
        this.totalAmount = totalAmount;
        this.customerId = customerId;
        this.marketplace = marketplace;
        this.exempt = exempt;
        this.exemptions = exemptions;
        this.relatedTo = relatedTo;
        this.secondaryExternalId = secondaryExternalId;
        this.secondarySource = secondarySource;
        this.externalFriendlyId = externalFriendlyId;
        this.totalTaxAmountImported = totalTaxAmountImported;
        this.taxRateImported = taxRateImported;
        this.totalTaxAmountCalculated = totalTaxAmountCalculated;
        this.taxRateCalculated = taxRateCalculated;
        this.totalTaxLiabilityAmount = totalTaxLiabilityAmount;
        this.taxLiabilitySource = taxLiabilitySource;
        this.taxableAmount = taxableAmount;
        this.currency = currency;
        this.locked = locked;
        this.source = source;
        this.connectionId = connectionId;
        this.filingId = filingId;
        this.city = city;
        this.county = county;
        this.state = state;
        this.country = country;
        this.postalCode = postalCode;
        this.taxId = taxId;
        this.addressStatus = addressStatus;
        this.processingStatus = processingStatus;
        this.destinationCurrency = destinationCurrency;
        this.convertedTotalAmount = convertedTotalAmount;
        this.convertedTotalTaxAmountImported = convertedTotalTaxAmountImported;
        this.convertedTotalTaxAmountCalculated = convertedTotalTaxAmountCalculated;
        this.conversionRate = conversionRate;
        this.convertedTaxableAmount = convertedTaxableAmount;
        this.convertedTotalDiscount = convertedTotalDiscount;
        this.convertedSubtotal = convertedSubtotal;
        this.convertedTotalTaxLiabilityAmount = convertedTotalTaxLiabilityAmount;
        this.addresses = addresses;
        this.transactionItems = transactionItems;
        this.customer = customer;
    }
    
    public TransactionUpdate(
            String organizationId,
            String externalId,
            OffsetDateTime date,
            List<TransactionAddressBuilder> addresses,
            List<TransactionItemCreateUpdate> transactionItems,
            CustomerUpdate customer) {
        this(Optional.empty(), organizationId, externalId,
            date, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), addresses,
            transactionItems, customer);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExemptionRequired> requiresExemption() {
        return (Optional<ExemptionRequired>) requiresExemption;
    }

    /**
     * Unique identifier of the organization.
     */
    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    /**
     * External identifier of the transaction.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * Transaction date and time
     */
    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    /**
     * Transaction date in the shop's local timezone
     */
    @JsonIgnore
    public Optional<String> shopDate() {
        return shopDate;
    }

    /**
     * Timezone of the shop
     */
    @JsonIgnore
    public Optional<String> shopDateTz() {
        return shopDateTz;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionStatusEnum> status() {
        return (Optional<TransactionStatusEnum>) status;
    }

    /**
     * Description of the transaction.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Shopify has 2 order statuses for refund case: refunded and partially_refunded
     * If the given order has different status from these 2, we will set the
     * transaction's refund_status to PARTIALLY_REFUNDED by default.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionRefundStatus> refundStatus() {
        return (Optional<TransactionRefundStatus>) refundStatus;
    }

    /**
     * Total amount of the transaction.
     */
    @JsonIgnore
    public Optional<Double> totalAmount() {
        return totalAmount;
    }

    /**
     * Unique identifier of the customer.
     */
    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    /**
     * Indicates if transaction is marketplace-based.
     */
    @JsonIgnore
    public Optional<Boolean> marketplace() {
        return marketplace;
    }

    /**
     * Based on transaction item exempt status.
     * NOT EXEMPT: None of the items are NOT EXEMPT
     * PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
     * FULLY_EXEMPT: All items sold in the transaction are EXEMPT
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionExemptStatusEnum> exempt() {
        return (Optional<TransactionExemptStatusEnum>) exempt;
    }

    /**
     * List of exemptions applied (if any).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Exemption>> exemptions() {
        return (Optional<List<Exemption>>) exemptions;
    }

    /**
     * Related transaction identifier.
     */
    @JsonIgnore
    public Optional<String> relatedTo() {
        return relatedTo;
    }

    /**
     * Secondary External Identifier.
     */
    @JsonIgnore
    public Optional<String> secondaryExternalId() {
        return secondaryExternalId;
    }

    /**
     * Secondary source information
     */
    @JsonIgnore
    public Optional<String> secondarySource() {
        return secondarySource;
    }

    /**
     * Friendly identifier of the original item.
     */
    @JsonIgnore
    public Optional<String> externalFriendlyId() {
        return externalFriendlyId;
    }

    /**
     * Imported tax amount.
     */
    @JsonIgnore
    public Optional<Double> totalTaxAmountImported() {
        return totalTaxAmountImported;
    }

    /**
     * Imported tax rate.
     */
    @JsonIgnore
    public Optional<Double> taxRateImported() {
        return taxRateImported;
    }

    /**
     * Calculated tax amount.
     */
    @JsonIgnore
    public Optional<Double> totalTaxAmountCalculated() {
        return totalTaxAmountCalculated;
    }

    /**
     * Calculated tax rate.
     */
    @JsonIgnore
    public Optional<Double> taxRateCalculated() {
        return taxRateCalculated;
    }

    /**
     * Total tax liability amount.
     */
    @JsonIgnore
    public Optional<Double> totalTaxLiabilityAmount() {
        return totalTaxLiabilityAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxLiabilitySourceEnum> taxLiabilitySource() {
        return (Optional<TaxLiabilitySourceEnum>) taxLiabilitySource;
    }

    /**
     * Taxable amount.
     */
    @JsonIgnore
    public Optional<Double> taxableAmount() {
        return taxableAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CurrencyEnum> currency() {
        return (Optional<CurrencyEnum>) currency;
    }

    /**
     * Transaction lock status.
     */
    @JsonIgnore
    public Optional<Boolean> locked() {
        return locked;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceEnum> source() {
        return (Optional<SourceEnum>) source;
    }

    /**
     * Connection Identifier
     */
    @JsonIgnore
    public Optional<String> connectionId() {
        return connectionId;
    }

    /**
     * Filing identifier.
     */
    @JsonIgnore
    public Optional<String> filingId() {
        return filingId;
    }

    /**
     * City of the transaction address.
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * County of the transaction address.
     */
    @JsonIgnore
    public Optional<String> county() {
        return county;
    }

    /**
     * State of the transaction address.
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CountryCodeEnum> country() {
        return (Optional<CountryCodeEnum>) country;
    }

    /**
     * Postal code of the transaction.
     */
    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    /**
     * Tax ID associated with the transaction
     */
    @JsonIgnore
    public Optional<String> taxId() {
        return taxId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AddressStatus> addressStatus() {
        return (Optional<AddressStatus>) addressStatus;
    }

    /**
     * Our transaction state, used to determine when/if a transaction needs additional
     * processing.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProcessingStatusEnum> processingStatus() {
        return (Optional<ProcessingStatusEnum>) processingStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CurrencyEnum> destinationCurrency() {
        return (Optional<CurrencyEnum>) destinationCurrency;
    }

    /**
     * Converted total amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTotalAmount() {
        return convertedTotalAmount;
    }

    /**
     * Converted imported tax amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTotalTaxAmountImported() {
        return convertedTotalTaxAmountImported;
    }

    /**
     * Converted calculated tax amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTotalTaxAmountCalculated() {
        return convertedTotalTaxAmountCalculated;
    }

    /**
     * Currency conversion rate.
     */
    @JsonIgnore
    public Optional<Double> conversionRate() {
        return conversionRate;
    }

    /**
     * Converted taxable amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTaxableAmount() {
        return convertedTaxableAmount;
    }

    /**
     * Converted total discount amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTotalDiscount() {
        return convertedTotalDiscount;
    }

    /**
     * Converted subtotal amount.
     */
    @JsonIgnore
    public Optional<Double> convertedSubtotal() {
        return convertedSubtotal;
    }

    /**
     * Converted total tax liability amount.
     */
    @JsonIgnore
    public Optional<Double> convertedTotalTaxLiabilityAmount() {
        return convertedTotalTaxLiabilityAmount;
    }

    @JsonIgnore
    public List<TransactionAddressBuilder> addresses() {
        return addresses;
    }

    @JsonIgnore
    public List<TransactionItemCreateUpdate> transactionItems() {
        return transactionItems;
    }

    @JsonIgnore
    public CustomerUpdate customer() {
        return customer;
    }

    public static Builder builder() {
        return new Builder();
    }


    public TransactionUpdate withRequiresExemption(ExemptionRequired requiresExemption) {
        Utils.checkNotNull(requiresExemption, "requiresExemption");
        this.requiresExemption = Optional.ofNullable(requiresExemption);
        return this;
    }


    public TransactionUpdate withRequiresExemption(Optional<? extends ExemptionRequired> requiresExemption) {
        Utils.checkNotNull(requiresExemption, "requiresExemption");
        this.requiresExemption = requiresExemption;
        return this;
    }

    /**
     * Unique identifier of the organization.
     */
    public TransactionUpdate withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * External identifier of the transaction.
     */
    public TransactionUpdate withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Transaction date and time
     */
    public TransactionUpdate withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Transaction date in the shop's local timezone
     */
    public TransactionUpdate withShopDate(String shopDate) {
        Utils.checkNotNull(shopDate, "shopDate");
        this.shopDate = Optional.ofNullable(shopDate);
        return this;
    }


    /**
     * Transaction date in the shop's local timezone
     */
    public TransactionUpdate withShopDate(Optional<String> shopDate) {
        Utils.checkNotNull(shopDate, "shopDate");
        this.shopDate = shopDate;
        return this;
    }

    /**
     * Timezone of the shop
     */
    public TransactionUpdate withShopDateTz(String shopDateTz) {
        Utils.checkNotNull(shopDateTz, "shopDateTz");
        this.shopDateTz = Optional.ofNullable(shopDateTz);
        return this;
    }


    /**
     * Timezone of the shop
     */
    public TransactionUpdate withShopDateTz(Optional<String> shopDateTz) {
        Utils.checkNotNull(shopDateTz, "shopDateTz");
        this.shopDateTz = shopDateTz;
        return this;
    }

    public TransactionUpdate withStatus(TransactionStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public TransactionUpdate withStatus(Optional<? extends TransactionStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Description of the transaction.
     */
    public TransactionUpdate withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * Description of the transaction.
     */
    public TransactionUpdate withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Shopify has 2 order statuses for refund case: refunded and partially_refunded
     * If the given order has different status from these 2, we will set the
     * transaction's refund_status to PARTIALLY_REFUNDED by default.
     */
    public TransactionUpdate withRefundStatus(TransactionRefundStatus refundStatus) {
        Utils.checkNotNull(refundStatus, "refundStatus");
        this.refundStatus = Optional.ofNullable(refundStatus);
        return this;
    }


    /**
     * Shopify has 2 order statuses for refund case: refunded and partially_refunded
     * If the given order has different status from these 2, we will set the
     * transaction's refund_status to PARTIALLY_REFUNDED by default.
     */
    public TransactionUpdate withRefundStatus(Optional<? extends TransactionRefundStatus> refundStatus) {
        Utils.checkNotNull(refundStatus, "refundStatus");
        this.refundStatus = refundStatus;
        return this;
    }

    /**
     * Total amount of the transaction.
     */
    public TransactionUpdate withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    /**
     * Total amount of the transaction.
     */
    public TransactionUpdate withTotalAmount(Optional<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Unique identifier of the customer.
     */
    public TransactionUpdate withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }


    /**
     * Unique identifier of the customer.
     */
    public TransactionUpdate withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * Indicates if transaction is marketplace-based.
     */
    public TransactionUpdate withMarketplace(boolean marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = Optional.ofNullable(marketplace);
        return this;
    }


    /**
     * Indicates if transaction is marketplace-based.
     */
    public TransactionUpdate withMarketplace(Optional<Boolean> marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Based on transaction item exempt status.
     * NOT EXEMPT: None of the items are NOT EXEMPT
     * PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
     * FULLY_EXEMPT: All items sold in the transaction are EXEMPT
     */
    public TransactionUpdate withExempt(TransactionExemptStatusEnum exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = Optional.ofNullable(exempt);
        return this;
    }


    /**
     * Based on transaction item exempt status.
     * NOT EXEMPT: None of the items are NOT EXEMPT
     * PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
     * FULLY_EXEMPT: All items sold in the transaction are EXEMPT
     */
    public TransactionUpdate withExempt(Optional<? extends TransactionExemptStatusEnum> exempt) {
        Utils.checkNotNull(exempt, "exempt");
        this.exempt = exempt;
        return this;
    }

    /**
     * List of exemptions applied (if any).
     */
    public TransactionUpdate withExemptions(List<Exemption> exemptions) {
        Utils.checkNotNull(exemptions, "exemptions");
        this.exemptions = Optional.ofNullable(exemptions);
        return this;
    }


    /**
     * List of exemptions applied (if any).
     */
    public TransactionUpdate withExemptions(Optional<? extends List<Exemption>> exemptions) {
        Utils.checkNotNull(exemptions, "exemptions");
        this.exemptions = exemptions;
        return this;
    }

    /**
     * Related transaction identifier.
     */
    public TransactionUpdate withRelatedTo(String relatedTo) {
        Utils.checkNotNull(relatedTo, "relatedTo");
        this.relatedTo = Optional.ofNullable(relatedTo);
        return this;
    }


    /**
     * Related transaction identifier.
     */
    public TransactionUpdate withRelatedTo(Optional<String> relatedTo) {
        Utils.checkNotNull(relatedTo, "relatedTo");
        this.relatedTo = relatedTo;
        return this;
    }

    /**
     * Secondary External Identifier.
     */
    public TransactionUpdate withSecondaryExternalId(String secondaryExternalId) {
        Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
        this.secondaryExternalId = Optional.ofNullable(secondaryExternalId);
        return this;
    }


    /**
     * Secondary External Identifier.
     */
    public TransactionUpdate withSecondaryExternalId(Optional<String> secondaryExternalId) {
        Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
        this.secondaryExternalId = secondaryExternalId;
        return this;
    }

    /**
     * Secondary source information
     */
    public TransactionUpdate withSecondarySource(String secondarySource) {
        Utils.checkNotNull(secondarySource, "secondarySource");
        this.secondarySource = Optional.ofNullable(secondarySource);
        return this;
    }


    /**
     * Secondary source information
     */
    public TransactionUpdate withSecondarySource(Optional<String> secondarySource) {
        Utils.checkNotNull(secondarySource, "secondarySource");
        this.secondarySource = secondarySource;
        return this;
    }

    /**
     * Friendly identifier of the original item.
     */
    public TransactionUpdate withExternalFriendlyId(String externalFriendlyId) {
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        this.externalFriendlyId = Optional.ofNullable(externalFriendlyId);
        return this;
    }


    /**
     * Friendly identifier of the original item.
     */
    public TransactionUpdate withExternalFriendlyId(Optional<String> externalFriendlyId) {
        Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
        this.externalFriendlyId = externalFriendlyId;
        return this;
    }

    /**
     * Imported tax amount.
     */
    public TransactionUpdate withTotalTaxAmountImported(double totalTaxAmountImported) {
        Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
        this.totalTaxAmountImported = Optional.ofNullable(totalTaxAmountImported);
        return this;
    }


    /**
     * Imported tax amount.
     */
    public TransactionUpdate withTotalTaxAmountImported(Optional<Double> totalTaxAmountImported) {
        Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
        this.totalTaxAmountImported = totalTaxAmountImported;
        return this;
    }

    /**
     * Imported tax rate.
     */
    public TransactionUpdate withTaxRateImported(double taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = Optional.ofNullable(taxRateImported);
        return this;
    }


    /**
     * Imported tax rate.
     */
    public TransactionUpdate withTaxRateImported(Optional<Double> taxRateImported) {
        Utils.checkNotNull(taxRateImported, "taxRateImported");
        this.taxRateImported = taxRateImported;
        return this;
    }

    /**
     * Calculated tax amount.
     */
    public TransactionUpdate withTotalTaxAmountCalculated(double totalTaxAmountCalculated) {
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        this.totalTaxAmountCalculated = Optional.ofNullable(totalTaxAmountCalculated);
        return this;
    }


    /**
     * Calculated tax amount.
     */
    public TransactionUpdate withTotalTaxAmountCalculated(Optional<Double> totalTaxAmountCalculated) {
        Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
        this.totalTaxAmountCalculated = totalTaxAmountCalculated;
        return this;
    }

    /**
     * Calculated tax rate.
     */
    public TransactionUpdate withTaxRateCalculated(double taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
        return this;
    }


    /**
     * Calculated tax rate.
     */
    public TransactionUpdate withTaxRateCalculated(Optional<Double> taxRateCalculated) {
        Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
        this.taxRateCalculated = taxRateCalculated;
        return this;
    }

    /**
     * Total tax liability amount.
     */
    public TransactionUpdate withTotalTaxLiabilityAmount(double totalTaxLiabilityAmount) {
        Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
        this.totalTaxLiabilityAmount = Optional.ofNullable(totalTaxLiabilityAmount);
        return this;
    }


    /**
     * Total tax liability amount.
     */
    public TransactionUpdate withTotalTaxLiabilityAmount(Optional<Double> totalTaxLiabilityAmount) {
        Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
        this.totalTaxLiabilityAmount = totalTaxLiabilityAmount;
        return this;
    }

    public TransactionUpdate withTaxLiabilitySource(TaxLiabilitySourceEnum taxLiabilitySource) {
        Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
        this.taxLiabilitySource = Optional.ofNullable(taxLiabilitySource);
        return this;
    }


    public TransactionUpdate withTaxLiabilitySource(Optional<? extends TaxLiabilitySourceEnum> taxLiabilitySource) {
        Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
        this.taxLiabilitySource = taxLiabilitySource;
        return this;
    }

    /**
     * Taxable amount.
     */
    public TransactionUpdate withTaxableAmount(double taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = Optional.ofNullable(taxableAmount);
        return this;
    }


    /**
     * Taxable amount.
     */
    public TransactionUpdate withTaxableAmount(Optional<Double> taxableAmount) {
        Utils.checkNotNull(taxableAmount, "taxableAmount");
        this.taxableAmount = taxableAmount;
        return this;
    }

    public TransactionUpdate withCurrency(CurrencyEnum currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public TransactionUpdate withCurrency(Optional<? extends CurrencyEnum> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Transaction lock status.
     */
    public TransactionUpdate withLocked(boolean locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = Optional.ofNullable(locked);
        return this;
    }


    /**
     * Transaction lock status.
     */
    public TransactionUpdate withLocked(Optional<Boolean> locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = locked;
        return this;
    }

    public TransactionUpdate withSource(SourceEnum source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }


    public TransactionUpdate withSource(Optional<? extends SourceEnum> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Connection Identifier
     */
    public TransactionUpdate withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = Optional.ofNullable(connectionId);
        return this;
    }


    /**
     * Connection Identifier
     */
    public TransactionUpdate withConnectionId(Optional<String> connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Filing identifier.
     */
    public TransactionUpdate withFilingId(String filingId) {
        Utils.checkNotNull(filingId, "filingId");
        this.filingId = Optional.ofNullable(filingId);
        return this;
    }


    /**
     * Filing identifier.
     */
    public TransactionUpdate withFilingId(Optional<String> filingId) {
        Utils.checkNotNull(filingId, "filingId");
        this.filingId = filingId;
        return this;
    }

    /**
     * City of the transaction address.
     */
    public TransactionUpdate withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }


    /**
     * City of the transaction address.
     */
    public TransactionUpdate withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * County of the transaction address.
     */
    public TransactionUpdate withCounty(String county) {
        Utils.checkNotNull(county, "county");
        this.county = Optional.ofNullable(county);
        return this;
    }


    /**
     * County of the transaction address.
     */
    public TransactionUpdate withCounty(Optional<String> county) {
        Utils.checkNotNull(county, "county");
        this.county = county;
        return this;
    }

    /**
     * State of the transaction address.
     */
    public TransactionUpdate withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }


    /**
     * State of the transaction address.
     */
    public TransactionUpdate withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public TransactionUpdate withCountry(CountryCodeEnum country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    public TransactionUpdate withCountry(Optional<? extends CountryCodeEnum> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Postal code of the transaction.
     */
    public TransactionUpdate withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }


    /**
     * Postal code of the transaction.
     */
    public TransactionUpdate withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Tax ID associated with the transaction
     */
    public TransactionUpdate withTaxId(String taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = Optional.ofNullable(taxId);
        return this;
    }


    /**
     * Tax ID associated with the transaction
     */
    public TransactionUpdate withTaxId(Optional<String> taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = taxId;
        return this;
    }

    public TransactionUpdate withAddressStatus(AddressStatus addressStatus) {
        Utils.checkNotNull(addressStatus, "addressStatus");
        this.addressStatus = Optional.ofNullable(addressStatus);
        return this;
    }


    public TransactionUpdate withAddressStatus(Optional<? extends AddressStatus> addressStatus) {
        Utils.checkNotNull(addressStatus, "addressStatus");
        this.addressStatus = addressStatus;
        return this;
    }

    /**
     * Our transaction state, used to determine when/if a transaction needs additional
     * processing.
     */
    public TransactionUpdate withProcessingStatus(ProcessingStatusEnum processingStatus) {
        Utils.checkNotNull(processingStatus, "processingStatus");
        this.processingStatus = Optional.ofNullable(processingStatus);
        return this;
    }


    /**
     * Our transaction state, used to determine when/if a transaction needs additional
     * processing.
     */
    public TransactionUpdate withProcessingStatus(Optional<? extends ProcessingStatusEnum> processingStatus) {
        Utils.checkNotNull(processingStatus, "processingStatus");
        this.processingStatus = processingStatus;
        return this;
    }

    public TransactionUpdate withDestinationCurrency(CurrencyEnum destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = Optional.ofNullable(destinationCurrency);
        return this;
    }


    public TransactionUpdate withDestinationCurrency(Optional<? extends CurrencyEnum> destinationCurrency) {
        Utils.checkNotNull(destinationCurrency, "destinationCurrency");
        this.destinationCurrency = destinationCurrency;
        return this;
    }

    /**
     * Converted total amount.
     */
    public TransactionUpdate withConvertedTotalAmount(double convertedTotalAmount) {
        Utils.checkNotNull(convertedTotalAmount, "convertedTotalAmount");
        this.convertedTotalAmount = Optional.ofNullable(convertedTotalAmount);
        return this;
    }


    /**
     * Converted total amount.
     */
    public TransactionUpdate withConvertedTotalAmount(Optional<Double> convertedTotalAmount) {
        Utils.checkNotNull(convertedTotalAmount, "convertedTotalAmount");
        this.convertedTotalAmount = convertedTotalAmount;
        return this;
    }

    /**
     * Converted imported tax amount.
     */
    public TransactionUpdate withConvertedTotalTaxAmountImported(double convertedTotalTaxAmountImported) {
        Utils.checkNotNull(convertedTotalTaxAmountImported, "convertedTotalTaxAmountImported");
        this.convertedTotalTaxAmountImported = Optional.ofNullable(convertedTotalTaxAmountImported);
        return this;
    }


    /**
     * Converted imported tax amount.
     */
    public TransactionUpdate withConvertedTotalTaxAmountImported(Optional<Double> convertedTotalTaxAmountImported) {
        Utils.checkNotNull(convertedTotalTaxAmountImported, "convertedTotalTaxAmountImported");
        this.convertedTotalTaxAmountImported = convertedTotalTaxAmountImported;
        return this;
    }

    /**
     * Converted calculated tax amount.
     */
    public TransactionUpdate withConvertedTotalTaxAmountCalculated(double convertedTotalTaxAmountCalculated) {
        Utils.checkNotNull(convertedTotalTaxAmountCalculated, "convertedTotalTaxAmountCalculated");
        this.convertedTotalTaxAmountCalculated = Optional.ofNullable(convertedTotalTaxAmountCalculated);
        return this;
    }


    /**
     * Converted calculated tax amount.
     */
    public TransactionUpdate withConvertedTotalTaxAmountCalculated(Optional<Double> convertedTotalTaxAmountCalculated) {
        Utils.checkNotNull(convertedTotalTaxAmountCalculated, "convertedTotalTaxAmountCalculated");
        this.convertedTotalTaxAmountCalculated = convertedTotalTaxAmountCalculated;
        return this;
    }

    /**
     * Currency conversion rate.
     */
    public TransactionUpdate withConversionRate(double conversionRate) {
        Utils.checkNotNull(conversionRate, "conversionRate");
        this.conversionRate = Optional.ofNullable(conversionRate);
        return this;
    }


    /**
     * Currency conversion rate.
     */
    public TransactionUpdate withConversionRate(Optional<Double> conversionRate) {
        Utils.checkNotNull(conversionRate, "conversionRate");
        this.conversionRate = conversionRate;
        return this;
    }

    /**
     * Converted taxable amount.
     */
    public TransactionUpdate withConvertedTaxableAmount(double convertedTaxableAmount) {
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        this.convertedTaxableAmount = Optional.ofNullable(convertedTaxableAmount);
        return this;
    }


    /**
     * Converted taxable amount.
     */
    public TransactionUpdate withConvertedTaxableAmount(Optional<Double> convertedTaxableAmount) {
        Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
        this.convertedTaxableAmount = convertedTaxableAmount;
        return this;
    }

    /**
     * Converted total discount amount.
     */
    public TransactionUpdate withConvertedTotalDiscount(double convertedTotalDiscount) {
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        this.convertedTotalDiscount = Optional.ofNullable(convertedTotalDiscount);
        return this;
    }


    /**
     * Converted total discount amount.
     */
    public TransactionUpdate withConvertedTotalDiscount(Optional<Double> convertedTotalDiscount) {
        Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
        this.convertedTotalDiscount = convertedTotalDiscount;
        return this;
    }

    /**
     * Converted subtotal amount.
     */
    public TransactionUpdate withConvertedSubtotal(double convertedSubtotal) {
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        this.convertedSubtotal = Optional.ofNullable(convertedSubtotal);
        return this;
    }


    /**
     * Converted subtotal amount.
     */
    public TransactionUpdate withConvertedSubtotal(Optional<Double> convertedSubtotal) {
        Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
        this.convertedSubtotal = convertedSubtotal;
        return this;
    }

    /**
     * Converted total tax liability amount.
     */
    public TransactionUpdate withConvertedTotalTaxLiabilityAmount(double convertedTotalTaxLiabilityAmount) {
        Utils.checkNotNull(convertedTotalTaxLiabilityAmount, "convertedTotalTaxLiabilityAmount");
        this.convertedTotalTaxLiabilityAmount = Optional.ofNullable(convertedTotalTaxLiabilityAmount);
        return this;
    }


    /**
     * Converted total tax liability amount.
     */
    public TransactionUpdate withConvertedTotalTaxLiabilityAmount(Optional<Double> convertedTotalTaxLiabilityAmount) {
        Utils.checkNotNull(convertedTotalTaxLiabilityAmount, "convertedTotalTaxLiabilityAmount");
        this.convertedTotalTaxLiabilityAmount = convertedTotalTaxLiabilityAmount;
        return this;
    }

    public TransactionUpdate withAddresses(List<TransactionAddressBuilder> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public TransactionUpdate withTransactionItems(List<TransactionItemCreateUpdate> transactionItems) {
        Utils.checkNotNull(transactionItems, "transactionItems");
        this.transactionItems = transactionItems;
        return this;
    }

    public TransactionUpdate withCustomer(CustomerUpdate customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionUpdate other = (TransactionUpdate) o;
        return 
            Utils.enhancedDeepEquals(this.requiresExemption, other.requiresExemption) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId) &&
            Utils.enhancedDeepEquals(this.externalId, other.externalId) &&
            Utils.enhancedDeepEquals(this.date, other.date) &&
            Utils.enhancedDeepEquals(this.shopDate, other.shopDate) &&
            Utils.enhancedDeepEquals(this.shopDateTz, other.shopDateTz) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.refundStatus, other.refundStatus) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.marketplace, other.marketplace) &&
            Utils.enhancedDeepEquals(this.exempt, other.exempt) &&
            Utils.enhancedDeepEquals(this.exemptions, other.exemptions) &&
            Utils.enhancedDeepEquals(this.relatedTo, other.relatedTo) &&
            Utils.enhancedDeepEquals(this.secondaryExternalId, other.secondaryExternalId) &&
            Utils.enhancedDeepEquals(this.secondarySource, other.secondarySource) &&
            Utils.enhancedDeepEquals(this.externalFriendlyId, other.externalFriendlyId) &&
            Utils.enhancedDeepEquals(this.totalTaxAmountImported, other.totalTaxAmountImported) &&
            Utils.enhancedDeepEquals(this.taxRateImported, other.taxRateImported) &&
            Utils.enhancedDeepEquals(this.totalTaxAmountCalculated, other.totalTaxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.taxRateCalculated, other.taxRateCalculated) &&
            Utils.enhancedDeepEquals(this.totalTaxLiabilityAmount, other.totalTaxLiabilityAmount) &&
            Utils.enhancedDeepEquals(this.taxLiabilitySource, other.taxLiabilitySource) &&
            Utils.enhancedDeepEquals(this.taxableAmount, other.taxableAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.locked, other.locked) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId) &&
            Utils.enhancedDeepEquals(this.filingId, other.filingId) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.county, other.county) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.taxId, other.taxId) &&
            Utils.enhancedDeepEquals(this.addressStatus, other.addressStatus) &&
            Utils.enhancedDeepEquals(this.processingStatus, other.processingStatus) &&
            Utils.enhancedDeepEquals(this.destinationCurrency, other.destinationCurrency) &&
            Utils.enhancedDeepEquals(this.convertedTotalAmount, other.convertedTotalAmount) &&
            Utils.enhancedDeepEquals(this.convertedTotalTaxAmountImported, other.convertedTotalTaxAmountImported) &&
            Utils.enhancedDeepEquals(this.convertedTotalTaxAmountCalculated, other.convertedTotalTaxAmountCalculated) &&
            Utils.enhancedDeepEquals(this.conversionRate, other.conversionRate) &&
            Utils.enhancedDeepEquals(this.convertedTaxableAmount, other.convertedTaxableAmount) &&
            Utils.enhancedDeepEquals(this.convertedTotalDiscount, other.convertedTotalDiscount) &&
            Utils.enhancedDeepEquals(this.convertedSubtotal, other.convertedSubtotal) &&
            Utils.enhancedDeepEquals(this.convertedTotalTaxLiabilityAmount, other.convertedTotalTaxLiabilityAmount) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.transactionItems, other.transactionItems) &&
            Utils.enhancedDeepEquals(this.customer, other.customer);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            requiresExemption, organizationId, externalId,
            date, shopDate, shopDateTz,
            status, description, refundStatus,
            totalAmount, customerId, marketplace,
            exempt, exemptions, relatedTo,
            secondaryExternalId, secondarySource, externalFriendlyId,
            totalTaxAmountImported, taxRateImported, totalTaxAmountCalculated,
            taxRateCalculated, totalTaxLiabilityAmount, taxLiabilitySource,
            taxableAmount, currency, locked,
            source, connectionId, filingId,
            city, county, state,
            country, postalCode, taxId,
            addressStatus, processingStatus, destinationCurrency,
            convertedTotalAmount, convertedTotalTaxAmountImported, convertedTotalTaxAmountCalculated,
            conversionRate, convertedTaxableAmount, convertedTotalDiscount,
            convertedSubtotal, convertedTotalTaxLiabilityAmount, addresses,
            transactionItems, customer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionUpdate.class,
                "requiresExemption", requiresExemption,
                "organizationId", organizationId,
                "externalId", externalId,
                "date", date,
                "shopDate", shopDate,
                "shopDateTz", shopDateTz,
                "status", status,
                "description", description,
                "refundStatus", refundStatus,
                "totalAmount", totalAmount,
                "customerId", customerId,
                "marketplace", marketplace,
                "exempt", exempt,
                "exemptions", exemptions,
                "relatedTo", relatedTo,
                "secondaryExternalId", secondaryExternalId,
                "secondarySource", secondarySource,
                "externalFriendlyId", externalFriendlyId,
                "totalTaxAmountImported", totalTaxAmountImported,
                "taxRateImported", taxRateImported,
                "totalTaxAmountCalculated", totalTaxAmountCalculated,
                "taxRateCalculated", taxRateCalculated,
                "totalTaxLiabilityAmount", totalTaxLiabilityAmount,
                "taxLiabilitySource", taxLiabilitySource,
                "taxableAmount", taxableAmount,
                "currency", currency,
                "locked", locked,
                "source", source,
                "connectionId", connectionId,
                "filingId", filingId,
                "city", city,
                "county", county,
                "state", state,
                "country", country,
                "postalCode", postalCode,
                "taxId", taxId,
                "addressStatus", addressStatus,
                "processingStatus", processingStatus,
                "destinationCurrency", destinationCurrency,
                "convertedTotalAmount", convertedTotalAmount,
                "convertedTotalTaxAmountImported", convertedTotalTaxAmountImported,
                "convertedTotalTaxAmountCalculated", convertedTotalTaxAmountCalculated,
                "conversionRate", conversionRate,
                "convertedTaxableAmount", convertedTaxableAmount,
                "convertedTotalDiscount", convertedTotalDiscount,
                "convertedSubtotal", convertedSubtotal,
                "convertedTotalTaxLiabilityAmount", convertedTotalTaxLiabilityAmount,
                "addresses", addresses,
                "transactionItems", transactionItems,
                "customer", customer);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends ExemptionRequired> requiresExemption = Optional.empty();

        private String organizationId;

        private String externalId;

        private OffsetDateTime date;

        private Optional<String> shopDate = Optional.empty();

        private Optional<String> shopDateTz = Optional.empty();

        private Optional<? extends TransactionStatusEnum> status = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<? extends TransactionRefundStatus> refundStatus = Optional.empty();

        private Optional<Double> totalAmount;

        private Optional<String> customerId = Optional.empty();

        private Optional<Boolean> marketplace;

        private Optional<? extends TransactionExemptStatusEnum> exempt = Optional.empty();

        private Optional<? extends List<Exemption>> exemptions = Optional.empty();

        private Optional<String> relatedTo = Optional.empty();

        private Optional<String> secondaryExternalId = Optional.empty();

        private Optional<String> secondarySource = Optional.empty();

        private Optional<String> externalFriendlyId = Optional.empty();

        private Optional<Double> totalTaxAmountImported;

        private Optional<Double> taxRateImported;

        private Optional<Double> totalTaxAmountCalculated;

        private Optional<Double> taxRateCalculated;

        private Optional<Double> totalTaxLiabilityAmount;

        private Optional<? extends TaxLiabilitySourceEnum> taxLiabilitySource = Optional.empty();

        private Optional<Double> taxableAmount;

        private Optional<? extends CurrencyEnum> currency = Optional.empty();

        private Optional<Boolean> locked;

        private Optional<? extends SourceEnum> source = Optional.empty();

        private Optional<String> connectionId = Optional.empty();

        private Optional<String> filingId = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> county = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<? extends CountryCodeEnum> country = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        private Optional<String> taxId = Optional.empty();

        private Optional<? extends AddressStatus> addressStatus = Optional.empty();

        private Optional<? extends ProcessingStatusEnum> processingStatus = Optional.empty();

        private Optional<? extends CurrencyEnum> destinationCurrency = Optional.empty();

        private Optional<Double> convertedTotalAmount = Optional.empty();

        private Optional<Double> convertedTotalTaxAmountImported = Optional.empty();

        private Optional<Double> convertedTotalTaxAmountCalculated = Optional.empty();

        private Optional<Double> conversionRate = Optional.empty();

        private Optional<Double> convertedTaxableAmount = Optional.empty();

        private Optional<Double> convertedTotalDiscount = Optional.empty();

        private Optional<Double> convertedSubtotal = Optional.empty();

        private Optional<Double> convertedTotalTaxLiabilityAmount = Optional.empty();

        private List<TransactionAddressBuilder> addresses;

        private List<TransactionItemCreateUpdate> transactionItems;

        private CustomerUpdate customer;

        private Builder() {
          // force use of static builder() method
        }


        public Builder requiresExemption(ExemptionRequired requiresExemption) {
            Utils.checkNotNull(requiresExemption, "requiresExemption");
            this.requiresExemption = Optional.ofNullable(requiresExemption);
            return this;
        }

        public Builder requiresExemption(Optional<? extends ExemptionRequired> requiresExemption) {
            Utils.checkNotNull(requiresExemption, "requiresExemption");
            this.requiresExemption = requiresExemption;
            return this;
        }


        /**
         * Unique identifier of the organization.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }


        /**
         * External identifier of the transaction.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }


        /**
         * Transaction date and time
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }


        /**
         * Transaction date in the shop's local timezone
         */
        public Builder shopDate(String shopDate) {
            Utils.checkNotNull(shopDate, "shopDate");
            this.shopDate = Optional.ofNullable(shopDate);
            return this;
        }

        /**
         * Transaction date in the shop's local timezone
         */
        public Builder shopDate(Optional<String> shopDate) {
            Utils.checkNotNull(shopDate, "shopDate");
            this.shopDate = shopDate;
            return this;
        }


        /**
         * Timezone of the shop
         */
        public Builder shopDateTz(String shopDateTz) {
            Utils.checkNotNull(shopDateTz, "shopDateTz");
            this.shopDateTz = Optional.ofNullable(shopDateTz);
            return this;
        }

        /**
         * Timezone of the shop
         */
        public Builder shopDateTz(Optional<String> shopDateTz) {
            Utils.checkNotNull(shopDateTz, "shopDateTz");
            this.shopDateTz = shopDateTz;
            return this;
        }


        public Builder status(TransactionStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends TransactionStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Description of the transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the transaction.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Shopify has 2 order statuses for refund case: refunded and partially_refunded
         * If the given order has different status from these 2, we will set the
         * transaction's refund_status to PARTIALLY_REFUNDED by default.
         */
        public Builder refundStatus(TransactionRefundStatus refundStatus) {
            Utils.checkNotNull(refundStatus, "refundStatus");
            this.refundStatus = Optional.ofNullable(refundStatus);
            return this;
        }

        /**
         * Shopify has 2 order statuses for refund case: refunded and partially_refunded
         * If the given order has different status from these 2, we will set the
         * transaction's refund_status to PARTIALLY_REFUNDED by default.
         */
        public Builder refundStatus(Optional<? extends TransactionRefundStatus> refundStatus) {
            Utils.checkNotNull(refundStatus, "refundStatus");
            this.refundStatus = refundStatus;
            return this;
        }


        /**
         * Total amount of the transaction.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * Total amount of the transaction.
         */
        public Builder totalAmount(Optional<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        /**
         * Unique identifier of the customer.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * Unique identifier of the customer.
         */
        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * Indicates if transaction is marketplace-based.
         */
        public Builder marketplace(boolean marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = Optional.ofNullable(marketplace);
            return this;
        }

        /**
         * Indicates if transaction is marketplace-based.
         */
        public Builder marketplace(Optional<Boolean> marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = marketplace;
            return this;
        }


        /**
         * Based on transaction item exempt status.
         * NOT EXEMPT: None of the items are NOT EXEMPT
         * PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
         * FULLY_EXEMPT: All items sold in the transaction are EXEMPT
         */
        public Builder exempt(TransactionExemptStatusEnum exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = Optional.ofNullable(exempt);
            return this;
        }

        /**
         * Based on transaction item exempt status.
         * NOT EXEMPT: None of the items are NOT EXEMPT
         * PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
         * FULLY_EXEMPT: All items sold in the transaction are EXEMPT
         */
        public Builder exempt(Optional<? extends TransactionExemptStatusEnum> exempt) {
            Utils.checkNotNull(exempt, "exempt");
            this.exempt = exempt;
            return this;
        }


        /**
         * List of exemptions applied (if any).
         */
        public Builder exemptions(List<Exemption> exemptions) {
            Utils.checkNotNull(exemptions, "exemptions");
            this.exemptions = Optional.ofNullable(exemptions);
            return this;
        }

        /**
         * List of exemptions applied (if any).
         */
        public Builder exemptions(Optional<? extends List<Exemption>> exemptions) {
            Utils.checkNotNull(exemptions, "exemptions");
            this.exemptions = exemptions;
            return this;
        }


        /**
         * Related transaction identifier.
         */
        public Builder relatedTo(String relatedTo) {
            Utils.checkNotNull(relatedTo, "relatedTo");
            this.relatedTo = Optional.ofNullable(relatedTo);
            return this;
        }

        /**
         * Related transaction identifier.
         */
        public Builder relatedTo(Optional<String> relatedTo) {
            Utils.checkNotNull(relatedTo, "relatedTo");
            this.relatedTo = relatedTo;
            return this;
        }


        /**
         * Secondary External Identifier.
         */
        public Builder secondaryExternalId(String secondaryExternalId) {
            Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
            this.secondaryExternalId = Optional.ofNullable(secondaryExternalId);
            return this;
        }

        /**
         * Secondary External Identifier.
         */
        public Builder secondaryExternalId(Optional<String> secondaryExternalId) {
            Utils.checkNotNull(secondaryExternalId, "secondaryExternalId");
            this.secondaryExternalId = secondaryExternalId;
            return this;
        }


        /**
         * Secondary source information
         */
        public Builder secondarySource(String secondarySource) {
            Utils.checkNotNull(secondarySource, "secondarySource");
            this.secondarySource = Optional.ofNullable(secondarySource);
            return this;
        }

        /**
         * Secondary source information
         */
        public Builder secondarySource(Optional<String> secondarySource) {
            Utils.checkNotNull(secondarySource, "secondarySource");
            this.secondarySource = secondarySource;
            return this;
        }


        /**
         * Friendly identifier of the original item.
         */
        public Builder externalFriendlyId(String externalFriendlyId) {
            Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
            this.externalFriendlyId = Optional.ofNullable(externalFriendlyId);
            return this;
        }

        /**
         * Friendly identifier of the original item.
         */
        public Builder externalFriendlyId(Optional<String> externalFriendlyId) {
            Utils.checkNotNull(externalFriendlyId, "externalFriendlyId");
            this.externalFriendlyId = externalFriendlyId;
            return this;
        }


        /**
         * Imported tax amount.
         */
        public Builder totalTaxAmountImported(double totalTaxAmountImported) {
            Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
            this.totalTaxAmountImported = Optional.ofNullable(totalTaxAmountImported);
            return this;
        }

        /**
         * Imported tax amount.
         */
        public Builder totalTaxAmountImported(Optional<Double> totalTaxAmountImported) {
            Utils.checkNotNull(totalTaxAmountImported, "totalTaxAmountImported");
            this.totalTaxAmountImported = totalTaxAmountImported;
            return this;
        }


        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(double taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = Optional.ofNullable(taxRateImported);
            return this;
        }

        /**
         * Imported tax rate.
         */
        public Builder taxRateImported(Optional<Double> taxRateImported) {
            Utils.checkNotNull(taxRateImported, "taxRateImported");
            this.taxRateImported = taxRateImported;
            return this;
        }


        /**
         * Calculated tax amount.
         */
        public Builder totalTaxAmountCalculated(double totalTaxAmountCalculated) {
            Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
            this.totalTaxAmountCalculated = Optional.ofNullable(totalTaxAmountCalculated);
            return this;
        }

        /**
         * Calculated tax amount.
         */
        public Builder totalTaxAmountCalculated(Optional<Double> totalTaxAmountCalculated) {
            Utils.checkNotNull(totalTaxAmountCalculated, "totalTaxAmountCalculated");
            this.totalTaxAmountCalculated = totalTaxAmountCalculated;
            return this;
        }


        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(double taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = Optional.ofNullable(taxRateCalculated);
            return this;
        }

        /**
         * Calculated tax rate.
         */
        public Builder taxRateCalculated(Optional<Double> taxRateCalculated) {
            Utils.checkNotNull(taxRateCalculated, "taxRateCalculated");
            this.taxRateCalculated = taxRateCalculated;
            return this;
        }


        /**
         * Total tax liability amount.
         */
        public Builder totalTaxLiabilityAmount(double totalTaxLiabilityAmount) {
            Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
            this.totalTaxLiabilityAmount = Optional.ofNullable(totalTaxLiabilityAmount);
            return this;
        }

        /**
         * Total tax liability amount.
         */
        public Builder totalTaxLiabilityAmount(Optional<Double> totalTaxLiabilityAmount) {
            Utils.checkNotNull(totalTaxLiabilityAmount, "totalTaxLiabilityAmount");
            this.totalTaxLiabilityAmount = totalTaxLiabilityAmount;
            return this;
        }


        public Builder taxLiabilitySource(TaxLiabilitySourceEnum taxLiabilitySource) {
            Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
            this.taxLiabilitySource = Optional.ofNullable(taxLiabilitySource);
            return this;
        }

        public Builder taxLiabilitySource(Optional<? extends TaxLiabilitySourceEnum> taxLiabilitySource) {
            Utils.checkNotNull(taxLiabilitySource, "taxLiabilitySource");
            this.taxLiabilitySource = taxLiabilitySource;
            return this;
        }


        /**
         * Taxable amount.
         */
        public Builder taxableAmount(double taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = Optional.ofNullable(taxableAmount);
            return this;
        }

        /**
         * Taxable amount.
         */
        public Builder taxableAmount(Optional<Double> taxableAmount) {
            Utils.checkNotNull(taxableAmount, "taxableAmount");
            this.taxableAmount = taxableAmount;
            return this;
        }


        public Builder currency(CurrencyEnum currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<? extends CurrencyEnum> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Transaction lock status.
         */
        public Builder locked(boolean locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = Optional.ofNullable(locked);
            return this;
        }

        /**
         * Transaction lock status.
         */
        public Builder locked(Optional<Boolean> locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = locked;
            return this;
        }


        public Builder source(SourceEnum source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Optional<? extends SourceEnum> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        /**
         * Connection Identifier
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = Optional.ofNullable(connectionId);
            return this;
        }

        /**
         * Connection Identifier
         */
        public Builder connectionId(Optional<String> connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }


        /**
         * Filing identifier.
         */
        public Builder filingId(String filingId) {
            Utils.checkNotNull(filingId, "filingId");
            this.filingId = Optional.ofNullable(filingId);
            return this;
        }

        /**
         * Filing identifier.
         */
        public Builder filingId(Optional<String> filingId) {
            Utils.checkNotNull(filingId, "filingId");
            this.filingId = filingId;
            return this;
        }


        /**
         * City of the transaction address.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * City of the transaction address.
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * County of the transaction address.
         */
        public Builder county(String county) {
            Utils.checkNotNull(county, "county");
            this.county = Optional.ofNullable(county);
            return this;
        }

        /**
         * County of the transaction address.
         */
        public Builder county(Optional<String> county) {
            Utils.checkNotNull(county, "county");
            this.county = county;
            return this;
        }


        /**
         * State of the transaction address.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * State of the transaction address.
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        public Builder country(CountryCodeEnum country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<? extends CountryCodeEnum> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Postal code of the transaction.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * Postal code of the transaction.
         */
        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        /**
         * Tax ID associated with the transaction
         */
        public Builder taxId(String taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = Optional.ofNullable(taxId);
            return this;
        }

        /**
         * Tax ID associated with the transaction
         */
        public Builder taxId(Optional<String> taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = taxId;
            return this;
        }


        public Builder addressStatus(AddressStatus addressStatus) {
            Utils.checkNotNull(addressStatus, "addressStatus");
            this.addressStatus = Optional.ofNullable(addressStatus);
            return this;
        }

        public Builder addressStatus(Optional<? extends AddressStatus> addressStatus) {
            Utils.checkNotNull(addressStatus, "addressStatus");
            this.addressStatus = addressStatus;
            return this;
        }


        /**
         * Our transaction state, used to determine when/if a transaction needs additional
         * processing.
         */
        public Builder processingStatus(ProcessingStatusEnum processingStatus) {
            Utils.checkNotNull(processingStatus, "processingStatus");
            this.processingStatus = Optional.ofNullable(processingStatus);
            return this;
        }

        /**
         * Our transaction state, used to determine when/if a transaction needs additional
         * processing.
         */
        public Builder processingStatus(Optional<? extends ProcessingStatusEnum> processingStatus) {
            Utils.checkNotNull(processingStatus, "processingStatus");
            this.processingStatus = processingStatus;
            return this;
        }


        public Builder destinationCurrency(CurrencyEnum destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = Optional.ofNullable(destinationCurrency);
            return this;
        }

        public Builder destinationCurrency(Optional<? extends CurrencyEnum> destinationCurrency) {
            Utils.checkNotNull(destinationCurrency, "destinationCurrency");
            this.destinationCurrency = destinationCurrency;
            return this;
        }


        /**
         * Converted total amount.
         */
        public Builder convertedTotalAmount(double convertedTotalAmount) {
            Utils.checkNotNull(convertedTotalAmount, "convertedTotalAmount");
            this.convertedTotalAmount = Optional.ofNullable(convertedTotalAmount);
            return this;
        }

        /**
         * Converted total amount.
         */
        public Builder convertedTotalAmount(Optional<Double> convertedTotalAmount) {
            Utils.checkNotNull(convertedTotalAmount, "convertedTotalAmount");
            this.convertedTotalAmount = convertedTotalAmount;
            return this;
        }


        /**
         * Converted imported tax amount.
         */
        public Builder convertedTotalTaxAmountImported(double convertedTotalTaxAmountImported) {
            Utils.checkNotNull(convertedTotalTaxAmountImported, "convertedTotalTaxAmountImported");
            this.convertedTotalTaxAmountImported = Optional.ofNullable(convertedTotalTaxAmountImported);
            return this;
        }

        /**
         * Converted imported tax amount.
         */
        public Builder convertedTotalTaxAmountImported(Optional<Double> convertedTotalTaxAmountImported) {
            Utils.checkNotNull(convertedTotalTaxAmountImported, "convertedTotalTaxAmountImported");
            this.convertedTotalTaxAmountImported = convertedTotalTaxAmountImported;
            return this;
        }


        /**
         * Converted calculated tax amount.
         */
        public Builder convertedTotalTaxAmountCalculated(double convertedTotalTaxAmountCalculated) {
            Utils.checkNotNull(convertedTotalTaxAmountCalculated, "convertedTotalTaxAmountCalculated");
            this.convertedTotalTaxAmountCalculated = Optional.ofNullable(convertedTotalTaxAmountCalculated);
            return this;
        }

        /**
         * Converted calculated tax amount.
         */
        public Builder convertedTotalTaxAmountCalculated(Optional<Double> convertedTotalTaxAmountCalculated) {
            Utils.checkNotNull(convertedTotalTaxAmountCalculated, "convertedTotalTaxAmountCalculated");
            this.convertedTotalTaxAmountCalculated = convertedTotalTaxAmountCalculated;
            return this;
        }


        /**
         * Currency conversion rate.
         */
        public Builder conversionRate(double conversionRate) {
            Utils.checkNotNull(conversionRate, "conversionRate");
            this.conversionRate = Optional.ofNullable(conversionRate);
            return this;
        }

        /**
         * Currency conversion rate.
         */
        public Builder conversionRate(Optional<Double> conversionRate) {
            Utils.checkNotNull(conversionRate, "conversionRate");
            this.conversionRate = conversionRate;
            return this;
        }


        /**
         * Converted taxable amount.
         */
        public Builder convertedTaxableAmount(double convertedTaxableAmount) {
            Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
            this.convertedTaxableAmount = Optional.ofNullable(convertedTaxableAmount);
            return this;
        }

        /**
         * Converted taxable amount.
         */
        public Builder convertedTaxableAmount(Optional<Double> convertedTaxableAmount) {
            Utils.checkNotNull(convertedTaxableAmount, "convertedTaxableAmount");
            this.convertedTaxableAmount = convertedTaxableAmount;
            return this;
        }


        /**
         * Converted total discount amount.
         */
        public Builder convertedTotalDiscount(double convertedTotalDiscount) {
            Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
            this.convertedTotalDiscount = Optional.ofNullable(convertedTotalDiscount);
            return this;
        }

        /**
         * Converted total discount amount.
         */
        public Builder convertedTotalDiscount(Optional<Double> convertedTotalDiscount) {
            Utils.checkNotNull(convertedTotalDiscount, "convertedTotalDiscount");
            this.convertedTotalDiscount = convertedTotalDiscount;
            return this;
        }


        /**
         * Converted subtotal amount.
         */
        public Builder convertedSubtotal(double convertedSubtotal) {
            Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
            this.convertedSubtotal = Optional.ofNullable(convertedSubtotal);
            return this;
        }

        /**
         * Converted subtotal amount.
         */
        public Builder convertedSubtotal(Optional<Double> convertedSubtotal) {
            Utils.checkNotNull(convertedSubtotal, "convertedSubtotal");
            this.convertedSubtotal = convertedSubtotal;
            return this;
        }


        /**
         * Converted total tax liability amount.
         */
        public Builder convertedTotalTaxLiabilityAmount(double convertedTotalTaxLiabilityAmount) {
            Utils.checkNotNull(convertedTotalTaxLiabilityAmount, "convertedTotalTaxLiabilityAmount");
            this.convertedTotalTaxLiabilityAmount = Optional.ofNullable(convertedTotalTaxLiabilityAmount);
            return this;
        }

        /**
         * Converted total tax liability amount.
         */
        public Builder convertedTotalTaxLiabilityAmount(Optional<Double> convertedTotalTaxLiabilityAmount) {
            Utils.checkNotNull(convertedTotalTaxLiabilityAmount, "convertedTotalTaxLiabilityAmount");
            this.convertedTotalTaxLiabilityAmount = convertedTotalTaxLiabilityAmount;
            return this;
        }


        public Builder addresses(List<TransactionAddressBuilder> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        public Builder transactionItems(List<TransactionItemCreateUpdate> transactionItems) {
            Utils.checkNotNull(transactionItems, "transactionItems");
            this.transactionItems = transactionItems;
            return this;
        }


        public Builder customer(CustomerUpdate customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        public TransactionUpdate build() {
            if (totalAmount == null) {
                totalAmount = _SINGLETON_VALUE_TotalAmount.value();
            }
            if (marketplace == null) {
                marketplace = _SINGLETON_VALUE_Marketplace.value();
            }
            if (totalTaxAmountImported == null) {
                totalTaxAmountImported = _SINGLETON_VALUE_TotalTaxAmountImported.value();
            }
            if (taxRateImported == null) {
                taxRateImported = _SINGLETON_VALUE_TaxRateImported.value();
            }
            if (totalTaxAmountCalculated == null) {
                totalTaxAmountCalculated = _SINGLETON_VALUE_TotalTaxAmountCalculated.value();
            }
            if (taxRateCalculated == null) {
                taxRateCalculated = _SINGLETON_VALUE_TaxRateCalculated.value();
            }
            if (totalTaxLiabilityAmount == null) {
                totalTaxLiabilityAmount = _SINGLETON_VALUE_TotalTaxLiabilityAmount.value();
            }
            if (taxableAmount == null) {
                taxableAmount = _SINGLETON_VALUE_TaxableAmount.value();
            }
            if (locked == null) {
                locked = _SINGLETON_VALUE_Locked.value();
            }

            return new TransactionUpdate(
                requiresExemption, organizationId, externalId,
                date, shopDate, shopDateTz,
                status, description, refundStatus,
                totalAmount, customerId, marketplace,
                exempt, exemptions, relatedTo,
                secondaryExternalId, secondarySource, externalFriendlyId,
                totalTaxAmountImported, taxRateImported, totalTaxAmountCalculated,
                taxRateCalculated, totalTaxLiabilityAmount, taxLiabilitySource,
                taxableAmount, currency, locked,
                source, connectionId, filingId,
                city, county, state,
                country, postalCode, taxId,
                addressStatus, processingStatus, destinationCurrency,
                convertedTotalAmount, convertedTotalTaxAmountImported, convertedTotalTaxAmountCalculated,
                conversionRate, convertedTaxableAmount, convertedTotalDiscount,
                convertedSubtotal, convertedTotalTaxLiabilityAmount, addresses,
                transactionItems, customer);
        }


        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TotalAmount =
                new LazySingletonValue<>(
                        "total_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Marketplace =
                new LazySingletonValue<>(
                        "marketplace",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TotalTaxAmountImported =
                new LazySingletonValue<>(
                        "total_tax_amount_imported",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TaxRateImported =
                new LazySingletonValue<>(
                        "tax_rate_imported",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TotalTaxAmountCalculated =
                new LazySingletonValue<>(
                        "total_tax_amount_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TaxRateCalculated =
                new LazySingletonValue<>(
                        "tax_rate_calculated",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TotalTaxLiabilityAmount =
                new LazySingletonValue<>(
                        "total_tax_liability_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_TaxableAmount =
                new LazySingletonValue<>(
                        "taxable_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Locked =
                new LazySingletonValue<>(
                        "locked",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
