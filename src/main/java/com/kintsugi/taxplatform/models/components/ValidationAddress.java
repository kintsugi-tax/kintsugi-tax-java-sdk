/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ValidationAddress {
    /**
     * Primary address line, such as street name and number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")
    private Optional<String> line1;

    /**
     * Additional address details, such as an apartment or suite number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")
    private Optional<String> line2;

    /**
     * Additional address details for complex addresses
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line3")
    private Optional<String> line3;

    /**
     * The city or town name for the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * State, province, or region of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
     * Defaults to 'US'.
     * should not be empty. Not validating here as the validation
     * structure can be different for different providers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    /**
     * ZIP or postal code for the address. Can be empty for some locales.
     * Not validating here as the validation structure can be different for different providers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    private Optional<String> postalCode;

    /**
     * Unique identifier for the request, if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<Long> id;

    /**
     * County or district name for the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private Optional<String> county;

    /**
     * A complete address string that can be used as an alternative to providing individual fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_address")
    private Optional<String> fullAddress;

    @JsonCreator
    public ValidationAddress(
            @JsonProperty("line1") Optional<String> line1,
            @JsonProperty("line2") Optional<String> line2,
            @JsonProperty("line3") Optional<String> line3,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("country") Optional<String> country,
            @JsonProperty("postalCode") Optional<String> postalCode,
            @JsonProperty("id") Optional<Long> id,
            @JsonProperty("county") Optional<String> county,
            @JsonProperty("full_address") Optional<String> fullAddress) {
        Utils.checkNotNull(line1, "line1");
        Utils.checkNotNull(line2, "line2");
        Utils.checkNotNull(line3, "line3");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(county, "county");
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.line1 = line1;
        this.line2 = line2;
        this.line3 = line3;
        this.city = city;
        this.state = state;
        this.country = country;
        this.postalCode = postalCode;
        this.id = id;
        this.county = county;
        this.fullAddress = fullAddress;
    }
    
    public ValidationAddress() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Primary address line, such as street name and number
     */
    @JsonIgnore
    public Optional<String> line1() {
        return line1;
    }

    /**
     * Additional address details, such as an apartment or suite number
     */
    @JsonIgnore
    public Optional<String> line2() {
        return line2;
    }

    /**
     * Additional address details for complex addresses
     */
    @JsonIgnore
    public Optional<String> line3() {
        return line3;
    }

    /**
     * The city or town name for the address
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * State, province, or region of the address
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
     * Defaults to 'US'.
     * should not be empty. Not validating here as the validation
     * structure can be different for different providers
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    /**
     * ZIP or postal code for the address. Can be empty for some locales.
     * Not validating here as the validation structure can be different for different providers
     */
    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    /**
     * Unique identifier for the request, if applicable
     */
    @JsonIgnore
    public Optional<Long> id() {
        return id;
    }

    /**
     * County or district name for the address
     */
    @JsonIgnore
    public Optional<String> county() {
        return county;
    }

    /**
     * A complete address string that can be used as an alternative to providing individual fields.
     */
    @JsonIgnore
    public Optional<String> fullAddress() {
        return fullAddress;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Primary address line, such as street name and number
     */
    public ValidationAddress withLine1(String line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = Optional.ofNullable(line1);
        return this;
    }


    /**
     * Primary address line, such as street name and number
     */
    public ValidationAddress withLine1(Optional<String> line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = line1;
        return this;
    }

    /**
     * Additional address details, such as an apartment or suite number
     */
    public ValidationAddress withLine2(String line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = Optional.ofNullable(line2);
        return this;
    }


    /**
     * Additional address details, such as an apartment or suite number
     */
    public ValidationAddress withLine2(Optional<String> line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = line2;
        return this;
    }

    /**
     * Additional address details for complex addresses
     */
    public ValidationAddress withLine3(String line3) {
        Utils.checkNotNull(line3, "line3");
        this.line3 = Optional.ofNullable(line3);
        return this;
    }


    /**
     * Additional address details for complex addresses
     */
    public ValidationAddress withLine3(Optional<String> line3) {
        Utils.checkNotNull(line3, "line3");
        this.line3 = line3;
        return this;
    }

    /**
     * The city or town name for the address
     */
    public ValidationAddress withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }


    /**
     * The city or town name for the address
     */
    public ValidationAddress withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * State, province, or region of the address
     */
    public ValidationAddress withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }


    /**
     * State, province, or region of the address
     */
    public ValidationAddress withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
     * Defaults to 'US'.
     * should not be empty. Not validating here as the validation
     * structure can be different for different providers
     */
    public ValidationAddress withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
     * Defaults to 'US'.
     * should not be empty. Not validating here as the validation
     * structure can be different for different providers
     */
    public ValidationAddress withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * ZIP or postal code for the address. Can be empty for some locales.
     * Not validating here as the validation structure can be different for different providers
     */
    public ValidationAddress withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }


    /**
     * ZIP or postal code for the address. Can be empty for some locales.
     * Not validating here as the validation structure can be different for different providers
     */
    public ValidationAddress withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Unique identifier for the request, if applicable
     */
    public ValidationAddress withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * Unique identifier for the request, if applicable
     */
    public ValidationAddress withId(Optional<Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * County or district name for the address
     */
    public ValidationAddress withCounty(String county) {
        Utils.checkNotNull(county, "county");
        this.county = Optional.ofNullable(county);
        return this;
    }


    /**
     * County or district name for the address
     */
    public ValidationAddress withCounty(Optional<String> county) {
        Utils.checkNotNull(county, "county");
        this.county = county;
        return this;
    }

    /**
     * A complete address string that can be used as an alternative to providing individual fields.
     */
    public ValidationAddress withFullAddress(String fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = Optional.ofNullable(fullAddress);
        return this;
    }


    /**
     * A complete address string that can be used as an alternative to providing individual fields.
     */
    public ValidationAddress withFullAddress(Optional<String> fullAddress) {
        Utils.checkNotNull(fullAddress, "fullAddress");
        this.fullAddress = fullAddress;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ValidationAddress other = (ValidationAddress) o;
        return 
            Utils.enhancedDeepEquals(this.line1, other.line1) &&
            Utils.enhancedDeepEquals(this.line2, other.line2) &&
            Utils.enhancedDeepEquals(this.line3, other.line3) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.county, other.county) &&
            Utils.enhancedDeepEquals(this.fullAddress, other.fullAddress);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            line1, line2, line3,
            city, state, country,
            postalCode, id, county,
            fullAddress);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ValidationAddress.class,
                "line1", line1,
                "line2", line2,
                "line3", line3,
                "city", city,
                "state", state,
                "country", country,
                "postalCode", postalCode,
                "id", id,
                "county", county,
                "fullAddress", fullAddress);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> line1 = Optional.empty();

        private Optional<String> line2 = Optional.empty();

        private Optional<String> line3 = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> country;

        private Optional<String> postalCode;

        private Optional<Long> id = Optional.empty();

        private Optional<String> county = Optional.empty();

        private Optional<String> fullAddress = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Primary address line, such as street name and number
         */
        public Builder line1(String line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = Optional.ofNullable(line1);
            return this;
        }

        /**
         * Primary address line, such as street name and number
         */
        public Builder line1(Optional<String> line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = line1;
            return this;
        }


        /**
         * Additional address details, such as an apartment or suite number
         */
        public Builder line2(String line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = Optional.ofNullable(line2);
            return this;
        }

        /**
         * Additional address details, such as an apartment or suite number
         */
        public Builder line2(Optional<String> line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = line2;
            return this;
        }


        /**
         * Additional address details for complex addresses
         */
        public Builder line3(String line3) {
            Utils.checkNotNull(line3, "line3");
            this.line3 = Optional.ofNullable(line3);
            return this;
        }

        /**
         * Additional address details for complex addresses
         */
        public Builder line3(Optional<String> line3) {
            Utils.checkNotNull(line3, "line3");
            this.line3 = line3;
            return this;
        }


        /**
         * The city or town name for the address
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * The city or town name for the address
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * State, province, or region of the address
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * State, province, or region of the address
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
         * Defaults to 'US'.
         * should not be empty. Not validating here as the validation
         * structure can be different for different providers
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
         * Defaults to 'US'.
         * should not be empty. Not validating here as the validation
         * structure can be different for different providers
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * ZIP or postal code for the address. Can be empty for some locales.
         * Not validating here as the validation structure can be different for different providers
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * ZIP or postal code for the address. Can be empty for some locales.
         * Not validating here as the validation structure can be different for different providers
         */
        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        /**
         * Unique identifier for the request, if applicable
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier for the request, if applicable
         */
        public Builder id(Optional<Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * County or district name for the address
         */
        public Builder county(String county) {
            Utils.checkNotNull(county, "county");
            this.county = Optional.ofNullable(county);
            return this;
        }

        /**
         * County or district name for the address
         */
        public Builder county(Optional<String> county) {
            Utils.checkNotNull(county, "county");
            this.county = county;
            return this;
        }


        /**
         * A complete address string that can be used as an alternative to providing individual fields.
         */
        public Builder fullAddress(String fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = Optional.ofNullable(fullAddress);
            return this;
        }

        /**
         * A complete address string that can be used as an alternative to providing individual fields.
         */
        public Builder fullAddress(Optional<String> fullAddress) {
            Utils.checkNotNull(fullAddress, "fullAddress");
            this.fullAddress = fullAddress;
            return this;
        }

        public ValidationAddress build() {
            if (country == null) {
                country = _SINGLETON_VALUE_Country.value();
            }
            if (postalCode == null) {
                postalCode = _SINGLETON_VALUE_PostalCode.value();
            }

            return new ValidationAddress(
                line1, line2, line3,
                city, state, country,
                postalCode, id, county,
                fullAddress);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Country =
                new LazySingletonValue<>(
                        "country",
                        "\"US\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_PostalCode =
                new LazySingletonValue<>(
                        "postalCode",
                        "\"\"",
                        new TypeReference<Optional<String>>() {});
    }
}
