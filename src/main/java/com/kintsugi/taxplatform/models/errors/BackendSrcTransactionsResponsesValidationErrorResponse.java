/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kintsugi.taxplatform.models.components.BackendSrcTransactionsResponsesValidationErrorItem;
import com.kintsugi.taxplatform.utils.Utils;
import java.io.InputStream;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;


@SuppressWarnings("serial")
public class BackendSrcTransactionsResponsesValidationErrorResponse extends RuntimeException {

    @JsonProperty("detail")
    private List<BackendSrcTransactionsResponsesValidationErrorItem> detail;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RawResponse")
    private Optional<? extends HttpResponse<InputStream>> rawResponse;

    @JsonCreator
    public BackendSrcTransactionsResponsesValidationErrorResponse(
            @JsonProperty("detail") List<BackendSrcTransactionsResponsesValidationErrorItem> detail,
            @JsonProperty("RawResponse") Optional<? extends HttpResponse<InputStream>> rawResponse) {
        super("API error occurred");
        Utils.checkNotNull(detail, "detail");
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.detail = detail;
        this.rawResponse = rawResponse;
    }
    
    public BackendSrcTransactionsResponsesValidationErrorResponse(
            List<BackendSrcTransactionsResponsesValidationErrorItem> detail) {
        this(detail, Optional.empty());
    }

    @JsonIgnore
    public List<BackendSrcTransactionsResponsesValidationErrorItem> detail() {
        return detail;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HttpResponse<InputStream>> rawResponse() {
        return (Optional<HttpResponse<InputStream>>) rawResponse;
    }

    public static Builder builder() {
        return new Builder();
    }


    public BackendSrcTransactionsResponsesValidationErrorResponse withDetail(List<BackendSrcTransactionsResponsesValidationErrorItem> detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = detail;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public BackendSrcTransactionsResponsesValidationErrorResponse withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = Optional.ofNullable(rawResponse);
        return this;
    }


    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public BackendSrcTransactionsResponsesValidationErrorResponse withRawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BackendSrcTransactionsResponsesValidationErrorResponse other = (BackendSrcTransactionsResponsesValidationErrorResponse) o;
        return 
            Utils.enhancedDeepEquals(this.detail, other.detail) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            detail, rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BackendSrcTransactionsResponsesValidationErrorResponse.class,
                "detail", detail,
                "rawResponse", rawResponse);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<BackendSrcTransactionsResponsesValidationErrorItem> detail;

        private Optional<? extends HttpResponse<InputStream>> rawResponse;

        private Builder() {
          // force use of static builder() method
        }


        public Builder detail(List<BackendSrcTransactionsResponsesValidationErrorItem> detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
            return this;
        }


        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = Optional.ofNullable(rawResponse);
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }

        public BackendSrcTransactionsResponsesValidationErrorResponse build() {

            return new BackendSrcTransactionsResponsesValidationErrorResponse(
                detail, rawResponse);
        }

    }
}

