/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.models.components.ValidationError;
import com.kintsugi.taxplatform.utils.Blob;
import com.kintsugi.taxplatform.utils.Utils;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

@SuppressWarnings("serial")
public class HTTPValidationError extends SDKError {

    @Nullable
    private final Data data;

    @Nullable
    private final Throwable deserializationException;

    public HTTPValidationError(
                int code,
                byte[] body,
                HttpResponse<?> rawResponse,
                @Nullable Data data,
                @Nullable Throwable deserializationException) {
        super("API error occurred", code, body, rawResponse, null);
        this.data = data;
        this.deserializationException = deserializationException;
    }

    /**
    * Parse a response into an instance of HTTPValidationError. If deserialization of the response body fails,
    * the resulting HTTPValidationError instance will have a null data() value and a non-null deserializationException().
    */
    public static HTTPValidationError from(HttpResponse<InputStream> response) {
        try {
            byte[] bytes = Utils.extractByteArrayFromBody(response);
            Data data = Utils.mapper().readValue(bytes, Data.class);
            return new HTTPValidationError(response.statusCode(), bytes, response, data, null);
        } catch (Exception e) {
            return new HTTPValidationError(response.statusCode(), null, response, null, e);
        }
    }

    /**
    * Parse a response into an instance of HTTPValidationError asynchronously. If deserialization of the response body fails,
    * the resulting HTTPValidationError instance will have a null data() value and a non-null deserializationException().
    */
    public static CompletableFuture<HTTPValidationError> fromAsync(HttpResponse<Blob> response) {
        return response.body()
                .toByteArray()
                .handle((bytes, err) -> {
                    // if a body read error occurs, we want to transform the exception
                    if (err != null) {
                        throw new AsyncAPIException(
                                "Error reading response body: " + err.getMessage(),
                                response.statusCode(),
                                null,
                                response,
                                err);
                    }

                    try {
                        return new HTTPValidationError(
                                response.statusCode(),
                                bytes,
                                response,
                                Utils.mapper().readValue(
                                        bytes,
                                        new TypeReference<Data>() {
                                        }),
                                null);
                    } catch (Exception e) {
                        return new HTTPValidationError(
                                response.statusCode(),
                                bytes,
                                response,
                                null,
                                e);
                    }
                });
    }

    @Deprecated
    public Optional<List<ValidationError>> detail() {
        return data().flatMap(Data::detail);
    }

    public Optional<Data> data() {
        return Optional.ofNullable(data);
    }

    /**
     * Returns the exception if an error occurs while deserializing the response body.
     */
    public Optional<Throwable> deserializationException() {
        return Optional.ofNullable(deserializationException);
    }

    public static class Data {

        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("detail")
        private Optional<? extends List<ValidationError>> detail;

        @JsonCreator
        public Data(
                @JsonProperty("detail") Optional<? extends List<ValidationError>> detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
        }
        
        public Data() {
            this(Optional.empty());
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<List<ValidationError>> detail() {
            return (Optional<List<ValidationError>>) detail;
        }

        public static Builder builder() {
            return new Builder();
        }


        public Data withDetail(List<ValidationError> detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = Optional.ofNullable(detail);
            return this;
        }


        public Data withDetail(Optional<? extends List<ValidationError>> detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
            return this;
        }

        @Override
        public boolean equals(java.lang.Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Data other = (Data) o;
            return 
                Utils.enhancedDeepEquals(this.detail, other.detail);
        }
        
        @Override
        public int hashCode() {
            return Utils.enhancedHash(
                detail);
        }
        
        @Override
        public String toString() {
            return Utils.toString(Data.class,
                    "detail", detail);
        }

        @SuppressWarnings("UnusedReturnValue")
        public final static class Builder {

            private Optional<? extends List<ValidationError>> detail = Optional.empty();

            private Builder() {
              // force use of static builder() method
            }


            public Builder detail(List<ValidationError> detail) {
                Utils.checkNotNull(detail, "detail");
                this.detail = Optional.ofNullable(detail);
                return this;
            }

            public Builder detail(Optional<? extends List<ValidationError>> detail) {
                Utils.checkNotNull(detail, "detail");
                this.detail = detail;
                return this;
            }

            public Data build() {

                return new Data(
                    detail);
            }

        }
    }

}

