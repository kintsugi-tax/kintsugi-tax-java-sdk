/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.components.CustomerCreate;
import com.kintsugi.taxplatform.operations.CreateCustomerV1CustomersPostOperation;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class CreateCustomerV1CustomersPostRequestBuilder {

    private CreateCustomerV1CustomersPostSecurity security;
    private Optional<String> xOrganizationId = Optional.empty();
    private CustomerCreate customerCreate;
    private final SDKConfiguration sdkConfiguration;

    public CreateCustomerV1CustomersPostRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateCustomerV1CustomersPostRequestBuilder security(CreateCustomerV1CustomersPostSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }
                
    public CreateCustomerV1CustomersPostRequestBuilder xOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.of(xOrganizationId);
        return this;
    }

    public CreateCustomerV1CustomersPostRequestBuilder xOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    public CreateCustomerV1CustomersPostRequestBuilder customerCreate(CustomerCreate customerCreate) {
        Utils.checkNotNull(customerCreate, "customerCreate");
        this.customerCreate = customerCreate;
        return this;
    }


    private CreateCustomerV1CustomersPostRequest buildRequest() {

        CreateCustomerV1CustomersPostRequest request = new CreateCustomerV1CustomersPostRequest(xOrganizationId,
            customerCreate);

        return request;
    }

    public CreateCustomerV1CustomersPostResponse call() throws Exception {
        
        RequestOperation<CreateCustomerV1CustomersPostRequest, CreateCustomerV1CustomersPostResponse> operation
              = new CreateCustomerV1CustomersPostOperation(
                sdkConfiguration,
                security);
        CreateCustomerV1CustomersPostRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
