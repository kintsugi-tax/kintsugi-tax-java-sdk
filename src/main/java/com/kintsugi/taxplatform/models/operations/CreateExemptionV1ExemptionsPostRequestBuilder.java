/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.components.ExemptionCreate;
import com.kintsugi.taxplatform.operations.CreateExemptionV1ExemptionsPostOperation;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class CreateExemptionV1ExemptionsPostRequestBuilder {

    private CreateExemptionV1ExemptionsPostSecurity security;
    private Optional<String> xOrganizationId = Optional.empty();
    private ExemptionCreate exemptionCreate;
    private final SDKConfiguration sdkConfiguration;

    public CreateExemptionV1ExemptionsPostRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateExemptionV1ExemptionsPostRequestBuilder security(CreateExemptionV1ExemptionsPostSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }
                
    public CreateExemptionV1ExemptionsPostRequestBuilder xOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.of(xOrganizationId);
        return this;
    }

    public CreateExemptionV1ExemptionsPostRequestBuilder xOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    public CreateExemptionV1ExemptionsPostRequestBuilder exemptionCreate(ExemptionCreate exemptionCreate) {
        Utils.checkNotNull(exemptionCreate, "exemptionCreate");
        this.exemptionCreate = exemptionCreate;
        return this;
    }


    private CreateExemptionV1ExemptionsPostRequest buildRequest() {

        CreateExemptionV1ExemptionsPostRequest request = new CreateExemptionV1ExemptionsPostRequest(xOrganizationId,
            exemptionCreate);

        return request;
    }

    public CreateExemptionV1ExemptionsPostResponse call() throws Exception {
        
        RequestOperation<CreateExemptionV1ExemptionsPostRequest, CreateExemptionV1ExemptionsPostResponse> operation
              = new CreateExemptionV1ExemptionsPostOperation(sdkConfiguration, security);
        CreateExemptionV1ExemptionsPostRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
