/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.kintsugi.taxplatform.models.components.TransactionCreate;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=customer_id")
    private String customerId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private TransactionCreate transactionCreate;

    @JsonCreator
    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest(
            String customerId,
            TransactionCreate transactionCreate) {
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(transactionCreate, "transactionCreate");
        this.customerId = customerId;
        this.transactionCreate = transactionCreate;
    }

    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    @JsonIgnore
    public TransactionCreate transactionCreate() {
        return transactionCreate;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest withTransactionCreate(TransactionCreate transactionCreate) {
        Utils.checkNotNull(transactionCreate, "transactionCreate");
        this.transactionCreate = transactionCreate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest other = (CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest) o;
        return 
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.transactionCreate, other.transactionCreate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            customerId, transactionCreate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest.class,
                "customerId", customerId,
                "transactionCreate", transactionCreate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String customerId;

        private TransactionCreate transactionCreate;

        private Builder() {
          // force use of static builder() method
        }


        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        public Builder transactionCreate(TransactionCreate transactionCreate) {
            Utils.checkNotNull(transactionCreate, "transactionCreate");
            this.transactionCreate = transactionCreate;
            return this;
        }

        public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest build() {

            return new CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest(
                customerId, transactionCreate);
        }

    }
}
