/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.components.TransactionCreate;
import com.kintsugi.taxplatform.operations.CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostOperation;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder {

    private CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostSecurity security;
    private String customerId;
    private Optional<String> xOrganizationId = Optional.empty();
    private TransactionCreate transactionCreate;
    private final SDKConfiguration sdkConfiguration;

    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder security(CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }

    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder customerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }
                
    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder xOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.of(xOrganizationId);
        return this;
    }

    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder xOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequestBuilder transactionCreate(TransactionCreate transactionCreate) {
        Utils.checkNotNull(transactionCreate, "transactionCreate");
        this.transactionCreate = transactionCreate;
        return this;
    }


    private CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest buildRequest() {

        CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest request = new CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest(customerId,
            xOrganizationId,
            transactionCreate);

        return request;
    }

    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse call() throws Exception {
        
        RequestOperation<CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest, CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse> operation
              = new CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostOperation(
                sdkConfiguration,
                security);
        CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
