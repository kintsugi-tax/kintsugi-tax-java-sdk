/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.kintsugi.taxplatform.models.components.TransactionEstimatePublicRequest;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class EstimateTaxV1TaxEstimatePostRequest {
    /**
     * **Deprecated:** Use `simulate_active_registration` in the request body instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=simulate_nexus_met")
    @Deprecated
    private Optional<Boolean> simulateNexusMet;

    /**
     * The unique identifier for the organization making the request
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-organization-id")
    private Optional<String> xOrganizationId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private TransactionEstimatePublicRequest transactionEstimatePublicRequest;

    @JsonCreator
    public EstimateTaxV1TaxEstimatePostRequest(
            Optional<Boolean> simulateNexusMet,
            Optional<String> xOrganizationId,
            TransactionEstimatePublicRequest transactionEstimatePublicRequest) {
        Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        Utils.checkNotNull(transactionEstimatePublicRequest, "transactionEstimatePublicRequest");
        this.simulateNexusMet = simulateNexusMet;
        this.xOrganizationId = xOrganizationId;
        this.transactionEstimatePublicRequest = transactionEstimatePublicRequest;
    }
    
    public EstimateTaxV1TaxEstimatePostRequest(
            TransactionEstimatePublicRequest transactionEstimatePublicRequest) {
        this(Optional.empty(), Optional.empty(), transactionEstimatePublicRequest);
    }

    /**
     * **Deprecated:** Use `simulate_active_registration` in the request body instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> simulateNexusMet() {
        return simulateNexusMet;
    }

    /**
     * The unique identifier for the organization making the request
     */
    @JsonIgnore
    public Optional<String> xOrganizationId() {
        return xOrganizationId;
    }

    @JsonIgnore
    public TransactionEstimatePublicRequest transactionEstimatePublicRequest() {
        return transactionEstimatePublicRequest;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * **Deprecated:** Use `simulate_active_registration` in the request body instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public EstimateTaxV1TaxEstimatePostRequest withSimulateNexusMet(boolean simulateNexusMet) {
        Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
        this.simulateNexusMet = Optional.ofNullable(simulateNexusMet);
        return this;
    }


    /**
     * **Deprecated:** Use `simulate_active_registration` in the request body instead.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public EstimateTaxV1TaxEstimatePostRequest withSimulateNexusMet(Optional<Boolean> simulateNexusMet) {
        Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
        this.simulateNexusMet = simulateNexusMet;
        return this;
    }

    /**
     * The unique identifier for the organization making the request
     */
    public EstimateTaxV1TaxEstimatePostRequest withXOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.ofNullable(xOrganizationId);
        return this;
    }


    /**
     * The unique identifier for the organization making the request
     */
    public EstimateTaxV1TaxEstimatePostRequest withXOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    public EstimateTaxV1TaxEstimatePostRequest withTransactionEstimatePublicRequest(TransactionEstimatePublicRequest transactionEstimatePublicRequest) {
        Utils.checkNotNull(transactionEstimatePublicRequest, "transactionEstimatePublicRequest");
        this.transactionEstimatePublicRequest = transactionEstimatePublicRequest;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EstimateTaxV1TaxEstimatePostRequest other = (EstimateTaxV1TaxEstimatePostRequest) o;
        return 
            Utils.enhancedDeepEquals(this.simulateNexusMet, other.simulateNexusMet) &&
            Utils.enhancedDeepEquals(this.xOrganizationId, other.xOrganizationId) &&
            Utils.enhancedDeepEquals(this.transactionEstimatePublicRequest, other.transactionEstimatePublicRequest);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            simulateNexusMet, xOrganizationId, transactionEstimatePublicRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EstimateTaxV1TaxEstimatePostRequest.class,
                "simulateNexusMet", simulateNexusMet,
                "xOrganizationId", xOrganizationId,
                "transactionEstimatePublicRequest", transactionEstimatePublicRequest);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        @Deprecated
        private Optional<Boolean> simulateNexusMet = Optional.empty();

        private Optional<String> xOrganizationId = Optional.empty();

        private TransactionEstimatePublicRequest transactionEstimatePublicRequest;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * **Deprecated:** Use `simulate_active_registration` in the request body instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder simulateNexusMet(boolean simulateNexusMet) {
            Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
            this.simulateNexusMet = Optional.ofNullable(simulateNexusMet);
            return this;
        }

        /**
         * **Deprecated:** Use `simulate_active_registration` in the request body instead.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder simulateNexusMet(Optional<Boolean> simulateNexusMet) {
            Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
            this.simulateNexusMet = simulateNexusMet;
            return this;
        }


        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(String xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = Optional.ofNullable(xOrganizationId);
            return this;
        }

        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(Optional<String> xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = xOrganizationId;
            return this;
        }


        public Builder transactionEstimatePublicRequest(TransactionEstimatePublicRequest transactionEstimatePublicRequest) {
            Utils.checkNotNull(transactionEstimatePublicRequest, "transactionEstimatePublicRequest");
            this.transactionEstimatePublicRequest = transactionEstimatePublicRequest;
            return this;
        }

        public EstimateTaxV1TaxEstimatePostRequest build() {

            return new EstimateTaxV1TaxEstimatePostRequest(
                simulateNexusMet, xOrganizationId, transactionEstimatePublicRequest);
        }

    }
}
