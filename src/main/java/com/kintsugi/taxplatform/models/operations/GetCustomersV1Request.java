/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.models.components.CountryCodeEnum;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class GetCustomersV1Request {
    /**
     * Search term to filter customers by name or other details
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_query")
    private Optional<String> searchQuery;

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country")
    private Optional<? extends List<CountryCodeEnum>> country;

    /**
     * State or province code to filter customers
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    private Optional<String> state;

    /**
     * Filter customers by source (comma-separated)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=source__in")
    private Optional<String> sourceIn;

    /**
     * Comma-separated list of fields to sort results by.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    @JsonCreator
    public GetCustomersV1Request(
            Optional<String> searchQuery,
            Optional<? extends List<CountryCodeEnum>> country,
            Optional<String> state,
            Optional<String> sourceIn,
            Optional<String> orderBy,
            Optional<Long> page,
            Optional<Long> size) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(sourceIn, "sourceIn");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        this.searchQuery = searchQuery;
        this.country = country;
        this.state = state;
        this.sourceIn = sourceIn;
        this.orderBy = orderBy;
        this.page = page;
        this.size = size;
    }
    
    public GetCustomersV1Request() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Search term to filter customers by name or other details
     */
    @JsonIgnore
    public Optional<String> searchQuery() {
        return searchQuery;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CountryCodeEnum>> country() {
        return (Optional<List<CountryCodeEnum>>) country;
    }

    /**
     * State or province code to filter customers
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * Filter customers by source (comma-separated)
     */
    @JsonIgnore
    public Optional<String> sourceIn() {
        return sourceIn;
    }

    /**
     * Comma-separated list of fields to sort results by.
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Search term to filter customers by name or other details
     */
    public GetCustomersV1Request withSearchQuery(String searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = Optional.ofNullable(searchQuery);
        return this;
    }


    /**
     * Search term to filter customers by name or other details
     */
    public GetCustomersV1Request withSearchQuery(Optional<String> searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = searchQuery;
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
     */
    public GetCustomersV1Request withCountry(List<CountryCodeEnum> country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    /**
     * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
     */
    public GetCustomersV1Request withCountry(Optional<? extends List<CountryCodeEnum>> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * State or province code to filter customers
     */
    public GetCustomersV1Request withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }


    /**
     * State or province code to filter customers
     */
    public GetCustomersV1Request withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Filter customers by source (comma-separated)
     */
    public GetCustomersV1Request withSourceIn(String sourceIn) {
        Utils.checkNotNull(sourceIn, "sourceIn");
        this.sourceIn = Optional.ofNullable(sourceIn);
        return this;
    }


    /**
     * Filter customers by source (comma-separated)
     */
    public GetCustomersV1Request withSourceIn(Optional<String> sourceIn) {
        Utils.checkNotNull(sourceIn, "sourceIn");
        this.sourceIn = sourceIn;
        return this;
    }

    /**
     * Comma-separated list of fields to sort results by.
     */
    public GetCustomersV1Request withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }


    /**
     * Comma-separated list of fields to sort results by.
     */
    public GetCustomersV1Request withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Page number
     */
    public GetCustomersV1Request withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    /**
     * Page number
     */
    public GetCustomersV1Request withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetCustomersV1Request withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Page size
     */
    public GetCustomersV1Request withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCustomersV1Request other = (GetCustomersV1Request) o;
        return 
            Utils.enhancedDeepEquals(this.searchQuery, other.searchQuery) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.sourceIn, other.sourceIn) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            searchQuery, country, state,
            sourceIn, orderBy, page,
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCustomersV1Request.class,
                "searchQuery", searchQuery,
                "country", country,
                "state", state,
                "sourceIn", sourceIn,
                "orderBy", orderBy,
                "page", page,
                "size", size);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> searchQuery = Optional.empty();

        private Optional<? extends List<CountryCodeEnum>> country = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> sourceIn = Optional.empty();

        private Optional<String> orderBy = Optional.empty();

        private Optional<Long> page;

        private Optional<Long> size;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Search term to filter customers by name or other details
         */
        public Builder searchQuery(String searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = Optional.ofNullable(searchQuery);
            return this;
        }

        /**
         * Search term to filter customers by name or other details
         */
        public Builder searchQuery(Optional<String> searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = searchQuery;
            return this;
        }


        /**
         * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
         */
        public Builder country(List<CountryCodeEnum> country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
         */
        public Builder country(Optional<? extends List<CountryCodeEnum>> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * State or province code to filter customers
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * State or province code to filter customers
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * Filter customers by source (comma-separated)
         */
        public Builder sourceIn(String sourceIn) {
            Utils.checkNotNull(sourceIn, "sourceIn");
            this.sourceIn = Optional.ofNullable(sourceIn);
            return this;
        }

        /**
         * Filter customers by source (comma-separated)
         */
        public Builder sourceIn(Optional<String> sourceIn) {
            Utils.checkNotNull(sourceIn, "sourceIn");
            this.sourceIn = sourceIn;
            return this;
        }


        /**
         * Comma-separated list of fields to sort results by.
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Comma-separated list of fields to sort results by.
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * Page size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Page size
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public GetCustomersV1Request build() {
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetCustomersV1Request(
                searchQuery, country, state,
                sourceIn, orderBy, page,
                size);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
