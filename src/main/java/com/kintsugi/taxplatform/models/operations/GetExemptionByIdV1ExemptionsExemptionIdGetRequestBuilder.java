/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.operations.GetExemptionByIdV1ExemptionsExemptionIdGetOperation;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder {

    private GetExemptionByIdV1ExemptionsExemptionIdGetSecurity security;
    private String exemptionId;
    private Optional<String> xOrganizationId = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder security(GetExemptionByIdV1ExemptionsExemptionIdGetSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }

    public GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder exemptionId(String exemptionId) {
        Utils.checkNotNull(exemptionId, "exemptionId");
        this.exemptionId = exemptionId;
        return this;
    }
                
    public GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder xOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.of(xOrganizationId);
        return this;
    }

    public GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder xOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }


    private GetExemptionByIdV1ExemptionsExemptionIdGetRequest buildRequest() {

        GetExemptionByIdV1ExemptionsExemptionIdGetRequest request = new GetExemptionByIdV1ExemptionsExemptionIdGetRequest(exemptionId,
            xOrganizationId);

        return request;
    }

    public GetExemptionByIdV1ExemptionsExemptionIdGetResponse call() throws Exception {
        
        RequestOperation<GetExemptionByIdV1ExemptionsExemptionIdGetRequest, GetExemptionByIdV1ExemptionsExemptionIdGetResponse> operation
              = new GetExemptionByIdV1ExemptionsExemptionIdGetOperation(sdkConfiguration, security);
        GetExemptionByIdV1ExemptionsExemptionIdGetRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
