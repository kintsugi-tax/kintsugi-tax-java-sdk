/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.models.components.CountryCodeEnum;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class GetExemptionsV1ExemptionsGetRequest {
    /**
     * Search term to filter exemptions by exemption ID, customer name, or customer email
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_query")
    private Optional<String> searchQuery;

    /**
     * Filter exemptions by their status
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status__in")
    private Optional<String> statusIn;

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country_code")
    private Optional<? extends List<CountryCodeEnum>> countryCode;

    /**
     * Jurisdiction identifier
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=jurisdiction")
    private Optional<String> jurisdiction;

    /**
     * Start date for filtering exemptions
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_date")
    private Optional<String> startDate;

    /**
     * End date for filtering exemptions
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_date")
    private Optional<String> endDate;

    /**
     * Customer ID to filter exemptions
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=customer_id")
    private Optional<String> customerId;

    /**
     * Transaction ID to filter exemptions
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transaction_id")
    private Optional<String> transactionId;

    /**
     * Fields to sort by (comma-separated)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    @JsonCreator
    public GetExemptionsV1ExemptionsGetRequest(
            Optional<String> searchQuery,
            Optional<String> statusIn,
            Optional<? extends List<CountryCodeEnum>> countryCode,
            Optional<String> jurisdiction,
            Optional<String> startDate,
            Optional<String> endDate,
            Optional<String> customerId,
            Optional<String> transactionId,
            Optional<String> orderBy,
            Optional<Long> page,
            Optional<Long> size) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        Utils.checkNotNull(statusIn, "statusIn");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(transactionId, "transactionId");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        this.searchQuery = searchQuery;
        this.statusIn = statusIn;
        this.countryCode = countryCode;
        this.jurisdiction = jurisdiction;
        this.startDate = startDate;
        this.endDate = endDate;
        this.customerId = customerId;
        this.transactionId = transactionId;
        this.orderBy = orderBy;
        this.page = page;
        this.size = size;
    }
    
    public GetExemptionsV1ExemptionsGetRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Search term to filter exemptions by exemption ID, customer name, or customer email
     */
    @JsonIgnore
    public Optional<String> searchQuery() {
        return searchQuery;
    }

    /**
     * Filter exemptions by their status
     */
    @JsonIgnore
    public Optional<String> statusIn() {
        return statusIn;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CountryCodeEnum>> countryCode() {
        return (Optional<List<CountryCodeEnum>>) countryCode;
    }

    /**
     * Jurisdiction identifier
     */
    @JsonIgnore
    public Optional<String> jurisdiction() {
        return jurisdiction;
    }

    /**
     * Start date for filtering exemptions
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * End date for filtering exemptions
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * Customer ID to filter exemptions
     */
    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    /**
     * Transaction ID to filter exemptions
     */
    @JsonIgnore
    public Optional<String> transactionId() {
        return transactionId;
    }

    /**
     * Fields to sort by (comma-separated)
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Search term to filter exemptions by exemption ID, customer name, or customer email
     */
    public GetExemptionsV1ExemptionsGetRequest withSearchQuery(String searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = Optional.ofNullable(searchQuery);
        return this;
    }


    /**
     * Search term to filter exemptions by exemption ID, customer name, or customer email
     */
    public GetExemptionsV1ExemptionsGetRequest withSearchQuery(Optional<String> searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = searchQuery;
        return this;
    }

    /**
     * Filter exemptions by their status
     */
    public GetExemptionsV1ExemptionsGetRequest withStatusIn(String statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = Optional.ofNullable(statusIn);
        return this;
    }


    /**
     * Filter exemptions by their status
     */
    public GetExemptionsV1ExemptionsGetRequest withStatusIn(Optional<String> statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = statusIn;
        return this;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    public GetExemptionsV1ExemptionsGetRequest withCountryCode(List<CountryCodeEnum> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }


    /**
     * Country code in ISO 3166-1 alpha-2 format
     */
    public GetExemptionsV1ExemptionsGetRequest withCountryCode(Optional<? extends List<CountryCodeEnum>> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Jurisdiction identifier
     */
    public GetExemptionsV1ExemptionsGetRequest withJurisdiction(String jurisdiction) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        this.jurisdiction = Optional.ofNullable(jurisdiction);
        return this;
    }


    /**
     * Jurisdiction identifier
     */
    public GetExemptionsV1ExemptionsGetRequest withJurisdiction(Optional<String> jurisdiction) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        this.jurisdiction = jurisdiction;
        return this;
    }

    /**
     * Start date for filtering exemptions
     */
    public GetExemptionsV1ExemptionsGetRequest withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }


    /**
     * Start date for filtering exemptions
     */
    public GetExemptionsV1ExemptionsGetRequest withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * End date for filtering exemptions
     */
    public GetExemptionsV1ExemptionsGetRequest withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }


    /**
     * End date for filtering exemptions
     */
    public GetExemptionsV1ExemptionsGetRequest withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Customer ID to filter exemptions
     */
    public GetExemptionsV1ExemptionsGetRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }


    /**
     * Customer ID to filter exemptions
     */
    public GetExemptionsV1ExemptionsGetRequest withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * Transaction ID to filter exemptions
     */
    public GetExemptionsV1ExemptionsGetRequest withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = Optional.ofNullable(transactionId);
        return this;
    }


    /**
     * Transaction ID to filter exemptions
     */
    public GetExemptionsV1ExemptionsGetRequest withTransactionId(Optional<String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    /**
     * Fields to sort by (comma-separated)
     */
    public GetExemptionsV1ExemptionsGetRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }


    /**
     * Fields to sort by (comma-separated)
     */
    public GetExemptionsV1ExemptionsGetRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Page number
     */
    public GetExemptionsV1ExemptionsGetRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    /**
     * Page number
     */
    public GetExemptionsV1ExemptionsGetRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetExemptionsV1ExemptionsGetRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Page size
     */
    public GetExemptionsV1ExemptionsGetRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetExemptionsV1ExemptionsGetRequest other = (GetExemptionsV1ExemptionsGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.searchQuery, other.searchQuery) &&
            Utils.enhancedDeepEquals(this.statusIn, other.statusIn) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.jurisdiction, other.jurisdiction) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.transactionId, other.transactionId) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            searchQuery, statusIn, countryCode,
            jurisdiction, startDate, endDate,
            customerId, transactionId, orderBy,
            page, size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetExemptionsV1ExemptionsGetRequest.class,
                "searchQuery", searchQuery,
                "statusIn", statusIn,
                "countryCode", countryCode,
                "jurisdiction", jurisdiction,
                "startDate", startDate,
                "endDate", endDate,
                "customerId", customerId,
                "transactionId", transactionId,
                "orderBy", orderBy,
                "page", page,
                "size", size);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> searchQuery = Optional.empty();

        private Optional<String> statusIn;

        private Optional<? extends List<CountryCodeEnum>> countryCode = Optional.empty();

        private Optional<String> jurisdiction = Optional.empty();

        private Optional<String> startDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> transactionId = Optional.empty();

        private Optional<String> orderBy;

        private Optional<Long> page;

        private Optional<Long> size;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Search term to filter exemptions by exemption ID, customer name, or customer email
         */
        public Builder searchQuery(String searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = Optional.ofNullable(searchQuery);
            return this;
        }

        /**
         * Search term to filter exemptions by exemption ID, customer name, or customer email
         */
        public Builder searchQuery(Optional<String> searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = searchQuery;
            return this;
        }


        /**
         * Filter exemptions by their status
         */
        public Builder statusIn(String statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = Optional.ofNullable(statusIn);
            return this;
        }

        /**
         * Filter exemptions by their status
         */
        public Builder statusIn(Optional<String> statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = statusIn;
            return this;
        }


        /**
         * Country code in ISO 3166-1 alpha-2 format
         */
        public Builder countryCode(List<CountryCodeEnum> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        /**
         * Country code in ISO 3166-1 alpha-2 format
         */
        public Builder countryCode(Optional<? extends List<CountryCodeEnum>> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }


        /**
         * Jurisdiction identifier
         */
        public Builder jurisdiction(String jurisdiction) {
            Utils.checkNotNull(jurisdiction, "jurisdiction");
            this.jurisdiction = Optional.ofNullable(jurisdiction);
            return this;
        }

        /**
         * Jurisdiction identifier
         */
        public Builder jurisdiction(Optional<String> jurisdiction) {
            Utils.checkNotNull(jurisdiction, "jurisdiction");
            this.jurisdiction = jurisdiction;
            return this;
        }


        /**
         * Start date for filtering exemptions
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Start date for filtering exemptions
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * End date for filtering exemptions
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * End date for filtering exemptions
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * Customer ID to filter exemptions
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * Customer ID to filter exemptions
         */
        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * Transaction ID to filter exemptions
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        /**
         * Transaction ID to filter exemptions
         */
        public Builder transactionId(Optional<String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }


        /**
         * Fields to sort by (comma-separated)
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Fields to sort by (comma-separated)
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * Page size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Page size
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public GetExemptionsV1ExemptionsGetRequest build() {
            if (statusIn == null) {
                statusIn = _SINGLETON_VALUE_StatusIn.value();
            }
            if (orderBy == null) {
                orderBy = _SINGLETON_VALUE_OrderBy.value();
            }
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetExemptionsV1ExemptionsGetRequest(
                searchQuery, statusIn, countryCode,
                jurisdiction, startDate, endDate,
                customerId, transactionId, orderBy,
                page, size);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_StatusIn =
                new LazySingletonValue<>(
                        "status__in",
                        "\"ACTIVE,INACTIVE,EXPIRED\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_OrderBy =
                new LazySingletonValue<>(
                        "order_by",
                        "\"end_date,FEIN,sales_tax_id,status\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
