/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest {
    /**
     * Unique identifier for the registration
     *         associated with the filings.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=registration_id")
    private String registrationId;

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    @JsonCreator
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest(
            String registrationId,
            Optional<Long> page,
            Optional<Long> size) {
        Utils.checkNotNull(registrationId, "registrationId");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        this.registrationId = registrationId;
        this.page = page;
        this.size = size;
    }
    
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest(
            String registrationId) {
        this(registrationId, Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for the registration
     *         associated with the filings.
     */
    @JsonIgnore
    public String registrationId() {
        return registrationId;
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the registration
     *         associated with the filings.
     */
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest withRegistrationId(String registrationId) {
        Utils.checkNotNull(registrationId, "registrationId");
        this.registrationId = registrationId;
        return this;
    }

    /**
     * Page number
     */
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    /**
     * Page number
     */
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Page size
     */
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest other = (GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.registrationId, other.registrationId) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            registrationId, page, size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest.class,
                "registrationId", registrationId,
                "page", page,
                "size", size);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String registrationId;

        private Optional<Long> page;

        private Optional<Long> size;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier for the registration
         *         associated with the filings.
         */
        public Builder registrationId(String registrationId) {
            Utils.checkNotNull(registrationId, "registrationId");
            this.registrationId = registrationId;
            return this;
        }


        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * Page size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Page size
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest build() {
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest(
                registrationId, page, size);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
