/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.models.components.CountryCodeEnum;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class GetFilingsV1FilingsGetRequest {
    /**
     * Filter filings by status
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status__in")
    private Optional<String> statusIn;

    /**
     * Filter filings with a start date greater than or equal to this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_date")
    private Optional<String> startDate;

    /**
     * Filter filings with an end date less than or equal to this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_date")
    private Optional<String> endDate;

    /**
     * Filter filings filed on or after this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date_filed__gte")
    private Optional<String> dateFiledGte;

    /**
     * Filter filings filed on or before this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date_filed__lte")
    private Optional<String> dateFiledLte;

    /**
     * Comma-separated list of fields to sort the results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;

    /**
     * Filter filings by state code (e.g., CA for California).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state_code")
    private Optional<String> stateCode;

    /**
     * Filter filings by country code in ISO 3166-1 alpha-2 format (e.g., US).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country_code")
    private Optional<? extends List<CountryCodeEnum>> countryCode;

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    @JsonCreator
    public GetFilingsV1FilingsGetRequest(
            Optional<String> statusIn,
            Optional<String> startDate,
            Optional<String> endDate,
            Optional<String> dateFiledGte,
            Optional<String> dateFiledLte,
            Optional<String> orderBy,
            Optional<String> stateCode,
            Optional<? extends List<CountryCodeEnum>> countryCode,
            Optional<Long> page,
            Optional<Long> size) {
        Utils.checkNotNull(statusIn, "statusIn");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(dateFiledGte, "dateFiledGte");
        Utils.checkNotNull(dateFiledLte, "dateFiledLte");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        this.statusIn = statusIn;
        this.startDate = startDate;
        this.endDate = endDate;
        this.dateFiledGte = dateFiledGte;
        this.dateFiledLte = dateFiledLte;
        this.orderBy = orderBy;
        this.stateCode = stateCode;
        this.countryCode = countryCode;
        this.page = page;
        this.size = size;
    }
    
    public GetFilingsV1FilingsGetRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Filter filings by status
     */
    @JsonIgnore
    public Optional<String> statusIn() {
        return statusIn;
    }

    /**
     * Filter filings with a start date greater than or equal to this date.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * Filter filings with an end date less than or equal to this date.
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * Filter filings filed on or after this date.
     */
    @JsonIgnore
    public Optional<String> dateFiledGte() {
        return dateFiledGte;
    }

    /**
     * Filter filings filed on or before this date.
     */
    @JsonIgnore
    public Optional<String> dateFiledLte() {
        return dateFiledLte;
    }

    /**
     * Comma-separated list of fields to sort the results.
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    /**
     * Filter filings by state code (e.g., CA for California).
     */
    @JsonIgnore
    public Optional<String> stateCode() {
        return stateCode;
    }

    /**
     * Filter filings by country code in ISO 3166-1 alpha-2 format (e.g., US).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CountryCodeEnum>> countryCode() {
        return (Optional<List<CountryCodeEnum>>) countryCode;
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Filter filings by status
     */
    public GetFilingsV1FilingsGetRequest withStatusIn(String statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = Optional.ofNullable(statusIn);
        return this;
    }


    /**
     * Filter filings by status
     */
    public GetFilingsV1FilingsGetRequest withStatusIn(Optional<String> statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = statusIn;
        return this;
    }

    /**
     * Filter filings with a start date greater than or equal to this date.
     */
    public GetFilingsV1FilingsGetRequest withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }


    /**
     * Filter filings with a start date greater than or equal to this date.
     */
    public GetFilingsV1FilingsGetRequest withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Filter filings with an end date less than or equal to this date.
     */
    public GetFilingsV1FilingsGetRequest withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }


    /**
     * Filter filings with an end date less than or equal to this date.
     */
    public GetFilingsV1FilingsGetRequest withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Filter filings filed on or after this date.
     */
    public GetFilingsV1FilingsGetRequest withDateFiledGte(String dateFiledGte) {
        Utils.checkNotNull(dateFiledGte, "dateFiledGte");
        this.dateFiledGte = Optional.ofNullable(dateFiledGte);
        return this;
    }


    /**
     * Filter filings filed on or after this date.
     */
    public GetFilingsV1FilingsGetRequest withDateFiledGte(Optional<String> dateFiledGte) {
        Utils.checkNotNull(dateFiledGte, "dateFiledGte");
        this.dateFiledGte = dateFiledGte;
        return this;
    }

    /**
     * Filter filings filed on or before this date.
     */
    public GetFilingsV1FilingsGetRequest withDateFiledLte(String dateFiledLte) {
        Utils.checkNotNull(dateFiledLte, "dateFiledLte");
        this.dateFiledLte = Optional.ofNullable(dateFiledLte);
        return this;
    }


    /**
     * Filter filings filed on or before this date.
     */
    public GetFilingsV1FilingsGetRequest withDateFiledLte(Optional<String> dateFiledLte) {
        Utils.checkNotNull(dateFiledLte, "dateFiledLte");
        this.dateFiledLte = dateFiledLte;
        return this;
    }

    /**
     * Comma-separated list of fields to sort the results.
     */
    public GetFilingsV1FilingsGetRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }


    /**
     * Comma-separated list of fields to sort the results.
     */
    public GetFilingsV1FilingsGetRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Filter filings by state code (e.g., CA for California).
     */
    public GetFilingsV1FilingsGetRequest withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = Optional.ofNullable(stateCode);
        return this;
    }


    /**
     * Filter filings by state code (e.g., CA for California).
     */
    public GetFilingsV1FilingsGetRequest withStateCode(Optional<String> stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    /**
     * Filter filings by country code in ISO 3166-1 alpha-2 format (e.g., US).
     */
    public GetFilingsV1FilingsGetRequest withCountryCode(List<CountryCodeEnum> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }


    /**
     * Filter filings by country code in ISO 3166-1 alpha-2 format (e.g., US).
     */
    public GetFilingsV1FilingsGetRequest withCountryCode(Optional<? extends List<CountryCodeEnum>> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Page number
     */
    public GetFilingsV1FilingsGetRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    /**
     * Page number
     */
    public GetFilingsV1FilingsGetRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetFilingsV1FilingsGetRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Page size
     */
    public GetFilingsV1FilingsGetRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFilingsV1FilingsGetRequest other = (GetFilingsV1FilingsGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.statusIn, other.statusIn) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.dateFiledGte, other.dateFiledGte) &&
            Utils.enhancedDeepEquals(this.dateFiledLte, other.dateFiledLte) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            statusIn, startDate, endDate,
            dateFiledGte, dateFiledLte, orderBy,
            stateCode, countryCode, page,
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetFilingsV1FilingsGetRequest.class,
                "statusIn", statusIn,
                "startDate", startDate,
                "endDate", endDate,
                "dateFiledGte", dateFiledGte,
                "dateFiledLte", dateFiledLte,
                "orderBy", orderBy,
                "stateCode", stateCode,
                "countryCode", countryCode,
                "page", page,
                "size", size);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> statusIn;

        private Optional<String> startDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<String> dateFiledGte = Optional.empty();

        private Optional<String> dateFiledLte = Optional.empty();

        private Optional<String> orderBy = Optional.empty();

        private Optional<String> stateCode = Optional.empty();

        private Optional<? extends List<CountryCodeEnum>> countryCode = Optional.empty();

        private Optional<Long> page;

        private Optional<Long> size;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Filter filings by status
         */
        public Builder statusIn(String statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = Optional.ofNullable(statusIn);
            return this;
        }

        /**
         * Filter filings by status
         */
        public Builder statusIn(Optional<String> statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = statusIn;
            return this;
        }


        /**
         * Filter filings with a start date greater than or equal to this date.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Filter filings with a start date greater than or equal to this date.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * Filter filings with an end date less than or equal to this date.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Filter filings with an end date less than or equal to this date.
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * Filter filings filed on or after this date.
         */
        public Builder dateFiledGte(String dateFiledGte) {
            Utils.checkNotNull(dateFiledGte, "dateFiledGte");
            this.dateFiledGte = Optional.ofNullable(dateFiledGte);
            return this;
        }

        /**
         * Filter filings filed on or after this date.
         */
        public Builder dateFiledGte(Optional<String> dateFiledGte) {
            Utils.checkNotNull(dateFiledGte, "dateFiledGte");
            this.dateFiledGte = dateFiledGte;
            return this;
        }


        /**
         * Filter filings filed on or before this date.
         */
        public Builder dateFiledLte(String dateFiledLte) {
            Utils.checkNotNull(dateFiledLte, "dateFiledLte");
            this.dateFiledLte = Optional.ofNullable(dateFiledLte);
            return this;
        }

        /**
         * Filter filings filed on or before this date.
         */
        public Builder dateFiledLte(Optional<String> dateFiledLte) {
            Utils.checkNotNull(dateFiledLte, "dateFiledLte");
            this.dateFiledLte = dateFiledLte;
            return this;
        }


        /**
         * Comma-separated list of fields to sort the results.
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Comma-separated list of fields to sort the results.
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * Filter filings by state code (e.g., CA for California).
         */
        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = Optional.ofNullable(stateCode);
            return this;
        }

        /**
         * Filter filings by state code (e.g., CA for California).
         */
        public Builder stateCode(Optional<String> stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        /**
         * Filter filings by country code in ISO 3166-1 alpha-2 format (e.g., US).
         */
        public Builder countryCode(List<CountryCodeEnum> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        /**
         * Filter filings by country code in ISO 3166-1 alpha-2 format (e.g., US).
         */
        public Builder countryCode(Optional<? extends List<CountryCodeEnum>> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }


        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * Page size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Page size
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public GetFilingsV1FilingsGetRequest build() {
            if (statusIn == null) {
                statusIn = _SINGLETON_VALUE_StatusIn.value();
            }
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetFilingsV1FilingsGetRequest(
                statusIn, startDate, endDate,
                dateFiledGte, dateFiledLte, orderBy,
                stateCode, countryCode, page,
                size);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_StatusIn =
                new LazySingletonValue<>(
                        "status__in",
                        "\"FILED,FILING,UNFILED,PAUSED\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
