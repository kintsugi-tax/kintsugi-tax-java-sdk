/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class GetNexusForOrgV1NexusGetRequest {
    /**
     * Return all results without pagination
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=without_pagination")
    private Optional<Boolean> withoutPagination;

    /**
     * Filter nexuses by disregard view: 'exposed' or 'disregarded'
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=disregard_view")
    private Optional<String> disregardView;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status__in")
    private Optional<String> statusIn;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state_code")
    private Optional<String> stateCode;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country_code__in")
    private Optional<String> countryCodeIn;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=collected_tax_nexus_met")
    private Optional<Boolean> collectedTaxNexusMet;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    @JsonCreator
    public GetNexusForOrgV1NexusGetRequest(
            Optional<Boolean> withoutPagination,
            Optional<String> disregardView,
            Optional<String> statusIn,
            Optional<String> stateCode,
            Optional<String> countryCodeIn,
            Optional<String> orderBy,
            Optional<Boolean> collectedTaxNexusMet,
            Optional<Long> page,
            Optional<Long> size) {
        Utils.checkNotNull(withoutPagination, "withoutPagination");
        Utils.checkNotNull(disregardView, "disregardView");
        Utils.checkNotNull(statusIn, "statusIn");
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(countryCodeIn, "countryCodeIn");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        this.withoutPagination = withoutPagination;
        this.disregardView = disregardView;
        this.statusIn = statusIn;
        this.stateCode = stateCode;
        this.countryCodeIn = countryCodeIn;
        this.orderBy = orderBy;
        this.collectedTaxNexusMet = collectedTaxNexusMet;
        this.page = page;
        this.size = size;
    }
    
    public GetNexusForOrgV1NexusGetRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Return all results without pagination
     */
    @JsonIgnore
    public Optional<Boolean> withoutPagination() {
        return withoutPagination;
    }

    /**
     * Filter nexuses by disregard view: 'exposed' or 'disregarded'
     */
    @JsonIgnore
    public Optional<String> disregardView() {
        return disregardView;
    }

    @JsonIgnore
    public Optional<String> statusIn() {
        return statusIn;
    }

    @JsonIgnore
    public Optional<String> stateCode() {
        return stateCode;
    }

    @JsonIgnore
    public Optional<String> countryCodeIn() {
        return countryCodeIn;
    }

    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    @JsonIgnore
    public Optional<Boolean> collectedTaxNexusMet() {
        return collectedTaxNexusMet;
    }

    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Return all results without pagination
     */
    public GetNexusForOrgV1NexusGetRequest withWithoutPagination(boolean withoutPagination) {
        Utils.checkNotNull(withoutPagination, "withoutPagination");
        this.withoutPagination = Optional.ofNullable(withoutPagination);
        return this;
    }


    /**
     * Return all results without pagination
     */
    public GetNexusForOrgV1NexusGetRequest withWithoutPagination(Optional<Boolean> withoutPagination) {
        Utils.checkNotNull(withoutPagination, "withoutPagination");
        this.withoutPagination = withoutPagination;
        return this;
    }

    /**
     * Filter nexuses by disregard view: 'exposed' or 'disregarded'
     */
    public GetNexusForOrgV1NexusGetRequest withDisregardView(String disregardView) {
        Utils.checkNotNull(disregardView, "disregardView");
        this.disregardView = Optional.ofNullable(disregardView);
        return this;
    }


    /**
     * Filter nexuses by disregard view: 'exposed' or 'disregarded'
     */
    public GetNexusForOrgV1NexusGetRequest withDisregardView(Optional<String> disregardView) {
        Utils.checkNotNull(disregardView, "disregardView");
        this.disregardView = disregardView;
        return this;
    }

    public GetNexusForOrgV1NexusGetRequest withStatusIn(String statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = Optional.ofNullable(statusIn);
        return this;
    }


    public GetNexusForOrgV1NexusGetRequest withStatusIn(Optional<String> statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = statusIn;
        return this;
    }

    public GetNexusForOrgV1NexusGetRequest withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = Optional.ofNullable(stateCode);
        return this;
    }


    public GetNexusForOrgV1NexusGetRequest withStateCode(Optional<String> stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    public GetNexusForOrgV1NexusGetRequest withCountryCodeIn(String countryCodeIn) {
        Utils.checkNotNull(countryCodeIn, "countryCodeIn");
        this.countryCodeIn = Optional.ofNullable(countryCodeIn);
        return this;
    }


    public GetNexusForOrgV1NexusGetRequest withCountryCodeIn(Optional<String> countryCodeIn) {
        Utils.checkNotNull(countryCodeIn, "countryCodeIn");
        this.countryCodeIn = countryCodeIn;
        return this;
    }

    public GetNexusForOrgV1NexusGetRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }


    public GetNexusForOrgV1NexusGetRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    public GetNexusForOrgV1NexusGetRequest withCollectedTaxNexusMet(boolean collectedTaxNexusMet) {
        Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
        this.collectedTaxNexusMet = Optional.ofNullable(collectedTaxNexusMet);
        return this;
    }


    public GetNexusForOrgV1NexusGetRequest withCollectedTaxNexusMet(Optional<Boolean> collectedTaxNexusMet) {
        Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
        this.collectedTaxNexusMet = collectedTaxNexusMet;
        return this;
    }

    public GetNexusForOrgV1NexusGetRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    public GetNexusForOrgV1NexusGetRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    public GetNexusForOrgV1NexusGetRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    public GetNexusForOrgV1NexusGetRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetNexusForOrgV1NexusGetRequest other = (GetNexusForOrgV1NexusGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.withoutPagination, other.withoutPagination) &&
            Utils.enhancedDeepEquals(this.disregardView, other.disregardView) &&
            Utils.enhancedDeepEquals(this.statusIn, other.statusIn) &&
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.countryCodeIn, other.countryCodeIn) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.collectedTaxNexusMet, other.collectedTaxNexusMet) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            withoutPagination, disregardView, statusIn,
            stateCode, countryCodeIn, orderBy,
            collectedTaxNexusMet, page, size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetNexusForOrgV1NexusGetRequest.class,
                "withoutPagination", withoutPagination,
                "disregardView", disregardView,
                "statusIn", statusIn,
                "stateCode", stateCode,
                "countryCodeIn", countryCodeIn,
                "orderBy", orderBy,
                "collectedTaxNexusMet", collectedTaxNexusMet,
                "page", page,
                "size", size);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> withoutPagination;

        private Optional<String> disregardView = Optional.empty();

        private Optional<String> statusIn;

        private Optional<String> stateCode = Optional.empty();

        private Optional<String> countryCodeIn = Optional.empty();

        private Optional<String> orderBy;

        private Optional<Boolean> collectedTaxNexusMet = Optional.empty();

        private Optional<Long> page;

        private Optional<Long> size;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Return all results without pagination
         */
        public Builder withoutPagination(boolean withoutPagination) {
            Utils.checkNotNull(withoutPagination, "withoutPagination");
            this.withoutPagination = Optional.ofNullable(withoutPagination);
            return this;
        }

        /**
         * Return all results without pagination
         */
        public Builder withoutPagination(Optional<Boolean> withoutPagination) {
            Utils.checkNotNull(withoutPagination, "withoutPagination");
            this.withoutPagination = withoutPagination;
            return this;
        }


        /**
         * Filter nexuses by disregard view: 'exposed' or 'disregarded'
         */
        public Builder disregardView(String disregardView) {
            Utils.checkNotNull(disregardView, "disregardView");
            this.disregardView = Optional.ofNullable(disregardView);
            return this;
        }

        /**
         * Filter nexuses by disregard view: 'exposed' or 'disregarded'
         */
        public Builder disregardView(Optional<String> disregardView) {
            Utils.checkNotNull(disregardView, "disregardView");
            this.disregardView = disregardView;
            return this;
        }


        public Builder statusIn(String statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = Optional.ofNullable(statusIn);
            return this;
        }

        public Builder statusIn(Optional<String> statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = statusIn;
            return this;
        }


        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = Optional.ofNullable(stateCode);
            return this;
        }

        public Builder stateCode(Optional<String> stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        public Builder countryCodeIn(String countryCodeIn) {
            Utils.checkNotNull(countryCodeIn, "countryCodeIn");
            this.countryCodeIn = Optional.ofNullable(countryCodeIn);
            return this;
        }

        public Builder countryCodeIn(Optional<String> countryCodeIn) {
            Utils.checkNotNull(countryCodeIn, "countryCodeIn");
            this.countryCodeIn = countryCodeIn;
            return this;
        }


        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        public Builder collectedTaxNexusMet(boolean collectedTaxNexusMet) {
            Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
            this.collectedTaxNexusMet = Optional.ofNullable(collectedTaxNexusMet);
            return this;
        }

        public Builder collectedTaxNexusMet(Optional<Boolean> collectedTaxNexusMet) {
            Utils.checkNotNull(collectedTaxNexusMet, "collectedTaxNexusMet");
            this.collectedTaxNexusMet = collectedTaxNexusMet;
            return this;
        }


        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public GetNexusForOrgV1NexusGetRequest build() {
            if (withoutPagination == null) {
                withoutPagination = _SINGLETON_VALUE_WithoutPagination.value();
            }
            if (statusIn == null) {
                statusIn = _SINGLETON_VALUE_StatusIn.value();
            }
            if (orderBy == null) {
                orderBy = _SINGLETON_VALUE_OrderBy.value();
            }
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetNexusForOrgV1NexusGetRequest(
                withoutPagination, disregardView, statusIn,
                stateCode, countryCodeIn, orderBy,
                collectedTaxNexusMet, page, size);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_WithoutPagination =
                new LazySingletonValue<>(
                        "without_pagination",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_StatusIn =
                new LazySingletonValue<>(
                        "status__in",
                        "\"APPROACHING,NOT_EXPOSED,PENDING_REGISTRATION,EXPOSED,APPROACHING,REGISTERED\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_OrderBy =
                new LazySingletonValue<>(
                        "order_by",
                        "\"state_code,country_code\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
