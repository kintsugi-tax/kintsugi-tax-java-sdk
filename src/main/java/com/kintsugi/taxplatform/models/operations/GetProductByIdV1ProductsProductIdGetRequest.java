/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class GetProductByIdV1ProductsProductIdGetRequest {
    /**
     * The unique identifier for the product you want to retrieve.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=product_id")
    private String productId;

    /**
     * The unique identifier for the organization making the request
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-organization-id")
    private Optional<String> xOrganizationId;

    @JsonCreator
    public GetProductByIdV1ProductsProductIdGetRequest(
            String productId,
            Optional<String> xOrganizationId) {
        Utils.checkNotNull(productId, "productId");
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.productId = productId;
        this.xOrganizationId = xOrganizationId;
    }
    
    public GetProductByIdV1ProductsProductIdGetRequest(
            String productId) {
        this(productId, Optional.empty());
    }

    /**
     * The unique identifier for the product you want to retrieve.
     */
    @JsonIgnore
    public String productId() {
        return productId;
    }

    /**
     * The unique identifier for the organization making the request
     */
    @JsonIgnore
    public Optional<String> xOrganizationId() {
        return xOrganizationId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier for the product you want to retrieve.
     */
    public GetProductByIdV1ProductsProductIdGetRequest withProductId(String productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = productId;
        return this;
    }

    /**
     * The unique identifier for the organization making the request
     */
    public GetProductByIdV1ProductsProductIdGetRequest withXOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.ofNullable(xOrganizationId);
        return this;
    }


    /**
     * The unique identifier for the organization making the request
     */
    public GetProductByIdV1ProductsProductIdGetRequest withXOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetProductByIdV1ProductsProductIdGetRequest other = (GetProductByIdV1ProductsProductIdGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.xOrganizationId, other.xOrganizationId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            productId, xOrganizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetProductByIdV1ProductsProductIdGetRequest.class,
                "productId", productId,
                "xOrganizationId", xOrganizationId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String productId;

        private Optional<String> xOrganizationId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier for the product you want to retrieve.
         */
        public Builder productId(String productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = productId;
            return this;
        }


        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(String xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = Optional.ofNullable(xOrganizationId);
            return this;
        }

        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(Optional<String> xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = xOrganizationId;
            return this;
        }

        public GetProductByIdV1ProductsProductIdGetRequest build() {

            return new GetProductByIdV1ProductsProductIdGetRequest(
                productId, xOrganizationId);
        }

    }
}
