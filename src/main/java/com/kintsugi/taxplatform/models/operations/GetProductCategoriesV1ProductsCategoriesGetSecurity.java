/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.kintsugi.taxplatform.utils.HasSecurity;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class GetProductCategoriesV1ProductsCategoriesGetSecurity implements HasSecurity {

    @SpeakeasyMetadata("security:scheme=true,type=apiKey,subtype=header,name=X-API-KEY")
    private Optional<String> apiKeyHeader;


    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=bearer,name=Authorization")
    private Optional<String> httpBearer;

    @JsonCreator
    public GetProductCategoriesV1ProductsCategoriesGetSecurity(
            Optional<String> apiKeyHeader,
            Optional<String> httpBearer) {
        Utils.checkNotNull(apiKeyHeader, "apiKeyHeader");
        Utils.checkNotNull(httpBearer, "httpBearer");
        this.apiKeyHeader = apiKeyHeader;
        this.httpBearer = httpBearer;
    }
    
    public GetProductCategoriesV1ProductsCategoriesGetSecurity() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> apiKeyHeader() {
        return apiKeyHeader;
    }

    @JsonIgnore
    public Optional<String> httpBearer() {
        return httpBearer;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetProductCategoriesV1ProductsCategoriesGetSecurity withAPIKeyHeader(String apiKeyHeader) {
        Utils.checkNotNull(apiKeyHeader, "apiKeyHeader");
        this.apiKeyHeader = Optional.ofNullable(apiKeyHeader);
        return this;
    }


    public GetProductCategoriesV1ProductsCategoriesGetSecurity withAPIKeyHeader(Optional<String> apiKeyHeader) {
        Utils.checkNotNull(apiKeyHeader, "apiKeyHeader");
        this.apiKeyHeader = apiKeyHeader;
        return this;
    }

    public GetProductCategoriesV1ProductsCategoriesGetSecurity withHTTPBearer(String httpBearer) {
        Utils.checkNotNull(httpBearer, "httpBearer");
        this.httpBearer = Optional.ofNullable(httpBearer);
        return this;
    }


    public GetProductCategoriesV1ProductsCategoriesGetSecurity withHTTPBearer(Optional<String> httpBearer) {
        Utils.checkNotNull(httpBearer, "httpBearer");
        this.httpBearer = httpBearer;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetProductCategoriesV1ProductsCategoriesGetSecurity other = (GetProductCategoriesV1ProductsCategoriesGetSecurity) o;
        return 
            Utils.enhancedDeepEquals(this.apiKeyHeader, other.apiKeyHeader) &&
            Utils.enhancedDeepEquals(this.httpBearer, other.httpBearer);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            apiKeyHeader, httpBearer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetProductCategoriesV1ProductsCategoriesGetSecurity.class,
                "apiKeyHeader", apiKeyHeader,
                "httpBearer", httpBearer);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> apiKeyHeader = Optional.empty();

        private Optional<String> httpBearer = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder apiKeyHeader(String apiKeyHeader) {
            Utils.checkNotNull(apiKeyHeader, "apiKeyHeader");
            this.apiKeyHeader = Optional.ofNullable(apiKeyHeader);
            return this;
        }

        public Builder apiKeyHeader(Optional<String> apiKeyHeader) {
            Utils.checkNotNull(apiKeyHeader, "apiKeyHeader");
            this.apiKeyHeader = apiKeyHeader;
            return this;
        }


        public Builder httpBearer(String httpBearer) {
            Utils.checkNotNull(httpBearer, "httpBearer");
            this.httpBearer = Optional.ofNullable(httpBearer);
            return this;
        }

        public Builder httpBearer(Optional<String> httpBearer) {
            Utils.checkNotNull(httpBearer, "httpBearer");
            this.httpBearer = httpBearer;
            return this;
        }

        public GetProductCategoriesV1ProductsCategoriesGetSecurity build() {

            return new GetProductCategoriesV1ProductsCategoriesGetSecurity(
                apiKeyHeader, httpBearer);
        }

    }
}
