/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetProductsV1ProductsGetRequest {
    /**
     * Search term to filter products by name or other details.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private JsonNullable<String> query;

    /**
     * Filter products by status (comma-separated)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status__in")
    private JsonNullable<String> statusIn;

    /**
     * Filter products by category (comma-separated)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=product_category__in")
    private JsonNullable<String> productCategoryIn;

    /**
     * Filter products by subcategory (comma-separated)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=product_subcategory__in")
    private JsonNullable<String> productSubcategoryIn;

    /**
     * Filter products by source (comma-separated)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=source__in")
    private JsonNullable<String> sourceIn;

    /**
     * Order results by specified fields (comma-separated)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private JsonNullable<String> orderBy;

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    /**
     * The unique identifier for the organization making the request
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-organization-id")
    private Optional<String> xOrganizationId;

    @JsonCreator
    public GetProductsV1ProductsGetRequest(
            JsonNullable<String> query,
            JsonNullable<String> statusIn,
            JsonNullable<String> productCategoryIn,
            JsonNullable<String> productSubcategoryIn,
            JsonNullable<String> sourceIn,
            JsonNullable<String> orderBy,
            Optional<Long> page,
            Optional<Long> size,
            Optional<String> xOrganizationId) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(statusIn, "statusIn");
        Utils.checkNotNull(productCategoryIn, "productCategoryIn");
        Utils.checkNotNull(productSubcategoryIn, "productSubcategoryIn");
        Utils.checkNotNull(sourceIn, "sourceIn");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.query = query;
        this.statusIn = statusIn;
        this.productCategoryIn = productCategoryIn;
        this.productSubcategoryIn = productSubcategoryIn;
        this.sourceIn = sourceIn;
        this.orderBy = orderBy;
        this.page = page;
        this.size = size;
        this.xOrganizationId = xOrganizationId;
    }
    
    public GetProductsV1ProductsGetRequest() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Search term to filter products by name or other details.
     */
    @JsonIgnore
    public JsonNullable<String> query() {
        return query;
    }

    /**
     * Filter products by status (comma-separated)
     */
    @JsonIgnore
    public JsonNullable<String> statusIn() {
        return statusIn;
    }

    /**
     * Filter products by category (comma-separated)
     */
    @JsonIgnore
    public JsonNullable<String> productCategoryIn() {
        return productCategoryIn;
    }

    /**
     * Filter products by subcategory (comma-separated)
     */
    @JsonIgnore
    public JsonNullable<String> productSubcategoryIn() {
        return productSubcategoryIn;
    }

    /**
     * Filter products by source (comma-separated)
     */
    @JsonIgnore
    public JsonNullable<String> sourceIn() {
        return sourceIn;
    }

    /**
     * Order results by specified fields (comma-separated)
     */
    @JsonIgnore
    public JsonNullable<String> orderBy() {
        return orderBy;
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    /**
     * The unique identifier for the organization making the request
     */
    @JsonIgnore
    public Optional<String> xOrganizationId() {
        return xOrganizationId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Search term to filter products by name or other details.
     */
    public GetProductsV1ProductsGetRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = JsonNullable.of(query);
        return this;
    }

    /**
     * Search term to filter products by name or other details.
     */
    public GetProductsV1ProductsGetRequest withQuery(JsonNullable<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Filter products by status (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withStatusIn(String statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = JsonNullable.of(statusIn);
        return this;
    }

    /**
     * Filter products by status (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withStatusIn(JsonNullable<String> statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = statusIn;
        return this;
    }

    /**
     * Filter products by category (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withProductCategoryIn(String productCategoryIn) {
        Utils.checkNotNull(productCategoryIn, "productCategoryIn");
        this.productCategoryIn = JsonNullable.of(productCategoryIn);
        return this;
    }

    /**
     * Filter products by category (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withProductCategoryIn(JsonNullable<String> productCategoryIn) {
        Utils.checkNotNull(productCategoryIn, "productCategoryIn");
        this.productCategoryIn = productCategoryIn;
        return this;
    }

    /**
     * Filter products by subcategory (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withProductSubcategoryIn(String productSubcategoryIn) {
        Utils.checkNotNull(productSubcategoryIn, "productSubcategoryIn");
        this.productSubcategoryIn = JsonNullable.of(productSubcategoryIn);
        return this;
    }

    /**
     * Filter products by subcategory (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withProductSubcategoryIn(JsonNullable<String> productSubcategoryIn) {
        Utils.checkNotNull(productSubcategoryIn, "productSubcategoryIn");
        this.productSubcategoryIn = productSubcategoryIn;
        return this;
    }

    /**
     * Filter products by source (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withSourceIn(String sourceIn) {
        Utils.checkNotNull(sourceIn, "sourceIn");
        this.sourceIn = JsonNullable.of(sourceIn);
        return this;
    }

    /**
     * Filter products by source (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withSourceIn(JsonNullable<String> sourceIn) {
        Utils.checkNotNull(sourceIn, "sourceIn");
        this.sourceIn = sourceIn;
        return this;
    }

    /**
     * Order results by specified fields (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = JsonNullable.of(orderBy);
        return this;
    }

    /**
     * Order results by specified fields (comma-separated)
     */
    public GetProductsV1ProductsGetRequest withOrderBy(JsonNullable<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Page number
     */
    public GetProductsV1ProductsGetRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    /**
     * Page number
     */
    public GetProductsV1ProductsGetRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetProductsV1ProductsGetRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Page size
     */
    public GetProductsV1ProductsGetRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * The unique identifier for the organization making the request
     */
    public GetProductsV1ProductsGetRequest withXOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.ofNullable(xOrganizationId);
        return this;
    }


    /**
     * The unique identifier for the organization making the request
     */
    public GetProductsV1ProductsGetRequest withXOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetProductsV1ProductsGetRequest other = (GetProductsV1ProductsGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.statusIn, other.statusIn) &&
            Utils.enhancedDeepEquals(this.productCategoryIn, other.productCategoryIn) &&
            Utils.enhancedDeepEquals(this.productSubcategoryIn, other.productSubcategoryIn) &&
            Utils.enhancedDeepEquals(this.sourceIn, other.sourceIn) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.xOrganizationId, other.xOrganizationId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            query, statusIn, productCategoryIn,
            productSubcategoryIn, sourceIn, orderBy,
            page, size, xOrganizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetProductsV1ProductsGetRequest.class,
                "query", query,
                "statusIn", statusIn,
                "productCategoryIn", productCategoryIn,
                "productSubcategoryIn", productSubcategoryIn,
                "sourceIn", sourceIn,
                "orderBy", orderBy,
                "page", page,
                "size", size,
                "xOrganizationId", xOrganizationId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> query = JsonNullable.undefined();

        private JsonNullable<String> statusIn = JsonNullable.undefined();

        private JsonNullable<String> productCategoryIn = JsonNullable.undefined();

        private JsonNullable<String> productSubcategoryIn = JsonNullable.undefined();

        private JsonNullable<String> sourceIn = JsonNullable.undefined();

        private JsonNullable<String> orderBy = JsonNullable.undefined();

        private Optional<Long> page;

        private Optional<Long> size;

        private Optional<String> xOrganizationId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Search term to filter products by name or other details.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = JsonNullable.of(query);
            return this;
        }

        /**
         * Search term to filter products by name or other details.
         */
        public Builder query(JsonNullable<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * Filter products by status (comma-separated)
         */
        public Builder statusIn(String statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = JsonNullable.of(statusIn);
            return this;
        }

        /**
         * Filter products by status (comma-separated)
         */
        public Builder statusIn(JsonNullable<String> statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = statusIn;
            return this;
        }


        /**
         * Filter products by category (comma-separated)
         */
        public Builder productCategoryIn(String productCategoryIn) {
            Utils.checkNotNull(productCategoryIn, "productCategoryIn");
            this.productCategoryIn = JsonNullable.of(productCategoryIn);
            return this;
        }

        /**
         * Filter products by category (comma-separated)
         */
        public Builder productCategoryIn(JsonNullable<String> productCategoryIn) {
            Utils.checkNotNull(productCategoryIn, "productCategoryIn");
            this.productCategoryIn = productCategoryIn;
            return this;
        }


        /**
         * Filter products by subcategory (comma-separated)
         */
        public Builder productSubcategoryIn(String productSubcategoryIn) {
            Utils.checkNotNull(productSubcategoryIn, "productSubcategoryIn");
            this.productSubcategoryIn = JsonNullable.of(productSubcategoryIn);
            return this;
        }

        /**
         * Filter products by subcategory (comma-separated)
         */
        public Builder productSubcategoryIn(JsonNullable<String> productSubcategoryIn) {
            Utils.checkNotNull(productSubcategoryIn, "productSubcategoryIn");
            this.productSubcategoryIn = productSubcategoryIn;
            return this;
        }


        /**
         * Filter products by source (comma-separated)
         */
        public Builder sourceIn(String sourceIn) {
            Utils.checkNotNull(sourceIn, "sourceIn");
            this.sourceIn = JsonNullable.of(sourceIn);
            return this;
        }

        /**
         * Filter products by source (comma-separated)
         */
        public Builder sourceIn(JsonNullable<String> sourceIn) {
            Utils.checkNotNull(sourceIn, "sourceIn");
            this.sourceIn = sourceIn;
            return this;
        }


        /**
         * Order results by specified fields (comma-separated)
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = JsonNullable.of(orderBy);
            return this;
        }

        /**
         * Order results by specified fields (comma-separated)
         */
        public Builder orderBy(JsonNullable<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * Page size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Page size
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }


        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(String xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = Optional.ofNullable(xOrganizationId);
            return this;
        }

        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(Optional<String> xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = xOrganizationId;
            return this;
        }

        public GetProductsV1ProductsGetRequest build() {
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetProductsV1ProductsGetRequest(
                query, statusIn, productCategoryIn,
                productSubcategoryIn, sourceIn, orderBy,
                page, size, xOrganizationId);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
