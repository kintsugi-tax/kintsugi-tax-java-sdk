/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.models.components.CountryCodeEnum;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class GetRegistrationsV1RegistrationsGetRequest {
    /**
     * Filter registrations by status. Multiple statuses can be passed,
     *         separated by commas.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status__in")
    private Optional<String> statusIn;

    /**
     * Filter registrations by state code.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state_code")
    private Optional<String> stateCode;

    /**
     * Filter registrations by filing frequency. Multiple filing frequencies
     *         can be passed, separated by commas.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filing_frequency__in")
    private Optional<String> filingFrequencyIn;

    /**
     * Filter registrations by country code in ISO 3166-1 alpha-2 format
     *         (e.g., US, CA).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country_code__in")
    private Optional<? extends List<CountryCodeEnum>> countryCodeIn;

    /**
     * Order results by specified fields (comma-separated)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    @JsonCreator
    public GetRegistrationsV1RegistrationsGetRequest(
            Optional<String> statusIn,
            Optional<String> stateCode,
            Optional<String> filingFrequencyIn,
            Optional<? extends List<CountryCodeEnum>> countryCodeIn,
            Optional<String> orderBy,
            Optional<Long> page,
            Optional<Long> size) {
        Utils.checkNotNull(statusIn, "statusIn");
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(filingFrequencyIn, "filingFrequencyIn");
        Utils.checkNotNull(countryCodeIn, "countryCodeIn");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        this.statusIn = statusIn;
        this.stateCode = stateCode;
        this.filingFrequencyIn = filingFrequencyIn;
        this.countryCodeIn = countryCodeIn;
        this.orderBy = orderBy;
        this.page = page;
        this.size = size;
    }
    
    public GetRegistrationsV1RegistrationsGetRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Filter registrations by status. Multiple statuses can be passed,
     *         separated by commas.
     */
    @JsonIgnore
    public Optional<String> statusIn() {
        return statusIn;
    }

    /**
     * Filter registrations by state code.
     */
    @JsonIgnore
    public Optional<String> stateCode() {
        return stateCode;
    }

    /**
     * Filter registrations by filing frequency. Multiple filing frequencies
     *         can be passed, separated by commas.
     */
    @JsonIgnore
    public Optional<String> filingFrequencyIn() {
        return filingFrequencyIn;
    }

    /**
     * Filter registrations by country code in ISO 3166-1 alpha-2 format
     *         (e.g., US, CA).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CountryCodeEnum>> countryCodeIn() {
        return (Optional<List<CountryCodeEnum>>) countryCodeIn;
    }

    /**
     * Order results by specified fields (comma-separated)
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Filter registrations by status. Multiple statuses can be passed,
     *         separated by commas.
     */
    public GetRegistrationsV1RegistrationsGetRequest withStatusIn(String statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = Optional.ofNullable(statusIn);
        return this;
    }


    /**
     * Filter registrations by status. Multiple statuses can be passed,
     *         separated by commas.
     */
    public GetRegistrationsV1RegistrationsGetRequest withStatusIn(Optional<String> statusIn) {
        Utils.checkNotNull(statusIn, "statusIn");
        this.statusIn = statusIn;
        return this;
    }

    /**
     * Filter registrations by state code.
     */
    public GetRegistrationsV1RegistrationsGetRequest withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = Optional.ofNullable(stateCode);
        return this;
    }


    /**
     * Filter registrations by state code.
     */
    public GetRegistrationsV1RegistrationsGetRequest withStateCode(Optional<String> stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    /**
     * Filter registrations by filing frequency. Multiple filing frequencies
     *         can be passed, separated by commas.
     */
    public GetRegistrationsV1RegistrationsGetRequest withFilingFrequencyIn(String filingFrequencyIn) {
        Utils.checkNotNull(filingFrequencyIn, "filingFrequencyIn");
        this.filingFrequencyIn = Optional.ofNullable(filingFrequencyIn);
        return this;
    }


    /**
     * Filter registrations by filing frequency. Multiple filing frequencies
     *         can be passed, separated by commas.
     */
    public GetRegistrationsV1RegistrationsGetRequest withFilingFrequencyIn(Optional<String> filingFrequencyIn) {
        Utils.checkNotNull(filingFrequencyIn, "filingFrequencyIn");
        this.filingFrequencyIn = filingFrequencyIn;
        return this;
    }

    /**
     * Filter registrations by country code in ISO 3166-1 alpha-2 format
     *         (e.g., US, CA).
     */
    public GetRegistrationsV1RegistrationsGetRequest withCountryCodeIn(List<CountryCodeEnum> countryCodeIn) {
        Utils.checkNotNull(countryCodeIn, "countryCodeIn");
        this.countryCodeIn = Optional.ofNullable(countryCodeIn);
        return this;
    }


    /**
     * Filter registrations by country code in ISO 3166-1 alpha-2 format
     *         (e.g., US, CA).
     */
    public GetRegistrationsV1RegistrationsGetRequest withCountryCodeIn(Optional<? extends List<CountryCodeEnum>> countryCodeIn) {
        Utils.checkNotNull(countryCodeIn, "countryCodeIn");
        this.countryCodeIn = countryCodeIn;
        return this;
    }

    /**
     * Order results by specified fields (comma-separated)
     */
    public GetRegistrationsV1RegistrationsGetRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }


    /**
     * Order results by specified fields (comma-separated)
     */
    public GetRegistrationsV1RegistrationsGetRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Page number
     */
    public GetRegistrationsV1RegistrationsGetRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    /**
     * Page number
     */
    public GetRegistrationsV1RegistrationsGetRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetRegistrationsV1RegistrationsGetRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Page size
     */
    public GetRegistrationsV1RegistrationsGetRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRegistrationsV1RegistrationsGetRequest other = (GetRegistrationsV1RegistrationsGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.statusIn, other.statusIn) &&
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.filingFrequencyIn, other.filingFrequencyIn) &&
            Utils.enhancedDeepEquals(this.countryCodeIn, other.countryCodeIn) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            statusIn, stateCode, filingFrequencyIn,
            countryCodeIn, orderBy, page,
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRegistrationsV1RegistrationsGetRequest.class,
                "statusIn", statusIn,
                "stateCode", stateCode,
                "filingFrequencyIn", filingFrequencyIn,
                "countryCodeIn", countryCodeIn,
                "orderBy", orderBy,
                "page", page,
                "size", size);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> statusIn;

        private Optional<String> stateCode = Optional.empty();

        private Optional<String> filingFrequencyIn = Optional.empty();

        private Optional<? extends List<CountryCodeEnum>> countryCodeIn = Optional.empty();

        private Optional<String> orderBy = Optional.empty();

        private Optional<Long> page;

        private Optional<Long> size;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Filter registrations by status. Multiple statuses can be passed,
         *         separated by commas.
         */
        public Builder statusIn(String statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = Optional.ofNullable(statusIn);
            return this;
        }

        /**
         * Filter registrations by status. Multiple statuses can be passed,
         *         separated by commas.
         */
        public Builder statusIn(Optional<String> statusIn) {
            Utils.checkNotNull(statusIn, "statusIn");
            this.statusIn = statusIn;
            return this;
        }


        /**
         * Filter registrations by state code.
         */
        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = Optional.ofNullable(stateCode);
            return this;
        }

        /**
         * Filter registrations by state code.
         */
        public Builder stateCode(Optional<String> stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        /**
         * Filter registrations by filing frequency. Multiple filing frequencies
         *         can be passed, separated by commas.
         */
        public Builder filingFrequencyIn(String filingFrequencyIn) {
            Utils.checkNotNull(filingFrequencyIn, "filingFrequencyIn");
            this.filingFrequencyIn = Optional.ofNullable(filingFrequencyIn);
            return this;
        }

        /**
         * Filter registrations by filing frequency. Multiple filing frequencies
         *         can be passed, separated by commas.
         */
        public Builder filingFrequencyIn(Optional<String> filingFrequencyIn) {
            Utils.checkNotNull(filingFrequencyIn, "filingFrequencyIn");
            this.filingFrequencyIn = filingFrequencyIn;
            return this;
        }


        /**
         * Filter registrations by country code in ISO 3166-1 alpha-2 format
         *         (e.g., US, CA).
         */
        public Builder countryCodeIn(List<CountryCodeEnum> countryCodeIn) {
            Utils.checkNotNull(countryCodeIn, "countryCodeIn");
            this.countryCodeIn = Optional.ofNullable(countryCodeIn);
            return this;
        }

        /**
         * Filter registrations by country code in ISO 3166-1 alpha-2 format
         *         (e.g., US, CA).
         */
        public Builder countryCodeIn(Optional<? extends List<CountryCodeEnum>> countryCodeIn) {
            Utils.checkNotNull(countryCodeIn, "countryCodeIn");
            this.countryCodeIn = countryCodeIn;
            return this;
        }


        /**
         * Order results by specified fields (comma-separated)
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Order results by specified fields (comma-separated)
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * Page size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Page size
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public GetRegistrationsV1RegistrationsGetRequest build() {
            if (statusIn == null) {
                statusIn = _SINGLETON_VALUE_StatusIn.value();
            }
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetRegistrationsV1RegistrationsGetRequest(
                statusIn, stateCode, filingFrequencyIn,
                countryCodeIn, orderBy, page,
                size);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_StatusIn =
                new LazySingletonValue<>(
                        "status__in",
                        "\"REGISTERED,PROCESSING,UNREGISTERED,DEREGISTERING,DEREGISTERED,VALIDATING,AWAITING_CLARIFICATION\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
