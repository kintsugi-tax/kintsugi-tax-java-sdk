/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.models.components.CountryCodeEnum;
import com.kintsugi.taxplatform.models.components.TransactionStatusEnum;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class GetTransactionsV1TransactionsGetRequest {
    /**
     * Filter transactions by state code.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state_code")
    private Optional<String> stateCode;

    /**
     * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
     *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transaction_type")
    private Optional<String> transactionType;

    /**
     * Filter transactions based on the source.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transaction_source")
    private Optional<String> transactionSource;

    /**
     * Search for transactions using a general query
     *         (e.g., order ID, customer name).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_query")
    private Optional<String> searchQuery;

    /**
     * Filter transactions by country code
     *         (ISO 3166-1 alpha-2 format, e.g., US).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country")
    private Optional<? extends List<CountryCodeEnum>> country;

    /**
     * Filter by full state name (e.g., California).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    private Optional<String> state;

    /**
     * Filter by address status (e.g., UNVERIFIED, INVALID,
     *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=address_status__in")
    private Optional<String> addressStatusIn;

    /**
     * Filter by transaction status (e.g., PENDING, COMMITTED,
     *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    private Optional<? extends TransactionStatusEnum> status;

    /**
     * Retrieve transactions linked to a specific filing ID.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filing_id")
    private Optional<String> filingId;

    /**
     * Sort results based on specified fields.
     *         Prefix with - for descending order (e.g., -date for newest first).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<String> orderBy;

    /**
     * Retrieve transactions with a date
     *         greater than or equal to (YYYY-MM-DD).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date__gte")
    private Optional<String> dateGte;

    /**
     * Retrieve transactions with a date
     *         less than or equal to (YYYY-MM-DD).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date__lte")
    private Optional<String> dateLte;

    /**
     * Filter transactions based on processing status.
     *         Multiple values can be passed as a comma-separated list.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=processing_status__in")
    private Optional<String> processingStatusIn;

    /**
     * Filter transactions by marketplace (e.g., AMAZON, EBAY).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=marketplace")
    private Optional<Boolean> marketplace;

    /**
     * Filter transactions by exemption status.
     *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exempt__in")
    private Optional<String> exemptIn;

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    @JsonCreator
    public GetTransactionsV1TransactionsGetRequest(
            Optional<String> stateCode,
            Optional<String> transactionType,
            Optional<String> transactionSource,
            Optional<String> searchQuery,
            Optional<? extends List<CountryCodeEnum>> country,
            Optional<String> state,
            Optional<String> addressStatusIn,
            Optional<? extends TransactionStatusEnum> status,
            Optional<String> filingId,
            Optional<String> orderBy,
            Optional<String> dateGte,
            Optional<String> dateLte,
            Optional<String> processingStatusIn,
            Optional<Boolean> marketplace,
            Optional<String> exemptIn,
            Optional<Long> page,
            Optional<Long> size) {
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(transactionType, "transactionType");
        Utils.checkNotNull(transactionSource, "transactionSource");
        Utils.checkNotNull(searchQuery, "searchQuery");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(addressStatusIn, "addressStatusIn");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(filingId, "filingId");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(dateGte, "dateGte");
        Utils.checkNotNull(dateLte, "dateLte");
        Utils.checkNotNull(processingStatusIn, "processingStatusIn");
        Utils.checkNotNull(marketplace, "marketplace");
        Utils.checkNotNull(exemptIn, "exemptIn");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        this.stateCode = stateCode;
        this.transactionType = transactionType;
        this.transactionSource = transactionSource;
        this.searchQuery = searchQuery;
        this.country = country;
        this.state = state;
        this.addressStatusIn = addressStatusIn;
        this.status = status;
        this.filingId = filingId;
        this.orderBy = orderBy;
        this.dateGte = dateGte;
        this.dateLte = dateLte;
        this.processingStatusIn = processingStatusIn;
        this.marketplace = marketplace;
        this.exemptIn = exemptIn;
        this.page = page;
        this.size = size;
    }
    
    public GetTransactionsV1TransactionsGetRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Filter transactions by state code.
     */
    @JsonIgnore
    public Optional<String> stateCode() {
        return stateCode;
    }

    /**
     * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
     *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
     */
    @JsonIgnore
    public Optional<String> transactionType() {
        return transactionType;
    }

    /**
     * Filter transactions based on the source.
     */
    @JsonIgnore
    public Optional<String> transactionSource() {
        return transactionSource;
    }

    /**
     * Search for transactions using a general query
     *         (e.g., order ID, customer name).
     */
    @JsonIgnore
    public Optional<String> searchQuery() {
        return searchQuery;
    }

    /**
     * Filter transactions by country code
     *         (ISO 3166-1 alpha-2 format, e.g., US).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CountryCodeEnum>> country() {
        return (Optional<List<CountryCodeEnum>>) country;
    }

    /**
     * Filter by full state name (e.g., California).
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * Filter by address status (e.g., UNVERIFIED, INVALID,
     *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
     */
    @JsonIgnore
    public Optional<String> addressStatusIn() {
        return addressStatusIn;
    }

    /**
     * Filter by transaction status (e.g., PENDING, COMMITTED,
     *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionStatusEnum> status() {
        return (Optional<TransactionStatusEnum>) status;
    }

    /**
     * Retrieve transactions linked to a specific filing ID.
     */
    @JsonIgnore
    public Optional<String> filingId() {
        return filingId;
    }

    /**
     * Sort results based on specified fields.
     *         Prefix with - for descending order (e.g., -date for newest first).
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    /**
     * Retrieve transactions with a date
     *         greater than or equal to (YYYY-MM-DD).
     */
    @JsonIgnore
    public Optional<String> dateGte() {
        return dateGte;
    }

    /**
     * Retrieve transactions with a date
     *         less than or equal to (YYYY-MM-DD).
     */
    @JsonIgnore
    public Optional<String> dateLte() {
        return dateLte;
    }

    /**
     * Filter transactions based on processing status.
     *         Multiple values can be passed as a comma-separated list.
     */
    @JsonIgnore
    public Optional<String> processingStatusIn() {
        return processingStatusIn;
    }

    /**
     * Filter transactions by marketplace (e.g., AMAZON, EBAY).
     */
    @JsonIgnore
    public Optional<Boolean> marketplace() {
        return marketplace;
    }

    /**
     * Filter transactions by exemption status.
     *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
     */
    @JsonIgnore
    public Optional<String> exemptIn() {
        return exemptIn;
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Filter transactions by state code.
     */
    public GetTransactionsV1TransactionsGetRequest withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = Optional.ofNullable(stateCode);
        return this;
    }


    /**
     * Filter transactions by state code.
     */
    public GetTransactionsV1TransactionsGetRequest withStateCode(Optional<String> stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    /**
     * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
     *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
     */
    public GetTransactionsV1TransactionsGetRequest withTransactionType(String transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = Optional.ofNullable(transactionType);
        return this;
    }


    /**
     * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
     *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
     */
    public GetTransactionsV1TransactionsGetRequest withTransactionType(Optional<String> transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = transactionType;
        return this;
    }

    /**
     * Filter transactions based on the source.
     */
    public GetTransactionsV1TransactionsGetRequest withTransactionSource(String transactionSource) {
        Utils.checkNotNull(transactionSource, "transactionSource");
        this.transactionSource = Optional.ofNullable(transactionSource);
        return this;
    }


    /**
     * Filter transactions based on the source.
     */
    public GetTransactionsV1TransactionsGetRequest withTransactionSource(Optional<String> transactionSource) {
        Utils.checkNotNull(transactionSource, "transactionSource");
        this.transactionSource = transactionSource;
        return this;
    }

    /**
     * Search for transactions using a general query
     *         (e.g., order ID, customer name).
     */
    public GetTransactionsV1TransactionsGetRequest withSearchQuery(String searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = Optional.ofNullable(searchQuery);
        return this;
    }


    /**
     * Search for transactions using a general query
     *         (e.g., order ID, customer name).
     */
    public GetTransactionsV1TransactionsGetRequest withSearchQuery(Optional<String> searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = searchQuery;
        return this;
    }

    /**
     * Filter transactions by country code
     *         (ISO 3166-1 alpha-2 format, e.g., US).
     */
    public GetTransactionsV1TransactionsGetRequest withCountry(List<CountryCodeEnum> country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    /**
     * Filter transactions by country code
     *         (ISO 3166-1 alpha-2 format, e.g., US).
     */
    public GetTransactionsV1TransactionsGetRequest withCountry(Optional<? extends List<CountryCodeEnum>> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Filter by full state name (e.g., California).
     */
    public GetTransactionsV1TransactionsGetRequest withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }


    /**
     * Filter by full state name (e.g., California).
     */
    public GetTransactionsV1TransactionsGetRequest withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Filter by address status (e.g., UNVERIFIED, INVALID,
     *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
     */
    public GetTransactionsV1TransactionsGetRequest withAddressStatusIn(String addressStatusIn) {
        Utils.checkNotNull(addressStatusIn, "addressStatusIn");
        this.addressStatusIn = Optional.ofNullable(addressStatusIn);
        return this;
    }


    /**
     * Filter by address status (e.g., UNVERIFIED, INVALID,
     *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
     */
    public GetTransactionsV1TransactionsGetRequest withAddressStatusIn(Optional<String> addressStatusIn) {
        Utils.checkNotNull(addressStatusIn, "addressStatusIn");
        this.addressStatusIn = addressStatusIn;
        return this;
    }

    /**
     * Filter by transaction status (e.g., PENDING, COMMITTED,
     *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
     */
    public GetTransactionsV1TransactionsGetRequest withStatus(TransactionStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * Filter by transaction status (e.g., PENDING, COMMITTED,
     *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
     */
    public GetTransactionsV1TransactionsGetRequest withStatus(Optional<? extends TransactionStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Retrieve transactions linked to a specific filing ID.
     */
    public GetTransactionsV1TransactionsGetRequest withFilingId(String filingId) {
        Utils.checkNotNull(filingId, "filingId");
        this.filingId = Optional.ofNullable(filingId);
        return this;
    }


    /**
     * Retrieve transactions linked to a specific filing ID.
     */
    public GetTransactionsV1TransactionsGetRequest withFilingId(Optional<String> filingId) {
        Utils.checkNotNull(filingId, "filingId");
        this.filingId = filingId;
        return this;
    }

    /**
     * Sort results based on specified fields.
     *         Prefix with - for descending order (e.g., -date for newest first).
     */
    public GetTransactionsV1TransactionsGetRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }


    /**
     * Sort results based on specified fields.
     *         Prefix with - for descending order (e.g., -date for newest first).
     */
    public GetTransactionsV1TransactionsGetRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Retrieve transactions with a date
     *         greater than or equal to (YYYY-MM-DD).
     */
    public GetTransactionsV1TransactionsGetRequest withDateGte(String dateGte) {
        Utils.checkNotNull(dateGte, "dateGte");
        this.dateGte = Optional.ofNullable(dateGte);
        return this;
    }


    /**
     * Retrieve transactions with a date
     *         greater than or equal to (YYYY-MM-DD).
     */
    public GetTransactionsV1TransactionsGetRequest withDateGte(Optional<String> dateGte) {
        Utils.checkNotNull(dateGte, "dateGte");
        this.dateGte = dateGte;
        return this;
    }

    /**
     * Retrieve transactions with a date
     *         less than or equal to (YYYY-MM-DD).
     */
    public GetTransactionsV1TransactionsGetRequest withDateLte(String dateLte) {
        Utils.checkNotNull(dateLte, "dateLte");
        this.dateLte = Optional.ofNullable(dateLte);
        return this;
    }


    /**
     * Retrieve transactions with a date
     *         less than or equal to (YYYY-MM-DD).
     */
    public GetTransactionsV1TransactionsGetRequest withDateLte(Optional<String> dateLte) {
        Utils.checkNotNull(dateLte, "dateLte");
        this.dateLte = dateLte;
        return this;
    }

    /**
     * Filter transactions based on processing status.
     *         Multiple values can be passed as a comma-separated list.
     */
    public GetTransactionsV1TransactionsGetRequest withProcessingStatusIn(String processingStatusIn) {
        Utils.checkNotNull(processingStatusIn, "processingStatusIn");
        this.processingStatusIn = Optional.ofNullable(processingStatusIn);
        return this;
    }


    /**
     * Filter transactions based on processing status.
     *         Multiple values can be passed as a comma-separated list.
     */
    public GetTransactionsV1TransactionsGetRequest withProcessingStatusIn(Optional<String> processingStatusIn) {
        Utils.checkNotNull(processingStatusIn, "processingStatusIn");
        this.processingStatusIn = processingStatusIn;
        return this;
    }

    /**
     * Filter transactions by marketplace (e.g., AMAZON, EBAY).
     */
    public GetTransactionsV1TransactionsGetRequest withMarketplace(boolean marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = Optional.ofNullable(marketplace);
        return this;
    }


    /**
     * Filter transactions by marketplace (e.g., AMAZON, EBAY).
     */
    public GetTransactionsV1TransactionsGetRequest withMarketplace(Optional<Boolean> marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Filter transactions by exemption status.
     *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
     */
    public GetTransactionsV1TransactionsGetRequest withExemptIn(String exemptIn) {
        Utils.checkNotNull(exemptIn, "exemptIn");
        this.exemptIn = Optional.ofNullable(exemptIn);
        return this;
    }


    /**
     * Filter transactions by exemption status.
     *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
     */
    public GetTransactionsV1TransactionsGetRequest withExemptIn(Optional<String> exemptIn) {
        Utils.checkNotNull(exemptIn, "exemptIn");
        this.exemptIn = exemptIn;
        return this;
    }

    /**
     * Page number
     */
    public GetTransactionsV1TransactionsGetRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    /**
     * Page number
     */
    public GetTransactionsV1TransactionsGetRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetTransactionsV1TransactionsGetRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Page size
     */
    public GetTransactionsV1TransactionsGetRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTransactionsV1TransactionsGetRequest other = (GetTransactionsV1TransactionsGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.transactionType, other.transactionType) &&
            Utils.enhancedDeepEquals(this.transactionSource, other.transactionSource) &&
            Utils.enhancedDeepEquals(this.searchQuery, other.searchQuery) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.addressStatusIn, other.addressStatusIn) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.filingId, other.filingId) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.dateGte, other.dateGte) &&
            Utils.enhancedDeepEquals(this.dateLte, other.dateLte) &&
            Utils.enhancedDeepEquals(this.processingStatusIn, other.processingStatusIn) &&
            Utils.enhancedDeepEquals(this.marketplace, other.marketplace) &&
            Utils.enhancedDeepEquals(this.exemptIn, other.exemptIn) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            stateCode, transactionType, transactionSource,
            searchQuery, country, state,
            addressStatusIn, status, filingId,
            orderBy, dateGte, dateLte,
            processingStatusIn, marketplace, exemptIn,
            page, size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTransactionsV1TransactionsGetRequest.class,
                "stateCode", stateCode,
                "transactionType", transactionType,
                "transactionSource", transactionSource,
                "searchQuery", searchQuery,
                "country", country,
                "state", state,
                "addressStatusIn", addressStatusIn,
                "status", status,
                "filingId", filingId,
                "orderBy", orderBy,
                "dateGte", dateGte,
                "dateLte", dateLte,
                "processingStatusIn", processingStatusIn,
                "marketplace", marketplace,
                "exemptIn", exemptIn,
                "page", page,
                "size", size);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> stateCode = Optional.empty();

        private Optional<String> transactionType = Optional.empty();

        private Optional<String> transactionSource = Optional.empty();

        private Optional<String> searchQuery = Optional.empty();

        private Optional<? extends List<CountryCodeEnum>> country = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> addressStatusIn;

        private Optional<? extends TransactionStatusEnum> status = Optional.empty();

        private Optional<String> filingId = Optional.empty();

        private Optional<String> orderBy;

        private Optional<String> dateGte = Optional.empty();

        private Optional<String> dateLte = Optional.empty();

        private Optional<String> processingStatusIn = Optional.empty();

        private Optional<Boolean> marketplace = Optional.empty();

        private Optional<String> exemptIn = Optional.empty();

        private Optional<Long> page;

        private Optional<Long> size;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Filter transactions by state code.
         */
        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = Optional.ofNullable(stateCode);
            return this;
        }

        /**
         * Filter transactions by state code.
         */
        public Builder stateCode(Optional<String> stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        /**
         * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
         *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
         */
        public Builder transactionType(String transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = Optional.ofNullable(transactionType);
            return this;
        }

        /**
         * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
         *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
         */
        public Builder transactionType(Optional<String> transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = transactionType;
            return this;
        }


        /**
         * Filter transactions based on the source.
         */
        public Builder transactionSource(String transactionSource) {
            Utils.checkNotNull(transactionSource, "transactionSource");
            this.transactionSource = Optional.ofNullable(transactionSource);
            return this;
        }

        /**
         * Filter transactions based on the source.
         */
        public Builder transactionSource(Optional<String> transactionSource) {
            Utils.checkNotNull(transactionSource, "transactionSource");
            this.transactionSource = transactionSource;
            return this;
        }


        /**
         * Search for transactions using a general query
         *         (e.g., order ID, customer name).
         */
        public Builder searchQuery(String searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = Optional.ofNullable(searchQuery);
            return this;
        }

        /**
         * Search for transactions using a general query
         *         (e.g., order ID, customer name).
         */
        public Builder searchQuery(Optional<String> searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = searchQuery;
            return this;
        }


        /**
         * Filter transactions by country code
         *         (ISO 3166-1 alpha-2 format, e.g., US).
         */
        public Builder country(List<CountryCodeEnum> country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * Filter transactions by country code
         *         (ISO 3166-1 alpha-2 format, e.g., US).
         */
        public Builder country(Optional<? extends List<CountryCodeEnum>> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Filter by full state name (e.g., California).
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Filter by full state name (e.g., California).
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * Filter by address status (e.g., UNVERIFIED, INVALID,
         *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
         */
        public Builder addressStatusIn(String addressStatusIn) {
            Utils.checkNotNull(addressStatusIn, "addressStatusIn");
            this.addressStatusIn = Optional.ofNullable(addressStatusIn);
            return this;
        }

        /**
         * Filter by address status (e.g., UNVERIFIED, INVALID,
         *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
         */
        public Builder addressStatusIn(Optional<String> addressStatusIn) {
            Utils.checkNotNull(addressStatusIn, "addressStatusIn");
            this.addressStatusIn = addressStatusIn;
            return this;
        }


        /**
         * Filter by transaction status (e.g., PENDING, COMMITTED,
         *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
         */
        public Builder status(TransactionStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Filter by transaction status (e.g., PENDING, COMMITTED,
         *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
         */
        public Builder status(Optional<? extends TransactionStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Retrieve transactions linked to a specific filing ID.
         */
        public Builder filingId(String filingId) {
            Utils.checkNotNull(filingId, "filingId");
            this.filingId = Optional.ofNullable(filingId);
            return this;
        }

        /**
         * Retrieve transactions linked to a specific filing ID.
         */
        public Builder filingId(Optional<String> filingId) {
            Utils.checkNotNull(filingId, "filingId");
            this.filingId = filingId;
            return this;
        }


        /**
         * Sort results based on specified fields.
         *         Prefix with - for descending order (e.g., -date for newest first).
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Sort results based on specified fields.
         *         Prefix with - for descending order (e.g., -date for newest first).
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * Retrieve transactions with a date
         *         greater than or equal to (YYYY-MM-DD).
         */
        public Builder dateGte(String dateGte) {
            Utils.checkNotNull(dateGte, "dateGte");
            this.dateGte = Optional.ofNullable(dateGte);
            return this;
        }

        /**
         * Retrieve transactions with a date
         *         greater than or equal to (YYYY-MM-DD).
         */
        public Builder dateGte(Optional<String> dateGte) {
            Utils.checkNotNull(dateGte, "dateGte");
            this.dateGte = dateGte;
            return this;
        }


        /**
         * Retrieve transactions with a date
         *         less than or equal to (YYYY-MM-DD).
         */
        public Builder dateLte(String dateLte) {
            Utils.checkNotNull(dateLte, "dateLte");
            this.dateLte = Optional.ofNullable(dateLte);
            return this;
        }

        /**
         * Retrieve transactions with a date
         *         less than or equal to (YYYY-MM-DD).
         */
        public Builder dateLte(Optional<String> dateLte) {
            Utils.checkNotNull(dateLte, "dateLte");
            this.dateLte = dateLte;
            return this;
        }


        /**
         * Filter transactions based on processing status.
         *         Multiple values can be passed as a comma-separated list.
         */
        public Builder processingStatusIn(String processingStatusIn) {
            Utils.checkNotNull(processingStatusIn, "processingStatusIn");
            this.processingStatusIn = Optional.ofNullable(processingStatusIn);
            return this;
        }

        /**
         * Filter transactions based on processing status.
         *         Multiple values can be passed as a comma-separated list.
         */
        public Builder processingStatusIn(Optional<String> processingStatusIn) {
            Utils.checkNotNull(processingStatusIn, "processingStatusIn");
            this.processingStatusIn = processingStatusIn;
            return this;
        }


        /**
         * Filter transactions by marketplace (e.g., AMAZON, EBAY).
         */
        public Builder marketplace(boolean marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = Optional.ofNullable(marketplace);
            return this;
        }

        /**
         * Filter transactions by marketplace (e.g., AMAZON, EBAY).
         */
        public Builder marketplace(Optional<Boolean> marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = marketplace;
            return this;
        }


        /**
         * Filter transactions by exemption status.
         *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
         */
        public Builder exemptIn(String exemptIn) {
            Utils.checkNotNull(exemptIn, "exemptIn");
            this.exemptIn = Optional.ofNullable(exemptIn);
            return this;
        }

        /**
         * Filter transactions by exemption status.
         *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
         */
        public Builder exemptIn(Optional<String> exemptIn) {
            Utils.checkNotNull(exemptIn, "exemptIn");
            this.exemptIn = exemptIn;
            return this;
        }


        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * Page size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Page size
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public GetTransactionsV1TransactionsGetRequest build() {
            if (addressStatusIn == null) {
                addressStatusIn = _SINGLETON_VALUE_AddressStatusIn.value();
            }
            if (orderBy == null) {
                orderBy = _SINGLETON_VALUE_OrderBy.value();
            }
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetTransactionsV1TransactionsGetRequest(
                stateCode, transactionType, transactionSource,
                searchQuery, country, state,
                addressStatusIn, status, filingId,
                orderBy, dateGte, dateLte,
                processingStatusIn, marketplace, exemptIn,
                page, size);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AddressStatusIn =
                new LazySingletonValue<>(
                        "address_status__in",
                        "\"UNVERIFIED,INVALID,PARTIALLY_VERIFIED,VERIFIED,UNVERIFIABLE\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_OrderBy =
                new LazySingletonValue<>(
                        "order_by",
                        "\"date,state,customer_name,status\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
