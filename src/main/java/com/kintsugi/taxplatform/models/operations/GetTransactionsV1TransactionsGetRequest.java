/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.models.components.TransactionStatusEnum;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetTransactionsV1TransactionsGetRequest {
    /**
     * Filter transactions by state code.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state_code")
    private JsonNullable<String> stateCode;

    /**
     * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
     *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transaction_type")
    private JsonNullable<String> transactionType;

    /**
     * Filter transactions based on the source.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transaction_source")
    private JsonNullable<String> transactionSource;

    /**
     * Search for transactions using a general query
     *         (e.g., order ID, customer name).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_query")
    private JsonNullable<String> searchQuery;

    /**
     * Filter transactions by country code
     *         (ISO 3166-1 alpha-2 format, e.g., US).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country")
    private JsonNullable<? extends List<GetTransactionsV1TransactionsGetCountry>> country;

    /**
     * Filter by full state name (e.g., California).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    private JsonNullable<String> state;

    /**
     * Filter by address status (e.g., UNVERIFIED, INVALID,
     *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=address_status__in")
    private JsonNullable<String> addressStatusIn;

    /**
     * Filter by transaction status (e.g., PENDING, COMMITTED,
     *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    private JsonNullable<? extends TransactionStatusEnum> status;

    /**
     * Retrieve transactions linked to a specific filing ID.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filing_id")
    private JsonNullable<String> filingId;

    /**
     * Sort results based on specified fields.
     *         Prefix with - for descending order (e.g., -date for newest first).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private JsonNullable<String> orderBy;

    /**
     * Retrieve transactions with a date
     *         greater than or equal to (YYYY-MM-DD).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date__gte")
    private JsonNullable<LocalDate> dateGte;

    /**
     * Retrieve transactions with a date
     *         less than or equal to (YYYY-MM-DD).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date__lte")
    private JsonNullable<LocalDate> dateLte;

    /**
     * Filter transactions based on processing status.
     *         Multiple values can be passed as a comma-separated list.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=processing_status__in")
    private JsonNullable<String> processingStatusIn;

    /**
     * Filter transactions by marketplace (e.g., AMAZON, EBAY).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=marketplace")
    private JsonNullable<Boolean> marketplace;

    /**
     * Filter transactions by exemption status.
     *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exempt__in")
    private JsonNullable<String> exemptIn;

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    private Optional<Long> size;

    /**
     * The unique identifier for the organization making the request
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-organization-id")
    private Optional<String> xOrganizationId;

    @JsonCreator
    public GetTransactionsV1TransactionsGetRequest(
            JsonNullable<String> stateCode,
            JsonNullable<String> transactionType,
            JsonNullable<String> transactionSource,
            JsonNullable<String> searchQuery,
            JsonNullable<? extends List<GetTransactionsV1TransactionsGetCountry>> country,
            JsonNullable<String> state,
            JsonNullable<String> addressStatusIn,
            JsonNullable<? extends TransactionStatusEnum> status,
            JsonNullable<String> filingId,
            JsonNullable<String> orderBy,
            JsonNullable<LocalDate> dateGte,
            JsonNullable<LocalDate> dateLte,
            JsonNullable<String> processingStatusIn,
            JsonNullable<Boolean> marketplace,
            JsonNullable<String> exemptIn,
            Optional<Long> page,
            Optional<Long> size,
            Optional<String> xOrganizationId) {
        Utils.checkNotNull(stateCode, "stateCode");
        Utils.checkNotNull(transactionType, "transactionType");
        Utils.checkNotNull(transactionSource, "transactionSource");
        Utils.checkNotNull(searchQuery, "searchQuery");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(addressStatusIn, "addressStatusIn");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(filingId, "filingId");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(dateGte, "dateGte");
        Utils.checkNotNull(dateLte, "dateLte");
        Utils.checkNotNull(processingStatusIn, "processingStatusIn");
        Utils.checkNotNull(marketplace, "marketplace");
        Utils.checkNotNull(exemptIn, "exemptIn");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.stateCode = stateCode;
        this.transactionType = transactionType;
        this.transactionSource = transactionSource;
        this.searchQuery = searchQuery;
        this.country = country;
        this.state = state;
        this.addressStatusIn = addressStatusIn;
        this.status = status;
        this.filingId = filingId;
        this.orderBy = orderBy;
        this.dateGte = dateGte;
        this.dateLte = dateLte;
        this.processingStatusIn = processingStatusIn;
        this.marketplace = marketplace;
        this.exemptIn = exemptIn;
        this.page = page;
        this.size = size;
        this.xOrganizationId = xOrganizationId;
    }
    
    public GetTransactionsV1TransactionsGetRequest() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Filter transactions by state code.
     */
    @JsonIgnore
    public JsonNullable<String> stateCode() {
        return stateCode;
    }

    /**
     * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
     *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
     */
    @JsonIgnore
    public JsonNullable<String> transactionType() {
        return transactionType;
    }

    /**
     * Filter transactions based on the source.
     */
    @JsonIgnore
    public JsonNullable<String> transactionSource() {
        return transactionSource;
    }

    /**
     * Search for transactions using a general query
     *         (e.g., order ID, customer name).
     */
    @JsonIgnore
    public JsonNullable<String> searchQuery() {
        return searchQuery;
    }

    /**
     * Filter transactions by country code
     *         (ISO 3166-1 alpha-2 format, e.g., US).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<GetTransactionsV1TransactionsGetCountry>> country() {
        return (JsonNullable<List<GetTransactionsV1TransactionsGetCountry>>) country;
    }

    /**
     * Filter by full state name (e.g., California).
     */
    @JsonIgnore
    public JsonNullable<String> state() {
        return state;
    }

    /**
     * Filter by address status (e.g., UNVERIFIED, INVALID,
     *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
     */
    @JsonIgnore
    public JsonNullable<String> addressStatusIn() {
        return addressStatusIn;
    }

    /**
     * Filter by transaction status (e.g., PENDING, COMMITTED,
     *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionStatusEnum> status() {
        return (JsonNullable<TransactionStatusEnum>) status;
    }

    /**
     * Retrieve transactions linked to a specific filing ID.
     */
    @JsonIgnore
    public JsonNullable<String> filingId() {
        return filingId;
    }

    /**
     * Sort results based on specified fields.
     *         Prefix with - for descending order (e.g., -date for newest first).
     */
    @JsonIgnore
    public JsonNullable<String> orderBy() {
        return orderBy;
    }

    /**
     * Retrieve transactions with a date
     *         greater than or equal to (YYYY-MM-DD).
     */
    @JsonIgnore
    public JsonNullable<LocalDate> dateGte() {
        return dateGte;
    }

    /**
     * Retrieve transactions with a date
     *         less than or equal to (YYYY-MM-DD).
     */
    @JsonIgnore
    public JsonNullable<LocalDate> dateLte() {
        return dateLte;
    }

    /**
     * Filter transactions based on processing status.
     *         Multiple values can be passed as a comma-separated list.
     */
    @JsonIgnore
    public JsonNullable<String> processingStatusIn() {
        return processingStatusIn;
    }

    /**
     * Filter transactions by marketplace (e.g., AMAZON, EBAY).
     */
    @JsonIgnore
    public JsonNullable<Boolean> marketplace() {
        return marketplace;
    }

    /**
     * Filter transactions by exemption status.
     *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
     */
    @JsonIgnore
    public JsonNullable<String> exemptIn() {
        return exemptIn;
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    /**
     * The unique identifier for the organization making the request
     */
    @JsonIgnore
    public Optional<String> xOrganizationId() {
        return xOrganizationId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Filter transactions by state code.
     */
    public GetTransactionsV1TransactionsGetRequest withStateCode(String stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = JsonNullable.of(stateCode);
        return this;
    }

    /**
     * Filter transactions by state code.
     */
    public GetTransactionsV1TransactionsGetRequest withStateCode(JsonNullable<String> stateCode) {
        Utils.checkNotNull(stateCode, "stateCode");
        this.stateCode = stateCode;
        return this;
    }

    /**
     * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
     *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
     */
    public GetTransactionsV1TransactionsGetRequest withTransactionType(String transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = JsonNullable.of(transactionType);
        return this;
    }

    /**
     * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
     *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
     */
    public GetTransactionsV1TransactionsGetRequest withTransactionType(JsonNullable<String> transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = transactionType;
        return this;
    }

    /**
     * Filter transactions based on the source.
     */
    public GetTransactionsV1TransactionsGetRequest withTransactionSource(String transactionSource) {
        Utils.checkNotNull(transactionSource, "transactionSource");
        this.transactionSource = JsonNullable.of(transactionSource);
        return this;
    }

    /**
     * Filter transactions based on the source.
     */
    public GetTransactionsV1TransactionsGetRequest withTransactionSource(JsonNullable<String> transactionSource) {
        Utils.checkNotNull(transactionSource, "transactionSource");
        this.transactionSource = transactionSource;
        return this;
    }

    /**
     * Search for transactions using a general query
     *         (e.g., order ID, customer name).
     */
    public GetTransactionsV1TransactionsGetRequest withSearchQuery(String searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = JsonNullable.of(searchQuery);
        return this;
    }

    /**
     * Search for transactions using a general query
     *         (e.g., order ID, customer name).
     */
    public GetTransactionsV1TransactionsGetRequest withSearchQuery(JsonNullable<String> searchQuery) {
        Utils.checkNotNull(searchQuery, "searchQuery");
        this.searchQuery = searchQuery;
        return this;
    }

    /**
     * Filter transactions by country code
     *         (ISO 3166-1 alpha-2 format, e.g., US).
     */
    public GetTransactionsV1TransactionsGetRequest withCountry(List<GetTransactionsV1TransactionsGetCountry> country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Filter transactions by country code
     *         (ISO 3166-1 alpha-2 format, e.g., US).
     */
    public GetTransactionsV1TransactionsGetRequest withCountry(JsonNullable<? extends List<GetTransactionsV1TransactionsGetCountry>> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Filter by full state name (e.g., California).
     */
    public GetTransactionsV1TransactionsGetRequest withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = JsonNullable.of(state);
        return this;
    }

    /**
     * Filter by full state name (e.g., California).
     */
    public GetTransactionsV1TransactionsGetRequest withState(JsonNullable<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Filter by address status (e.g., UNVERIFIED, INVALID,
     *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
     */
    public GetTransactionsV1TransactionsGetRequest withAddressStatusIn(String addressStatusIn) {
        Utils.checkNotNull(addressStatusIn, "addressStatusIn");
        this.addressStatusIn = JsonNullable.of(addressStatusIn);
        return this;
    }

    /**
     * Filter by address status (e.g., UNVERIFIED, INVALID,
     *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
     */
    public GetTransactionsV1TransactionsGetRequest withAddressStatusIn(JsonNullable<String> addressStatusIn) {
        Utils.checkNotNull(addressStatusIn, "addressStatusIn");
        this.addressStatusIn = addressStatusIn;
        return this;
    }

    /**
     * Filter by transaction status (e.g., PENDING, COMMITTED,
     *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
     */
    public GetTransactionsV1TransactionsGetRequest withStatus(TransactionStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Filter by transaction status (e.g., PENDING, COMMITTED,
     *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
     */
    public GetTransactionsV1TransactionsGetRequest withStatus(JsonNullable<? extends TransactionStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Retrieve transactions linked to a specific filing ID.
     */
    public GetTransactionsV1TransactionsGetRequest withFilingId(String filingId) {
        Utils.checkNotNull(filingId, "filingId");
        this.filingId = JsonNullable.of(filingId);
        return this;
    }

    /**
     * Retrieve transactions linked to a specific filing ID.
     */
    public GetTransactionsV1TransactionsGetRequest withFilingId(JsonNullable<String> filingId) {
        Utils.checkNotNull(filingId, "filingId");
        this.filingId = filingId;
        return this;
    }

    /**
     * Sort results based on specified fields.
     *         Prefix with - for descending order (e.g., -date for newest first).
     */
    public GetTransactionsV1TransactionsGetRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = JsonNullable.of(orderBy);
        return this;
    }

    /**
     * Sort results based on specified fields.
     *         Prefix with - for descending order (e.g., -date for newest first).
     */
    public GetTransactionsV1TransactionsGetRequest withOrderBy(JsonNullable<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Retrieve transactions with a date
     *         greater than or equal to (YYYY-MM-DD).
     */
    public GetTransactionsV1TransactionsGetRequest withDateGte(LocalDate dateGte) {
        Utils.checkNotNull(dateGte, "dateGte");
        this.dateGte = JsonNullable.of(dateGte);
        return this;
    }

    /**
     * Retrieve transactions with a date
     *         greater than or equal to (YYYY-MM-DD).
     */
    public GetTransactionsV1TransactionsGetRequest withDateGte(JsonNullable<LocalDate> dateGte) {
        Utils.checkNotNull(dateGte, "dateGte");
        this.dateGte = dateGte;
        return this;
    }

    /**
     * Retrieve transactions with a date
     *         less than or equal to (YYYY-MM-DD).
     */
    public GetTransactionsV1TransactionsGetRequest withDateLte(LocalDate dateLte) {
        Utils.checkNotNull(dateLte, "dateLte");
        this.dateLte = JsonNullable.of(dateLte);
        return this;
    }

    /**
     * Retrieve transactions with a date
     *         less than or equal to (YYYY-MM-DD).
     */
    public GetTransactionsV1TransactionsGetRequest withDateLte(JsonNullable<LocalDate> dateLte) {
        Utils.checkNotNull(dateLte, "dateLte");
        this.dateLte = dateLte;
        return this;
    }

    /**
     * Filter transactions based on processing status.
     *         Multiple values can be passed as a comma-separated list.
     */
    public GetTransactionsV1TransactionsGetRequest withProcessingStatusIn(String processingStatusIn) {
        Utils.checkNotNull(processingStatusIn, "processingStatusIn");
        this.processingStatusIn = JsonNullable.of(processingStatusIn);
        return this;
    }

    /**
     * Filter transactions based on processing status.
     *         Multiple values can be passed as a comma-separated list.
     */
    public GetTransactionsV1TransactionsGetRequest withProcessingStatusIn(JsonNullable<String> processingStatusIn) {
        Utils.checkNotNull(processingStatusIn, "processingStatusIn");
        this.processingStatusIn = processingStatusIn;
        return this;
    }

    /**
     * Filter transactions by marketplace (e.g., AMAZON, EBAY).
     */
    public GetTransactionsV1TransactionsGetRequest withMarketplace(boolean marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = JsonNullable.of(marketplace);
        return this;
    }

    /**
     * Filter transactions by marketplace (e.g., AMAZON, EBAY).
     */
    public GetTransactionsV1TransactionsGetRequest withMarketplace(JsonNullable<Boolean> marketplace) {
        Utils.checkNotNull(marketplace, "marketplace");
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Filter transactions by exemption status.
     *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
     */
    public GetTransactionsV1TransactionsGetRequest withExemptIn(String exemptIn) {
        Utils.checkNotNull(exemptIn, "exemptIn");
        this.exemptIn = JsonNullable.of(exemptIn);
        return this;
    }

    /**
     * Filter transactions by exemption status.
     *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
     */
    public GetTransactionsV1TransactionsGetRequest withExemptIn(JsonNullable<String> exemptIn) {
        Utils.checkNotNull(exemptIn, "exemptIn");
        this.exemptIn = exemptIn;
        return this;
    }

    /**
     * Page number
     */
    public GetTransactionsV1TransactionsGetRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }


    /**
     * Page number
     */
    public GetTransactionsV1TransactionsGetRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetTransactionsV1TransactionsGetRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Page size
     */
    public GetTransactionsV1TransactionsGetRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * The unique identifier for the organization making the request
     */
    public GetTransactionsV1TransactionsGetRequest withXOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.ofNullable(xOrganizationId);
        return this;
    }


    /**
     * The unique identifier for the organization making the request
     */
    public GetTransactionsV1TransactionsGetRequest withXOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTransactionsV1TransactionsGetRequest other = (GetTransactionsV1TransactionsGetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.stateCode, other.stateCode) &&
            Utils.enhancedDeepEquals(this.transactionType, other.transactionType) &&
            Utils.enhancedDeepEquals(this.transactionSource, other.transactionSource) &&
            Utils.enhancedDeepEquals(this.searchQuery, other.searchQuery) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.addressStatusIn, other.addressStatusIn) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.filingId, other.filingId) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.dateGte, other.dateGte) &&
            Utils.enhancedDeepEquals(this.dateLte, other.dateLte) &&
            Utils.enhancedDeepEquals(this.processingStatusIn, other.processingStatusIn) &&
            Utils.enhancedDeepEquals(this.marketplace, other.marketplace) &&
            Utils.enhancedDeepEquals(this.exemptIn, other.exemptIn) &&
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.xOrganizationId, other.xOrganizationId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            stateCode, transactionType, transactionSource,
            searchQuery, country, state,
            addressStatusIn, status, filingId,
            orderBy, dateGte, dateLte,
            processingStatusIn, marketplace, exemptIn,
            page, size, xOrganizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTransactionsV1TransactionsGetRequest.class,
                "stateCode", stateCode,
                "transactionType", transactionType,
                "transactionSource", transactionSource,
                "searchQuery", searchQuery,
                "country", country,
                "state", state,
                "addressStatusIn", addressStatusIn,
                "status", status,
                "filingId", filingId,
                "orderBy", orderBy,
                "dateGte", dateGte,
                "dateLte", dateLte,
                "processingStatusIn", processingStatusIn,
                "marketplace", marketplace,
                "exemptIn", exemptIn,
                "page", page,
                "size", size,
                "xOrganizationId", xOrganizationId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> stateCode = JsonNullable.undefined();

        private JsonNullable<String> transactionType = JsonNullable.undefined();

        private JsonNullable<String> transactionSource = JsonNullable.undefined();

        private JsonNullable<String> searchQuery = JsonNullable.undefined();

        private JsonNullable<? extends List<GetTransactionsV1TransactionsGetCountry>> country = JsonNullable.undefined();

        private JsonNullable<String> state = JsonNullable.undefined();

        private JsonNullable<String> addressStatusIn = JsonNullable.undefined();

        private JsonNullable<? extends TransactionStatusEnum> status = JsonNullable.undefined();

        private JsonNullable<String> filingId = JsonNullable.undefined();

        private JsonNullable<String> orderBy = JsonNullable.undefined();

        private JsonNullable<LocalDate> dateGte = JsonNullable.undefined();

        private JsonNullable<LocalDate> dateLte = JsonNullable.undefined();

        private JsonNullable<String> processingStatusIn = JsonNullable.undefined();

        private JsonNullable<Boolean> marketplace = JsonNullable.undefined();

        private JsonNullable<String> exemptIn = JsonNullable.undefined();

        private Optional<Long> page;

        private Optional<Long> size;

        private Optional<String> xOrganizationId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Filter transactions by state code.
         */
        public Builder stateCode(String stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = JsonNullable.of(stateCode);
            return this;
        }

        /**
         * Filter transactions by state code.
         */
        public Builder stateCode(JsonNullable<String> stateCode) {
            Utils.checkNotNull(stateCode, "stateCode");
            this.stateCode = stateCode;
            return this;
        }


        /**
         * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
         *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
         */
        public Builder transactionType(String transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = JsonNullable.of(transactionType);
            return this;
        }

        /**
         * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
         *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
         */
        public Builder transactionType(JsonNullable<String> transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = transactionType;
            return this;
        }


        /**
         * Filter transactions based on the source.
         */
        public Builder transactionSource(String transactionSource) {
            Utils.checkNotNull(transactionSource, "transactionSource");
            this.transactionSource = JsonNullable.of(transactionSource);
            return this;
        }

        /**
         * Filter transactions based on the source.
         */
        public Builder transactionSource(JsonNullable<String> transactionSource) {
            Utils.checkNotNull(transactionSource, "transactionSource");
            this.transactionSource = transactionSource;
            return this;
        }


        /**
         * Search for transactions using a general query
         *         (e.g., order ID, customer name).
         */
        public Builder searchQuery(String searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = JsonNullable.of(searchQuery);
            return this;
        }

        /**
         * Search for transactions using a general query
         *         (e.g., order ID, customer name).
         */
        public Builder searchQuery(JsonNullable<String> searchQuery) {
            Utils.checkNotNull(searchQuery, "searchQuery");
            this.searchQuery = searchQuery;
            return this;
        }


        /**
         * Filter transactions by country code
         *         (ISO 3166-1 alpha-2 format, e.g., US).
         */
        public Builder country(List<GetTransactionsV1TransactionsGetCountry> country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Filter transactions by country code
         *         (ISO 3166-1 alpha-2 format, e.g., US).
         */
        public Builder country(JsonNullable<? extends List<GetTransactionsV1TransactionsGetCountry>> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * Filter by full state name (e.g., California).
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * Filter by full state name (e.g., California).
         */
        public Builder state(JsonNullable<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }


        /**
         * Filter by address status (e.g., UNVERIFIED, INVALID,
         *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
         */
        public Builder addressStatusIn(String addressStatusIn) {
            Utils.checkNotNull(addressStatusIn, "addressStatusIn");
            this.addressStatusIn = JsonNullable.of(addressStatusIn);
            return this;
        }

        /**
         * Filter by address status (e.g., UNVERIFIED, INVALID,
         *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
         */
        public Builder addressStatusIn(JsonNullable<String> addressStatusIn) {
            Utils.checkNotNull(addressStatusIn, "addressStatusIn");
            this.addressStatusIn = addressStatusIn;
            return this;
        }


        /**
         * Filter by transaction status (e.g., PENDING, COMMITTED,
         *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
         */
        public Builder status(TransactionStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Filter by transaction status (e.g., PENDING, COMMITTED,
         *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
         */
        public Builder status(JsonNullable<? extends TransactionStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Retrieve transactions linked to a specific filing ID.
         */
        public Builder filingId(String filingId) {
            Utils.checkNotNull(filingId, "filingId");
            this.filingId = JsonNullable.of(filingId);
            return this;
        }

        /**
         * Retrieve transactions linked to a specific filing ID.
         */
        public Builder filingId(JsonNullable<String> filingId) {
            Utils.checkNotNull(filingId, "filingId");
            this.filingId = filingId;
            return this;
        }


        /**
         * Sort results based on specified fields.
         *         Prefix with - for descending order (e.g., -date for newest first).
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = JsonNullable.of(orderBy);
            return this;
        }

        /**
         * Sort results based on specified fields.
         *         Prefix with - for descending order (e.g., -date for newest first).
         */
        public Builder orderBy(JsonNullable<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * Retrieve transactions with a date
         *         greater than or equal to (YYYY-MM-DD).
         */
        public Builder dateGte(LocalDate dateGte) {
            Utils.checkNotNull(dateGte, "dateGte");
            this.dateGte = JsonNullable.of(dateGte);
            return this;
        }

        /**
         * Retrieve transactions with a date
         *         greater than or equal to (YYYY-MM-DD).
         */
        public Builder dateGte(JsonNullable<LocalDate> dateGte) {
            Utils.checkNotNull(dateGte, "dateGte");
            this.dateGte = dateGte;
            return this;
        }


        /**
         * Retrieve transactions with a date
         *         less than or equal to (YYYY-MM-DD).
         */
        public Builder dateLte(LocalDate dateLte) {
            Utils.checkNotNull(dateLte, "dateLte");
            this.dateLte = JsonNullable.of(dateLte);
            return this;
        }

        /**
         * Retrieve transactions with a date
         *         less than or equal to (YYYY-MM-DD).
         */
        public Builder dateLte(JsonNullable<LocalDate> dateLte) {
            Utils.checkNotNull(dateLte, "dateLte");
            this.dateLte = dateLte;
            return this;
        }


        /**
         * Filter transactions based on processing status.
         *         Multiple values can be passed as a comma-separated list.
         */
        public Builder processingStatusIn(String processingStatusIn) {
            Utils.checkNotNull(processingStatusIn, "processingStatusIn");
            this.processingStatusIn = JsonNullable.of(processingStatusIn);
            return this;
        }

        /**
         * Filter transactions based on processing status.
         *         Multiple values can be passed as a comma-separated list.
         */
        public Builder processingStatusIn(JsonNullable<String> processingStatusIn) {
            Utils.checkNotNull(processingStatusIn, "processingStatusIn");
            this.processingStatusIn = processingStatusIn;
            return this;
        }


        /**
         * Filter transactions by marketplace (e.g., AMAZON, EBAY).
         */
        public Builder marketplace(boolean marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = JsonNullable.of(marketplace);
            return this;
        }

        /**
         * Filter transactions by marketplace (e.g., AMAZON, EBAY).
         */
        public Builder marketplace(JsonNullable<Boolean> marketplace) {
            Utils.checkNotNull(marketplace, "marketplace");
            this.marketplace = marketplace;
            return this;
        }


        /**
         * Filter transactions by exemption status.
         *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
         */
        public Builder exemptIn(String exemptIn) {
            Utils.checkNotNull(exemptIn, "exemptIn");
            this.exemptIn = JsonNullable.of(exemptIn);
            return this;
        }

        /**
         * Filter transactions by exemption status.
         *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
         */
        public Builder exemptIn(JsonNullable<String> exemptIn) {
            Utils.checkNotNull(exemptIn, "exemptIn");
            this.exemptIn = exemptIn;
            return this;
        }


        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * Page size
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Page size
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }


        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(String xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = Optional.ofNullable(xOrganizationId);
            return this;
        }

        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(Optional<String> xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = xOrganizationId;
            return this;
        }

        public GetTransactionsV1TransactionsGetRequest build() {
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetTransactionsV1TransactionsGetRequest(
                stateCode, transactionType, transactionSource,
                searchQuery, country, state,
                addressStatusIn, status, filingId,
                orderBy, dateGte, dateLte,
                processingStatusIn, marketplace, exemptIn,
                page, size, xOrganizationId);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "50",
                        new TypeReference<Optional<Long>>() {});
    }
}
