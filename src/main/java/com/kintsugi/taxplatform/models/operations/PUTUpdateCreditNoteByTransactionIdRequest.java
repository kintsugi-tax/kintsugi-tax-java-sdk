/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.kintsugi.taxplatform.models.components.CreditNoteCreate;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class PUTUpdateCreditNoteByTransactionIdRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=original_transaction_id")
    private String originalTransactionId;


    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=credit_note_id")
    private String creditNoteId;

    /**
     * The unique identifier for the organization making the request
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-organization-id")
    private Optional<String> xOrganizationId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private CreditNoteCreate creditNoteCreate;

    @JsonCreator
    public PUTUpdateCreditNoteByTransactionIdRequest(
            String originalTransactionId,
            String creditNoteId,
            Optional<String> xOrganizationId,
            CreditNoteCreate creditNoteCreate) {
        Utils.checkNotNull(originalTransactionId, "originalTransactionId");
        Utils.checkNotNull(creditNoteId, "creditNoteId");
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        Utils.checkNotNull(creditNoteCreate, "creditNoteCreate");
        this.originalTransactionId = originalTransactionId;
        this.creditNoteId = creditNoteId;
        this.xOrganizationId = xOrganizationId;
        this.creditNoteCreate = creditNoteCreate;
    }
    
    public PUTUpdateCreditNoteByTransactionIdRequest(
            String originalTransactionId,
            String creditNoteId,
            CreditNoteCreate creditNoteCreate) {
        this(originalTransactionId, creditNoteId, Optional.empty(),
            creditNoteCreate);
    }

    @JsonIgnore
    public String originalTransactionId() {
        return originalTransactionId;
    }

    @JsonIgnore
    public String creditNoteId() {
        return creditNoteId;
    }

    /**
     * The unique identifier for the organization making the request
     */
    @JsonIgnore
    public Optional<String> xOrganizationId() {
        return xOrganizationId;
    }

    @JsonIgnore
    public CreditNoteCreate creditNoteCreate() {
        return creditNoteCreate;
    }

    public static Builder builder() {
        return new Builder();
    }


    public PUTUpdateCreditNoteByTransactionIdRequest withOriginalTransactionId(String originalTransactionId) {
        Utils.checkNotNull(originalTransactionId, "originalTransactionId");
        this.originalTransactionId = originalTransactionId;
        return this;
    }

    public PUTUpdateCreditNoteByTransactionIdRequest withCreditNoteId(String creditNoteId) {
        Utils.checkNotNull(creditNoteId, "creditNoteId");
        this.creditNoteId = creditNoteId;
        return this;
    }

    /**
     * The unique identifier for the organization making the request
     */
    public PUTUpdateCreditNoteByTransactionIdRequest withXOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.ofNullable(xOrganizationId);
        return this;
    }


    /**
     * The unique identifier for the organization making the request
     */
    public PUTUpdateCreditNoteByTransactionIdRequest withXOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    public PUTUpdateCreditNoteByTransactionIdRequest withCreditNoteCreate(CreditNoteCreate creditNoteCreate) {
        Utils.checkNotNull(creditNoteCreate, "creditNoteCreate");
        this.creditNoteCreate = creditNoteCreate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PUTUpdateCreditNoteByTransactionIdRequest other = (PUTUpdateCreditNoteByTransactionIdRequest) o;
        return 
            Utils.enhancedDeepEquals(this.originalTransactionId, other.originalTransactionId) &&
            Utils.enhancedDeepEquals(this.creditNoteId, other.creditNoteId) &&
            Utils.enhancedDeepEquals(this.xOrganizationId, other.xOrganizationId) &&
            Utils.enhancedDeepEquals(this.creditNoteCreate, other.creditNoteCreate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            originalTransactionId, creditNoteId, xOrganizationId,
            creditNoteCreate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PUTUpdateCreditNoteByTransactionIdRequest.class,
                "originalTransactionId", originalTransactionId,
                "creditNoteId", creditNoteId,
                "xOrganizationId", xOrganizationId,
                "creditNoteCreate", creditNoteCreate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String originalTransactionId;

        private String creditNoteId;

        private Optional<String> xOrganizationId = Optional.empty();

        private CreditNoteCreate creditNoteCreate;

        private Builder() {
          // force use of static builder() method
        }


        public Builder originalTransactionId(String originalTransactionId) {
            Utils.checkNotNull(originalTransactionId, "originalTransactionId");
            this.originalTransactionId = originalTransactionId;
            return this;
        }


        public Builder creditNoteId(String creditNoteId) {
            Utils.checkNotNull(creditNoteId, "creditNoteId");
            this.creditNoteId = creditNoteId;
            return this;
        }


        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(String xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = Optional.ofNullable(xOrganizationId);
            return this;
        }

        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(Optional<String> xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = xOrganizationId;
            return this;
        }


        public Builder creditNoteCreate(CreditNoteCreate creditNoteCreate) {
            Utils.checkNotNull(creditNoteCreate, "creditNoteCreate");
            this.creditNoteCreate = creditNoteCreate;
            return this;
        }

        public PUTUpdateCreditNoteByTransactionIdRequest build() {

            return new PUTUpdateCreditNoteByTransactionIdRequest(
                originalTransactionId, creditNoteId, xOrganizationId,
                creditNoteCreate);
        }

    }
}
