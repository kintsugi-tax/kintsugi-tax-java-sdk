/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class UpdateProductV1ProductsProductIdPutRequest {
    /**
     * Unique identifier of the product to be updated.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=product_id")
    private String productId;

    /**
     * The unique identifier for the organization making the request
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-organization-id")
    private Optional<String> xOrganizationId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private Product requestBody;

    @JsonCreator
    public UpdateProductV1ProductsProductIdPutRequest(
            String productId,
            Optional<String> xOrganizationId,
            Product requestBody) {
        Utils.checkNotNull(productId, "productId");
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.productId = productId;
        this.xOrganizationId = xOrganizationId;
        this.requestBody = requestBody;
    }
    
    public UpdateProductV1ProductsProductIdPutRequest(
            String productId,
            Product requestBody) {
        this(productId, Optional.empty(), requestBody);
    }

    /**
     * Unique identifier of the product to be updated.
     */
    @JsonIgnore
    public String productId() {
        return productId;
    }

    /**
     * The unique identifier for the organization making the request
     */
    @JsonIgnore
    public Optional<String> xOrganizationId() {
        return xOrganizationId;
    }

    @JsonIgnore
    public Product requestBody() {
        return requestBody;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier of the product to be updated.
     */
    public UpdateProductV1ProductsProductIdPutRequest withProductId(String productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = productId;
        return this;
    }

    /**
     * The unique identifier for the organization making the request
     */
    public UpdateProductV1ProductsProductIdPutRequest withXOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.ofNullable(xOrganizationId);
        return this;
    }


    /**
     * The unique identifier for the organization making the request
     */
    public UpdateProductV1ProductsProductIdPutRequest withXOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    public UpdateProductV1ProductsProductIdPutRequest withRequestBody(Product requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateProductV1ProductsProductIdPutRequest other = (UpdateProductV1ProductsProductIdPutRequest) o;
        return 
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.xOrganizationId, other.xOrganizationId) &&
            Utils.enhancedDeepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            productId, xOrganizationId, requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateProductV1ProductsProductIdPutRequest.class,
                "productId", productId,
                "xOrganizationId", xOrganizationId,
                "requestBody", requestBody);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String productId;

        private Optional<String> xOrganizationId = Optional.empty();

        private Product requestBody;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier of the product to be updated.
         */
        public Builder productId(String productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = productId;
            return this;
        }


        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(String xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = Optional.ofNullable(xOrganizationId);
            return this;
        }

        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(Optional<String> xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = xOrganizationId;
            return this;
        }


        public Builder requestBody(Product requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public UpdateProductV1ProductsProductIdPutRequest build() {

            return new UpdateProductV1ProductsProductIdPutRequest(
                productId, xOrganizationId, requestBody);
        }

    }
}
