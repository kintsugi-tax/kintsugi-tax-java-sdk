/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.kintsugi.taxplatform.models.components.TransactionUpdate;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class UpdateTransactionV1TransactionsTransactionIdPutRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=transaction_id")
    private String transactionId;

    /**
     * The unique identifier for the organization making the request
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-organization-id")
    private Optional<String> xOrganizationId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private TransactionUpdate transactionUpdate;

    @JsonCreator
    public UpdateTransactionV1TransactionsTransactionIdPutRequest(
            String transactionId,
            Optional<String> xOrganizationId,
            TransactionUpdate transactionUpdate) {
        Utils.checkNotNull(transactionId, "transactionId");
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        Utils.checkNotNull(transactionUpdate, "transactionUpdate");
        this.transactionId = transactionId;
        this.xOrganizationId = xOrganizationId;
        this.transactionUpdate = transactionUpdate;
    }
    
    public UpdateTransactionV1TransactionsTransactionIdPutRequest(
            String transactionId,
            TransactionUpdate transactionUpdate) {
        this(transactionId, Optional.empty(), transactionUpdate);
    }

    @JsonIgnore
    public String transactionId() {
        return transactionId;
    }

    /**
     * The unique identifier for the organization making the request
     */
    @JsonIgnore
    public Optional<String> xOrganizationId() {
        return xOrganizationId;
    }

    @JsonIgnore
    public TransactionUpdate transactionUpdate() {
        return transactionUpdate;
    }

    public static Builder builder() {
        return new Builder();
    }


    public UpdateTransactionV1TransactionsTransactionIdPutRequest withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }

    /**
     * The unique identifier for the organization making the request
     */
    public UpdateTransactionV1TransactionsTransactionIdPutRequest withXOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.ofNullable(xOrganizationId);
        return this;
    }


    /**
     * The unique identifier for the organization making the request
     */
    public UpdateTransactionV1TransactionsTransactionIdPutRequest withXOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    public UpdateTransactionV1TransactionsTransactionIdPutRequest withTransactionUpdate(TransactionUpdate transactionUpdate) {
        Utils.checkNotNull(transactionUpdate, "transactionUpdate");
        this.transactionUpdate = transactionUpdate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateTransactionV1TransactionsTransactionIdPutRequest other = (UpdateTransactionV1TransactionsTransactionIdPutRequest) o;
        return 
            Utils.enhancedDeepEquals(this.transactionId, other.transactionId) &&
            Utils.enhancedDeepEquals(this.xOrganizationId, other.xOrganizationId) &&
            Utils.enhancedDeepEquals(this.transactionUpdate, other.transactionUpdate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            transactionId, xOrganizationId, transactionUpdate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateTransactionV1TransactionsTransactionIdPutRequest.class,
                "transactionId", transactionId,
                "xOrganizationId", xOrganizationId,
                "transactionUpdate", transactionUpdate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String transactionId;

        private Optional<String> xOrganizationId = Optional.empty();

        private TransactionUpdate transactionUpdate;

        private Builder() {
          // force use of static builder() method
        }


        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }


        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(String xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = Optional.ofNullable(xOrganizationId);
            return this;
        }

        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(Optional<String> xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = xOrganizationId;
            return this;
        }


        public Builder transactionUpdate(TransactionUpdate transactionUpdate) {
            Utils.checkNotNull(transactionUpdate, "transactionUpdate");
            this.transactionUpdate = transactionUpdate;
            return this;
        }

        public UpdateTransactionV1TransactionsTransactionIdPutRequest build() {

            return new UpdateTransactionV1TransactionsTransactionIdPutRequest(
                transactionId, xOrganizationId, transactionUpdate);
        }

    }
}
