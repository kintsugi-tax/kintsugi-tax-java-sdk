/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.kintsugi.taxplatform.models.components.BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;
import com.kintsugi.taxplatform.utils.SpeakeasyMetadata;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest {
    /**
     * The unique identifier for the exemption to which the attachment will be associated.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=exemption_id")
    private String exemptionId;

    /**
     * The unique identifier for the organization making the request
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-organization-id")
    private Optional<String> xOrganizationId;


    @SpeakeasyMetadata("request:mediaType=multipart/form-data")
    private BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;

    @JsonCreator
    public UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest(
            String exemptionId,
            Optional<String> xOrganizationId,
            BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost) {
        Utils.checkNotNull(exemptionId, "exemptionId");
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        Utils.checkNotNull(bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost, "bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost");
        this.exemptionId = exemptionId;
        this.xOrganizationId = xOrganizationId;
        this.bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost = bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;
    }
    
    public UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest(
            String exemptionId,
            BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost) {
        this(exemptionId, Optional.empty(), bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost);
    }

    /**
     * The unique identifier for the exemption to which the attachment will be associated.
     */
    @JsonIgnore
    public String exemptionId() {
        return exemptionId;
    }

    /**
     * The unique identifier for the organization making the request
     */
    @JsonIgnore
    public Optional<String> xOrganizationId() {
        return xOrganizationId;
    }

    @JsonIgnore
    public BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost() {
        return bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier for the exemption to which the attachment will be associated.
     */
    public UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest withExemptionId(String exemptionId) {
        Utils.checkNotNull(exemptionId, "exemptionId");
        this.exemptionId = exemptionId;
        return this;
    }

    /**
     * The unique identifier for the organization making the request
     */
    public UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest withXOrganizationId(String xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = Optional.ofNullable(xOrganizationId);
        return this;
    }


    /**
     * The unique identifier for the organization making the request
     */
    public UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest withXOrganizationId(Optional<String> xOrganizationId) {
        Utils.checkNotNull(xOrganizationId, "xOrganizationId");
        this.xOrganizationId = xOrganizationId;
        return this;
    }

    public UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest withBodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost(BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost) {
        Utils.checkNotNull(bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost, "bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost");
        this.bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost = bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest other = (UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest) o;
        return 
            Utils.enhancedDeepEquals(this.exemptionId, other.exemptionId) &&
            Utils.enhancedDeepEquals(this.xOrganizationId, other.xOrganizationId) &&
            Utils.enhancedDeepEquals(this.bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost, other.bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            exemptionId, xOrganizationId, bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest.class,
                "exemptionId", exemptionId,
                "xOrganizationId", xOrganizationId,
                "bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost", bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String exemptionId;

        private Optional<String> xOrganizationId = Optional.empty();

        private BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier for the exemption to which the attachment will be associated.
         */
        public Builder exemptionId(String exemptionId) {
            Utils.checkNotNull(exemptionId, "exemptionId");
            this.exemptionId = exemptionId;
            return this;
        }


        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(String xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = Optional.ofNullable(xOrganizationId);
            return this;
        }

        /**
         * The unique identifier for the organization making the request
         */
        public Builder xOrganizationId(Optional<String> xOrganizationId) {
            Utils.checkNotNull(xOrganizationId, "xOrganizationId");
            this.xOrganizationId = xOrganizationId;
            return this;
        }


        public Builder bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost(BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost) {
            Utils.checkNotNull(bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost, "bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost");
            this.bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost = bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;
            return this;
        }

        public UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest build() {

            return new UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest(
                exemptionId, xOrganizationId, bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost);
        }

    }
}
