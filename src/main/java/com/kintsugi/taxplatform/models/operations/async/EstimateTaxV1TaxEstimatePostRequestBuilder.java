/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations.async;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.components.TransactionEstimatePublicRequest;
import com.kintsugi.taxplatform.models.operations.EstimateTaxV1TaxEstimatePostRequest;
import com.kintsugi.taxplatform.operations.EstimateTaxV1TaxEstimatePost;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Boolean;
import java.lang.Exception;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class EstimateTaxV1TaxEstimatePostRequestBuilder {

    private Optional<Boolean> simulateNexusMet = Optional.empty();
    private TransactionEstimatePublicRequest transactionEstimatePublicRequest;
    private final SDKConfiguration sdkConfiguration;

    public EstimateTaxV1TaxEstimatePostRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public EstimateTaxV1TaxEstimatePostRequestBuilder simulateNexusMet(boolean simulateNexusMet) {
        Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
        this.simulateNexusMet = Optional.of(simulateNexusMet);
        return this;
    }

    public EstimateTaxV1TaxEstimatePostRequestBuilder simulateNexusMet(Optional<Boolean> simulateNexusMet) {
        Utils.checkNotNull(simulateNexusMet, "simulateNexusMet");
        this.simulateNexusMet = simulateNexusMet;
        return this;
    }

    public EstimateTaxV1TaxEstimatePostRequestBuilder transactionEstimatePublicRequest(TransactionEstimatePublicRequest transactionEstimatePublicRequest) {
        Utils.checkNotNull(transactionEstimatePublicRequest, "transactionEstimatePublicRequest");
        this.transactionEstimatePublicRequest = transactionEstimatePublicRequest;
        return this;
    }


    private EstimateTaxV1TaxEstimatePostRequest buildRequest() {

        EstimateTaxV1TaxEstimatePostRequest request = new EstimateTaxV1TaxEstimatePostRequest(simulateNexusMet,
            transactionEstimatePublicRequest);

        return request;
    }

    public CompletableFuture<EstimateTaxV1TaxEstimatePostResponse> call() throws Exception {
        
        AsyncRequestOperation<EstimateTaxV1TaxEstimatePostRequest, EstimateTaxV1TaxEstimatePostResponse> operation
              = new EstimateTaxV1TaxEstimatePost.Async(sdkConfiguration);
        EstimateTaxV1TaxEstimatePostRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
