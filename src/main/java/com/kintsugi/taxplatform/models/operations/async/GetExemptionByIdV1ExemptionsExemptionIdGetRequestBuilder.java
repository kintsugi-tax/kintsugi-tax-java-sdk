/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations.async;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.operations.GetExemptionByIdV1ExemptionsExemptionIdGetRequest;
import com.kintsugi.taxplatform.operations.GetExemptionByIdV1ExemptionsExemptionIdGet;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder {

    private String exemptionId;
    private final SDKConfiguration sdkConfiguration;

    public GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public GetExemptionByIdV1ExemptionsExemptionIdGetRequestBuilder exemptionId(String exemptionId) {
        Utils.checkNotNull(exemptionId, "exemptionId");
        this.exemptionId = exemptionId;
        return this;
    }


    private GetExemptionByIdV1ExemptionsExemptionIdGetRequest buildRequest() {

        GetExemptionByIdV1ExemptionsExemptionIdGetRequest request = new GetExemptionByIdV1ExemptionsExemptionIdGetRequest(exemptionId);

        return request;
    }

    public CompletableFuture<GetExemptionByIdV1ExemptionsExemptionIdGetResponse> call() throws Exception {
        
        AsyncRequestOperation<GetExemptionByIdV1ExemptionsExemptionIdGetRequest, GetExemptionByIdV1ExemptionsExemptionIdGetResponse> operation
              = new GetExemptionByIdV1ExemptionsExemptionIdGet.Async(sdkConfiguration);
        GetExemptionByIdV1ExemptionsExemptionIdGetRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
