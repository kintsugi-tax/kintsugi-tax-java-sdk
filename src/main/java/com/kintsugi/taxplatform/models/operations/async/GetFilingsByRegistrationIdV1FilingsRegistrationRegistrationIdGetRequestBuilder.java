/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations.async;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.operations.GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest;
import com.kintsugi.taxplatform.operations.GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGet;
import com.kintsugi.taxplatform.utils.Headers;
import com.kintsugi.taxplatform.utils.LazySingletonValue;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder {

    private String registrationId;
    private Optional<Long> page = Utils.readDefaultOrConstValue(
                            "page",
                            "1",
                            new TypeReference<Optional<Long>>() {});
    private Optional<Long> size = Utils.readDefaultOrConstValue(
                            "size",
                            "50",
                            new TypeReference<Optional<Long>>() {});
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder registrationId(String registrationId) {
        Utils.checkNotNull(registrationId, "registrationId");
        this.registrationId = registrationId;
        return this;
    }
                
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder page(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.of(page);
        return this;
    }

    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder page(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }
                
    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder size(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.of(size);
        return this;
    }

    public GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequestBuilder size(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }


    private GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest buildRequest() {
        if (page == null) {
            page = _SINGLETON_VALUE_Page.value();
        }
        if (size == null) {
            size = _SINGLETON_VALUE_Size.value();
        }

        GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest request = new GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest(registrationId,
            page,
            size);

        return request;
    }

    public CompletableFuture<GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse> call() throws Exception {
        
        AsyncRequestOperation<GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest, GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse> operation
              = new GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGet.Async(sdkConfiguration, _headers);
        GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

    private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
            new LazySingletonValue<>(
                    "page",
                    "1",
                    new TypeReference<Optional<Long>>() {});

    private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Size =
            new LazySingletonValue<>(
                    "size",
                    "50",
                    new TypeReference<Optional<Long>>() {});
}
