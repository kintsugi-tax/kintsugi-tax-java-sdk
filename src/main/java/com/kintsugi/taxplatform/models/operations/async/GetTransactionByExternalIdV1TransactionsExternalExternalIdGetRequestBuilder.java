/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations.async;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest;
import com.kintsugi.taxplatform.operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGet;
import com.kintsugi.taxplatform.utils.Headers;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder {

    private String externalId;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequestBuilder externalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }


    private GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest buildRequest() {

        GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest request = new GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest(externalId);

        return request;
    }

    public CompletableFuture<GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse> call() throws Exception {
        
        AsyncRequestOperation<GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest, GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse> operation
              = new GetTransactionByExternalIdV1TransactionsExternalExternalIdGet.Async(sdkConfiguration, _headers);
        GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
