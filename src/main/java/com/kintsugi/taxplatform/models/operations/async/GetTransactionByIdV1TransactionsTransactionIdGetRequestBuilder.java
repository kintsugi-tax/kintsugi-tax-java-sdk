/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations.async;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.operations.GetTransactionByIdV1TransactionsTransactionIdGetRequest;
import com.kintsugi.taxplatform.operations.GetTransactionByIdV1TransactionsTransactionIdGet;
import com.kintsugi.taxplatform.utils.Headers;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder {

    private String transactionId;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public GetTransactionByIdV1TransactionsTransactionIdGetRequestBuilder transactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }


    private GetTransactionByIdV1TransactionsTransactionIdGetRequest buildRequest() {

        GetTransactionByIdV1TransactionsTransactionIdGetRequest request = new GetTransactionByIdV1TransactionsTransactionIdGetRequest(transactionId);

        return request;
    }

    public CompletableFuture<GetTransactionByIdV1TransactionsTransactionIdGetResponse> call() {
        
        AsyncRequestOperation<GetTransactionByIdV1TransactionsTransactionIdGetRequest, GetTransactionByIdV1TransactionsTransactionIdGetResponse> operation
              = new GetTransactionByIdV1TransactionsTransactionIdGet.Async(sdkConfiguration, _headers);
        GetTransactionByIdV1TransactionsTransactionIdGetRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
