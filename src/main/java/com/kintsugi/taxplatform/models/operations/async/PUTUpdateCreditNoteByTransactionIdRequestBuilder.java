/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations.async;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.components.CreditNoteCreate;
import com.kintsugi.taxplatform.models.operations.PUTUpdateCreditNoteByTransactionIdRequest;
import com.kintsugi.taxplatform.operations.PUTUpdateCreditNoteByTransactionId;
import com.kintsugi.taxplatform.utils.Headers;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class PUTUpdateCreditNoteByTransactionIdRequestBuilder {

    private String originalTransactionId;
    private String creditNoteId;
    private CreditNoteCreate creditNoteCreate;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public PUTUpdateCreditNoteByTransactionIdRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public PUTUpdateCreditNoteByTransactionIdRequestBuilder originalTransactionId(String originalTransactionId) {
        Utils.checkNotNull(originalTransactionId, "originalTransactionId");
        this.originalTransactionId = originalTransactionId;
        return this;
    }

    public PUTUpdateCreditNoteByTransactionIdRequestBuilder creditNoteId(String creditNoteId) {
        Utils.checkNotNull(creditNoteId, "creditNoteId");
        this.creditNoteId = creditNoteId;
        return this;
    }

    public PUTUpdateCreditNoteByTransactionIdRequestBuilder creditNoteCreate(CreditNoteCreate creditNoteCreate) {
        Utils.checkNotNull(creditNoteCreate, "creditNoteCreate");
        this.creditNoteCreate = creditNoteCreate;
        return this;
    }


    private PUTUpdateCreditNoteByTransactionIdRequest buildRequest() {

        PUTUpdateCreditNoteByTransactionIdRequest request = new PUTUpdateCreditNoteByTransactionIdRequest(originalTransactionId,
            creditNoteId,
            creditNoteCreate);

        return request;
    }

    public CompletableFuture<PUTUpdateCreditNoteByTransactionIdResponse> call() {
        
        AsyncRequestOperation<PUTUpdateCreditNoteByTransactionIdRequest, PUTUpdateCreditNoteByTransactionIdResponse> operation
              = new PUTUpdateCreditNoteByTransactionId.Async(sdkConfiguration, _headers);
        PUTUpdateCreditNoteByTransactionIdRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
