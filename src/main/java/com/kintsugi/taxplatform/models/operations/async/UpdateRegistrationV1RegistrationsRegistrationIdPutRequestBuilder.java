/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.models.operations.async;

import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.models.components.RegistrationUpdateAPI;
import com.kintsugi.taxplatform.models.operations.UpdateRegistrationV1RegistrationsRegistrationIdPutRequest;
import com.kintsugi.taxplatform.operations.UpdateRegistrationV1RegistrationsRegistrationIdPut;
import com.kintsugi.taxplatform.utils.Headers;
import com.kintsugi.taxplatform.utils.Utils;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class UpdateRegistrationV1RegistrationsRegistrationIdPutRequestBuilder {

    private String registrationId;
    private RegistrationUpdateAPI registrationUpdateAPI;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public UpdateRegistrationV1RegistrationsRegistrationIdPutRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public UpdateRegistrationV1RegistrationsRegistrationIdPutRequestBuilder registrationId(String registrationId) {
        Utils.checkNotNull(registrationId, "registrationId");
        this.registrationId = registrationId;
        return this;
    }

    public UpdateRegistrationV1RegistrationsRegistrationIdPutRequestBuilder registrationUpdateAPI(RegistrationUpdateAPI registrationUpdateAPI) {
        Utils.checkNotNull(registrationUpdateAPI, "registrationUpdateAPI");
        this.registrationUpdateAPI = registrationUpdateAPI;
        return this;
    }


    private UpdateRegistrationV1RegistrationsRegistrationIdPutRequest buildRequest() {

        UpdateRegistrationV1RegistrationsRegistrationIdPutRequest request = new UpdateRegistrationV1RegistrationsRegistrationIdPutRequest(registrationId,
            registrationUpdateAPI);

        return request;
    }

    public CompletableFuture<UpdateRegistrationV1RegistrationsRegistrationIdPutResponse> call() {
        
        AsyncRequestOperation<UpdateRegistrationV1RegistrationsRegistrationIdPutRequest, UpdateRegistrationV1RegistrationsRegistrationIdPutResponse> operation
              = new UpdateRegistrationV1RegistrationsRegistrationIdPut.Async(sdkConfiguration, _headers);
        UpdateRegistrationV1RegistrationsRegistrationIdPutRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
