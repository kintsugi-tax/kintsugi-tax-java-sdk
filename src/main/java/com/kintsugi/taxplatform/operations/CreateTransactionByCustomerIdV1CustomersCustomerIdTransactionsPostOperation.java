/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.operations;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.SecuritySource;
import com.kintsugi.taxplatform.models.components.TransactionRead;
import com.kintsugi.taxplatform.models.errors.APIException;
import com.kintsugi.taxplatform.models.errors.HTTPValidationError;
import com.kintsugi.taxplatform.models.operations.CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest;
import com.kintsugi.taxplatform.models.operations.CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse;
import com.kintsugi.taxplatform.models.operations.CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostSecurity;
import com.kintsugi.taxplatform.utils.HTTPClient;
import com.kintsugi.taxplatform.utils.HTTPRequest;
import com.kintsugi.taxplatform.utils.Hook.AfterErrorContextImpl;
import com.kintsugi.taxplatform.utils.Hook.AfterSuccessContextImpl;
import com.kintsugi.taxplatform.utils.Hook.BeforeRequestContextImpl;
import com.kintsugi.taxplatform.utils.SerializedBody;
import com.kintsugi.taxplatform.utils.Utils.JsonShape;
import com.kintsugi.taxplatform.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Optional;


public class CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostOperation implements RequestOperation<CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest, CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse> {

    private final SDKConfiguration sdkConfiguration;
    private final String baseUrl;
    private final CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostSecurity security;
    private final SecuritySource securitySource;
    private final HTTPClient client;

    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostOperation(
        SDKConfiguration sdkConfiguration,
        CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostSecurity security) {
        this.sdkConfiguration = sdkConfiguration;
        this.baseUrl = this.sdkConfiguration.serverUrl();
        this.security = security;
        // hooks will be passed method level security only
        this.securitySource = SecuritySource.of(security);
        this.client = this.sdkConfiguration.client();
    }

    private Optional<SecuritySource> securitySource() {
        return Optional.ofNullable(this.securitySource);
    }

    public HttpRequest buildRequest(CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest request) throws Exception {
        String url = Utils.generateURL(
                CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest.class,
                this.baseUrl,
                "/v1/customers/{customer_id}/transactions",
                request, null);
        HTTPRequest req = new HTTPRequest(url, "POST");
        Object convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody serializedRequestBody = Utils.serializeRequestBody(
                convertedRequest, 
                "transactionCreate",
                "json",
                false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(Optional.ofNullable(serializedRequestBody));
        req.addHeader("Accept", "application/json")
                .addHeader("user-agent", SDKConfiguration.USER_AGENT);
        req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        Utils.configureSecurity(req, security);

        return sdkConfiguration.hooks().beforeRequest(
              new BeforeRequestContextImpl(
                  this.sdkConfiguration,
                  this.baseUrl,
                  "create_transaction_by_customer_id_v1_customers__customer_id__transactions_post",
                  java.util.Optional.empty(),
                  securitySource()),
              req.build());
    }

    private HttpResponse<InputStream> onError(HttpResponse<InputStream> response,
                                              Exception error) throws Exception {
        return sdkConfiguration.hooks()
            .afterError(
                new AfterErrorContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "create_transaction_by_customer_id_v1_customers__customer_id__transactions_post",
                    java.util.Optional.empty(),
                    securitySource()),
                Optional.ofNullable(response),
                Optional.ofNullable(error));
    }

    private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
        return sdkConfiguration.hooks()
            .afterSuccess(
                new AfterSuccessContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "create_transaction_by_customer_id_v1_customers__customer_id__transactions_post",
                    java.util.Optional.empty(),
                    securitySource()),
                response);
    }

    @Override
    public HttpResponse<InputStream> doRequest(CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostRequest request) throws Exception {
        HttpRequest r = buildRequest(request);
        HttpResponse<InputStream> httpRes;
        try {
            httpRes = client.send(r);
            if (Utils.statusCodeMatches(httpRes.statusCode(), "422", "4XX", "5XX")) {
                httpRes = onError(httpRes, null);
            } else {
                httpRes = onSuccess(httpRes);
            }
        } catch (Exception e) {
            httpRes = onError(null, e);
        }

        return httpRes;
    }


    @Override
    public CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
        String contentType = response
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse.Builder resBuilder = 
            CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(response.statusCode())
                .rawResponse(response);

        CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse res = resBuilder.build();
        
        if (Utils.statusCodeMatches(response.statusCode(), "200")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                TransactionRead out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                res.withTransactionRead(out);
                return res;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "422")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                HTTPValidationError out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                    out.withRawResponse(response);
                
                throw out;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    response, 
                    response.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(response));
        }
        if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    response, 
                    response.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(response));
        }
        throw new APIException(
            response, 
            response.statusCode(), 
            "Unexpected status code received: " + response.statusCode(), 
            Utils.extractByteArrayFromBody(response));
    }
}
