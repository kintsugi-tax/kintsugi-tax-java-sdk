/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.operations;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.SecuritySource;
import com.kintsugi.taxplatform.models.components.ProductCategories;
import com.kintsugi.taxplatform.models.errors.APIException;
import com.kintsugi.taxplatform.models.errors.HTTPValidationError;
import com.kintsugi.taxplatform.models.operations.GetProductCategoriesV1ProductsCategoriesGetRequest;
import com.kintsugi.taxplatform.models.operations.GetProductCategoriesV1ProductsCategoriesGetResponse;
import com.kintsugi.taxplatform.models.operations.GetProductCategoriesV1ProductsCategoriesGetSecurity;
import com.kintsugi.taxplatform.utils.HTTPClient;
import com.kintsugi.taxplatform.utils.HTTPRequest;
import com.kintsugi.taxplatform.utils.Hook.AfterErrorContextImpl;
import com.kintsugi.taxplatform.utils.Hook.AfterSuccessContextImpl;
import com.kintsugi.taxplatform.utils.Hook.BeforeRequestContextImpl;
import com.kintsugi.taxplatform.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;


public class GetProductCategoriesV1ProductsCategoriesGetOperation implements RequestOperation<GetProductCategoriesV1ProductsCategoriesGetRequest, GetProductCategoriesV1ProductsCategoriesGetResponse> {
    
    private final SDKConfiguration sdkConfiguration;
    private final GetProductCategoriesV1ProductsCategoriesGetSecurity security;

    public GetProductCategoriesV1ProductsCategoriesGetOperation(
            SDKConfiguration sdkConfiguration,
            GetProductCategoriesV1ProductsCategoriesGetSecurity security) {
        this.sdkConfiguration = sdkConfiguration;
        this.security = security;
    }
    
    @Override
    public HttpResponse<InputStream> doRequest(GetProductCategoriesV1ProductsCategoriesGetRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl();
        String url = Utils.generateURL(
                baseUrl,
                "/v1/products/categories/");
        
        HTTPRequest req = new HTTPRequest(url, "GET");
        req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        // hooks will be passed method level security only
        Optional<SecuritySource> hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(req, security);
        HTTPClient client = this.sdkConfiguration.client();
        HttpRequest r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      this.sdkConfiguration,
                      baseUrl,
                      "get_product_categories_v1_products_categories__get", 
                      java.util.Optional.empty(), 
                      hookSecuritySource),
                  req.build());
        HttpResponse<InputStream> httpRes;
        try {
            httpRes = client.send(r);
            if (Utils.statusCodeMatches(httpRes.statusCode(), "422", "4XX", "5XX")) {
                httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            this.sdkConfiguration,
                            baseUrl,
                            "get_product_categories_v1_products_categories__get",
                            java.util.Optional.empty(),
                            hookSecuritySource),
                        Optional.of(httpRes),
                        Optional.empty());
            } else {
                httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            this.sdkConfiguration,
                            baseUrl,
                            "get_product_categories_v1_products_categories__get",
                            java.util.Optional.empty(), 
                            hookSecuritySource),
                         httpRes);
            }
        } catch (Exception e) {
            httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            this.sdkConfiguration,
                            baseUrl,
                            "get_product_categories_v1_products_categories__get",
                            java.util.Optional.empty(),
                            hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(e));
        }
    
        return httpRes;
    }

    @Override
    public GetProductCategoriesV1ProductsCategoriesGetResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
        String contentType = response
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetProductCategoriesV1ProductsCategoriesGetResponse.Builder resBuilder = 
            GetProductCategoriesV1ProductsCategoriesGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(response.statusCode())
                .rawResponse(response);

        GetProductCategoriesV1ProductsCategoriesGetResponse res = resBuilder.build();
        
        if (Utils.statusCodeMatches(response.statusCode(), "200")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                List<ProductCategories> out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                res.withResponseGetProductCategoriesV1ProductsCategoriesGet(out);
                return res;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "422")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                HTTPValidationError out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                    out.withRawResponse(response);
                
                throw out;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    response, 
                    response.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(response));
        }
        if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    response, 
                    response.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(response));
        }
        throw new APIException(
            response, 
            response.statusCode(), 
            "Unexpected status code received: " + response.statusCode(), 
            Utils.extractByteArrayFromBody(response));
    }
}
