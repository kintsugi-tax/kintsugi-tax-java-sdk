/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.kintsugi.taxplatform.operations;

import static com.kintsugi.taxplatform.operations.Operations.RequestOperation;
import static com.kintsugi.taxplatform.operations.Operations.AsyncRequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import com.kintsugi.taxplatform.SDKConfiguration;
import com.kintsugi.taxplatform.SecuritySource;
import com.kintsugi.taxplatform.models.components.PageRegistrationReadWithPassword;
import com.kintsugi.taxplatform.models.errors.APIException;
import com.kintsugi.taxplatform.models.errors.BackendSrcRegistrationsResponsesValidationErrorResponse;
import com.kintsugi.taxplatform.models.errors.ErrorResponse;
import com.kintsugi.taxplatform.models.operations.GetRegistrationsV1RegistrationsGetRequest;
import com.kintsugi.taxplatform.models.operations.GetRegistrationsV1RegistrationsGetResponse;
import com.kintsugi.taxplatform.utils.Blob;
import com.kintsugi.taxplatform.utils.Exceptions;
import com.kintsugi.taxplatform.utils.HTTPClient;
import com.kintsugi.taxplatform.utils.HTTPRequest;
import com.kintsugi.taxplatform.utils.Headers;
import com.kintsugi.taxplatform.utils.Hook.AfterErrorContextImpl;
import com.kintsugi.taxplatform.utils.Hook.AfterSuccessContextImpl;
import com.kintsugi.taxplatform.utils.Hook.BeforeRequestContextImpl;
import com.kintsugi.taxplatform.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.Throwable;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.function.Function;


public class GetRegistrationsV1RegistrationsGet {

    static abstract class Base {
        final SDKConfiguration sdkConfiguration;
        final String baseUrl;
        final SecuritySource securitySource;
        final HTTPClient client;
        final Headers _headers;

        public Base(SDKConfiguration sdkConfiguration, Headers _headers) {
            this.sdkConfiguration = sdkConfiguration;
            this._headers =_headers;
            this.baseUrl = this.sdkConfiguration.serverUrl();
            this.securitySource = this.sdkConfiguration.securitySource();
            this.client = this.sdkConfiguration.client();
        }

        Optional<SecuritySource> securitySource() {
            return Optional.ofNullable(this.securitySource);
        }

        BeforeRequestContextImpl createBeforeRequestContext() {
            return new BeforeRequestContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "get_registrations_v1_registrations_get",
                    java.util.Optional.of(java.util.List.of()),
                    securitySource());
        }

        AfterSuccessContextImpl createAfterSuccessContext() {
            return new AfterSuccessContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "get_registrations_v1_registrations_get",
                    java.util.Optional.of(java.util.List.of()),
                    securitySource());
        }

        AfterErrorContextImpl createAfterErrorContext() {
            return new AfterErrorContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "get_registrations_v1_registrations_get",
                    java.util.Optional.of(java.util.List.of()),
                    securitySource());
        }
        <T>HttpRequest buildRequest(T request, Class<T> klass) throws Exception {
            String url = Utils.generateURL(
                    this.baseUrl,
                    "/v1/registrations");
            HTTPRequest req = new HTTPRequest(url, "GET");
            req.addHeader("Accept", "application/json")
                    .addHeader("user-agent", SDKConfiguration.USER_AGENT);
            _headers.forEach((k, list) -> list.forEach(v -> req.addHeader(k, v)));

            req.addQueryParams(Utils.getQueryParams(
                    klass,
                    request,
                    null));
            Utils.configureSecurity(req, this.sdkConfiguration.securitySource().getSecurity());

            return req.build();
        }
    }

    public static class Sync extends Base
            implements RequestOperation<GetRegistrationsV1RegistrationsGetRequest, GetRegistrationsV1RegistrationsGetResponse> {
        public Sync(SDKConfiguration sdkConfiguration, Headers _headers) {
            super(sdkConfiguration, _headers);
        }

        private HttpRequest onBuildRequest(GetRegistrationsV1RegistrationsGetRequest request) throws Exception {
            HttpRequest req = buildRequest(request, GetRegistrationsV1RegistrationsGetRequest.class);
            return sdkConfiguration.hooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private HttpResponse<InputStream> onError(HttpResponse<InputStream> response, Exception error) throws Exception {
            return sdkConfiguration.hooks().afterError(
                    createAfterErrorContext(),
                    Optional.ofNullable(response),
                    Optional.ofNullable(error));
        }

        private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
            return sdkConfiguration.hooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public HttpResponse<InputStream> doRequest(GetRegistrationsV1RegistrationsGetRequest request) throws Exception {
            HttpRequest r = onBuildRequest(request);
            HttpResponse<InputStream> httpRes;
            try {
                httpRes = client.send(r);
                if (Utils.statusCodeMatches(httpRes.statusCode(), "401", "404", "422", "4XX", "500", "5XX")) {
                    httpRes = onError(httpRes, null);
                } else {
                    httpRes = onSuccess(httpRes);
                }
            } catch (Exception e) {
                httpRes = onError(null, e);
            }

            return httpRes;
        }


        @Override
        public GetRegistrationsV1RegistrationsGetResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            GetRegistrationsV1RegistrationsGetResponse.Builder resBuilder =
                    GetRegistrationsV1RegistrationsGetResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            GetRegistrationsV1RegistrationsGetResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "200")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    PageRegistrationReadWithPassword out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    res.withPageRegistrationReadWithPassword(out);
                    return res;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "401", "404")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    ErrorResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "422")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    BackendSrcRegistrationsResponsesValidationErrorResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "500")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    ErrorResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
                // no content
                throw new APIException(
                        response,
                        response.statusCode(),
                        "API error occurred",
                        Utils.extractByteArrayFromBody(response));
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                // no content
                throw new APIException(
                        response,
                        response.statusCode(),
                        "API error occurred",
                        Utils.extractByteArrayFromBody(response));
            }
            
            throw new APIException(
                    response,
                    response.statusCode(),
                    "Unexpected status code received: " + response.statusCode(),
                    Utils.extractByteArrayFromBody(response));
        }
    }
    public static class Async extends Base
            implements AsyncRequestOperation<GetRegistrationsV1RegistrationsGetRequest, com.kintsugi.taxplatform.models.operations.async.GetRegistrationsV1RegistrationsGetResponse> {

        public Async(SDKConfiguration sdkConfiguration, Headers _headers) {
            super(sdkConfiguration, _headers);
        }

        private CompletableFuture<HttpRequest> onBuildRequest(GetRegistrationsV1RegistrationsGetRequest request) throws Exception {
            HttpRequest req = buildRequest(request, GetRegistrationsV1RegistrationsGetRequest.class);
            return this.sdkConfiguration.asyncHooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private CompletableFuture<HttpResponse<Blob>> onError(HttpResponse<Blob> response, Throwable error) {
            return this.sdkConfiguration.asyncHooks().afterError(createAfterErrorContext(), response, error);
        }

        private CompletableFuture<HttpResponse<Blob>> onSuccess(HttpResponse<Blob> response) {
            return this.sdkConfiguration.asyncHooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public CompletableFuture<HttpResponse<Blob>> doRequest(GetRegistrationsV1RegistrationsGetRequest request) {
            return Exceptions.unchecked(() -> onBuildRequest(request)).get().thenCompose(client::sendAsync)
                    .handle((resp, err) -> {
                        if (err != null) {
                            return onError(null, err);
                        }
                        if (Utils.statusCodeMatches(resp.statusCode(), "401", "404", "422", "4XX", "500", "5XX")) {
                            return onError(resp, null);
                        }
                        return CompletableFuture.completedFuture(resp);
                    })
                    .thenCompose(Function.identity())
                    .thenCompose(this::onSuccess);
        }

        @Override
        public CompletableFuture<com.kintsugi.taxplatform.models.operations.async.GetRegistrationsV1RegistrationsGetResponse> handleResponse(
                HttpResponse<Blob> response) {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            com.kintsugi.taxplatform.models.operations.async.GetRegistrationsV1RegistrationsGetResponse.Builder resBuilder =
                    com.kintsugi.taxplatform.models.operations.async.GetRegistrationsV1RegistrationsGetResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            com.kintsugi.taxplatform.models.operations.async.GetRegistrationsV1RegistrationsGetResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "200")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    return response.body().toByteArray().thenApply(bodyBytes -> {
                        try {
                            PageRegistrationReadWithPassword out = Utils.mapper().readValue(
                                    bodyBytes,
                                    new TypeReference<>() {
                                    });
                            res.withPageRegistrationReadWithPassword(out);
                            return res;
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                    });
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "401", "404")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    return response.body().toByteArray().thenApply(bodyBytes -> {
                        com.kintsugi.taxplatform.models.errors.async.ErrorResponse out;
                        try {
                            out = Utils.mapper().readValue(
                                    bodyBytes,
                                    new TypeReference<>() {
                                    });
                            out.withRawResponse(response);
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                        throw out;
                    });
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "422")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    return response.body().toByteArray().thenApply(bodyBytes -> {
                        com.kintsugi.taxplatform.models.errors.async.BackendSrcRegistrationsResponsesValidationErrorResponse out;
                        try {
                            out = Utils.mapper().readValue(
                                    bodyBytes,
                                    new TypeReference<>() {
                                    });
                            out.withRawResponse(response);
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                        throw out;
                    });
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "500")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    return response.body().toByteArray().thenApply(bodyBytes -> {
                        com.kintsugi.taxplatform.models.errors.async.ErrorResponse out;
                        try {
                            out = Utils.mapper().readValue(
                                    bodyBytes,
                                    new TypeReference<>() {
                                    });
                            out.withRawResponse(response);
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                        throw out;
                    });
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
                // no content
                return Utils.createAsyncApiError(response, "API error occurred");
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                // no content
                return Utils.createAsyncApiError(response, "API error occurred");
            }
            
            return Utils.createAsyncApiError(response, "Unexpected status code received: " + response.statusCode());
        }
    }
}
