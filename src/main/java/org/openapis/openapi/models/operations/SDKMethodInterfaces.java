/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.openapis.openapi.models.components.AddressBase;
import org.openapis.openapi.models.components.BigCommerceTaxEstimationRequest;
import org.openapis.openapi.models.components.BigcommerceConnectRequest;
import org.openapis.openapi.models.components.BigcommerceDeactivateRequest;
import org.openapis.openapi.models.components.BigcommerceTaxCalculation;
import org.openapis.openapi.models.components.BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost;
import org.openapis.openapi.models.components.ChargebeeAddressValidationRequest;
import org.openapis.openapi.models.components.ChargebeeInvoiceRequest;
import org.openapis.openapi.models.components.ChargebeeTaxEstimateRequest;
import org.openapis.openapi.models.components.ChargebeeTaxabilityAddressRequest;
import org.openapis.openapi.models.components.CreditNoteCreate;
import org.openapis.openapi.models.components.CreditNoteRequest;
import org.openapis.openapi.models.components.CustomerCreate;
import org.openapis.openapi.models.components.CustomerUpdate;
import org.openapis.openapi.models.components.ExemptionCreate;
import org.openapis.openapi.models.components.FilingCreate;
import org.openapis.openapi.models.components.MagentoTaxEstimationRequest;
import org.openapis.openapi.models.components.PhysicalNexusCreate;
import org.openapis.openapi.models.components.PhysicalNexusUpdate;
import org.openapis.openapi.models.components.ProductUpdate;
import org.openapis.openapi.models.components.RegistrationUpdateAPI;
import org.openapis.openapi.models.components.TransactionCreate;
import org.openapis.openapi.models.components.TransactionEstimateRequest;
import org.openapis.openapi.models.components.TransactionPublicRequest;
import org.openapis.openapi.models.components.TransactionUpdate;
import org.openapis.openapi.models.components.UpdateFilingTemp;
import org.openapis.openapi.models.components.ValidationAddress;
import org.openapitools.jackson.nullable.JsonNullable;

public class SDKMethodInterfaces {

    public interface MethodCallSearchV1AddressValidationSearchPost {
        SearchV1AddressValidationSearchPostResponse searchV1AddressValidationSearchPost(
            AddressBase request,
            SearchV1AddressValidationSearchPostSecurity security) throws Exception;
    }

    public interface MethodCallSuggestionsV1AddressValidationSuggestionsPost {
        SuggestionsV1AddressValidationSuggestionsPostResponse suggestionsV1AddressValidationSuggestionsPost(
            SuggestionsV1AddressValidationSuggestionsPostSecurity security,
            Optional<String> xOrganizationId,
            ValidationAddress validationAddress) throws Exception;
    }

    public interface MethodCallGetCustomersV1 {
        GetCustomersV1Response getCustomersV1(
            GetCustomersV1Request request,
            GetCustomersV1Security security) throws Exception;
    }

    public interface MethodCallCreateCustomerV1CustomersPost {
        CreateCustomerV1CustomersPostResponse createCustomerV1CustomersPost(
            CreateCustomerV1CustomersPostSecurity security,
            Optional<String> xOrganizationId,
            CustomerCreate customerCreate) throws Exception;
    }

    public interface MethodCallGetCustomerByIdV1CustomersCustomerIdGet {
        GetCustomerByIdV1CustomersCustomerIdGetResponse getCustomerByIdV1CustomersCustomerIdGet(
            GetCustomerByIdV1CustomersCustomerIdGetSecurity security,
            String customerId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallUpdateCustomerV1CustomersCustomerIdPut {
        UpdateCustomerV1CustomersCustomerIdPutResponse updateCustomerV1CustomersCustomerIdPut(
            UpdateCustomerV1CustomersCustomerIdPutSecurity security,
            String customerId,
            Optional<String> xOrganizationId,
            CustomerUpdate customerUpdate) throws Exception;
    }

    public interface MethodCallGetCustomerByExternalIdV1CustomersExternalExternalIdGet {
        GetCustomerByExternalIdV1CustomersExternalExternalIdGetResponse getCustomerByExternalIdV1CustomersExternalExternalIdGet(
            GetCustomerByExternalIdV1CustomersExternalExternalIdGetSecurity security,
            String externalId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallGetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGet {
        GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetResponse getTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGet(
            GetTransactionsByCustomerIdV1CustomersCustomerIdTransactionsGetSecurity security,
            String customerId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallCreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPost {
        CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostResponse createTransactionByCustomerIdV1CustomersCustomerIdTransactionsPost(
            CreateTransactionByCustomerIdV1CustomersCustomerIdTransactionsPostSecurity security,
            String customerId,
            Optional<String> xOrganizationId,
            TransactionCreate transactionCreate) throws Exception;
    }

    public interface MethodCallGetExemptionsV1ExemptionsGet {
        GetExemptionsV1ExemptionsGetResponse getExemptionsV1ExemptionsGet(
            GetExemptionsV1ExemptionsGetRequest request,
            GetExemptionsV1ExemptionsGetSecurity security) throws Exception;
    }

    public interface MethodCallCreateExemptionV1ExemptionsPost {
        CreateExemptionV1ExemptionsPostResponse createExemptionV1ExemptionsPost(
            CreateExemptionV1ExemptionsPostSecurity security,
            Optional<String> xOrganizationId,
            ExemptionCreate exemptionCreate) throws Exception;
    }

    public interface MethodCallGetExemptionByIdV1ExemptionsExemptionIdGet {
        GetExemptionByIdV1ExemptionsExemptionIdGetResponse getExemptionByIdV1ExemptionsExemptionIdGet(
            GetExemptionByIdV1ExemptionsExemptionIdGetSecurity security,
            String exemptionId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost {
        UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostResponse uploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost(
            UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostSecurity security,
            String exemptionId,
            Optional<String> xOrganizationId,
            BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost bodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost) throws Exception;
    }

    public interface MethodCallGetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGet {
        GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetResponse getAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGet(
            GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetSecurity security,
            String exemptionId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallCreateFilingV1FilingsPost {
        CreateFilingV1FilingsPostResponse createFilingV1FilingsPost(
            CreateFilingV1FilingsPostSecurity security,
            Optional<String> xOrganizationId,
            FilingCreate filingCreate) throws Exception;
    }

    public interface MethodCallGetFilingsV1FilingsGet {
        GetFilingsV1FilingsGetResponse getFilingsV1FilingsGet(
            GetFilingsV1FilingsGetRequest request,
            GetFilingsV1FilingsGetSecurity security) throws Exception;
    }

    public interface MethodCallGetFilingByIdV1FilingsFilingIdGet {
        GetFilingByIdV1FilingsFilingIdGetResponse getFilingByIdV1FilingsFilingIdGet(
            GetFilingByIdV1FilingsFilingIdGetSecurity security,
            String filingId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallUpdateFilingV1FilingsFilingIdPut {
        UpdateFilingV1FilingsFilingIdPutResponse updateFilingV1FilingsFilingIdPut(
            UpdateFilingV1FilingsFilingIdPutSecurity security,
            String filingId,
            Optional<String> xOrganizationId,
            JsonNullable<? extends UpdateFilingTemp> updateFilingTemp) throws Exception;
    }

    public interface MethodCallGetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGet {
        GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetResponse getFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGet(
            GetFilingsByRegistrationIdV1FilingsRegistrationRegistrationIdGetSecurity security,
            String registrationId,
            Optional<Long> page,
            Optional<Long> size,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallGetPhysicalNexusV1NexusPhysicalNexusGet {
        GetPhysicalNexusV1NexusPhysicalNexusGetResponse getPhysicalNexusV1NexusPhysicalNexusGet(
            GetPhysicalNexusV1NexusPhysicalNexusGetRequest request,
            GetPhysicalNexusV1NexusPhysicalNexusGetSecurity security) throws Exception;
    }

    public interface MethodCallCreatePhysicalNexusV1NexusPhysicalNexusPost {
        CreatePhysicalNexusV1NexusPhysicalNexusPostResponse createPhysicalNexusV1NexusPhysicalNexusPost(
            CreatePhysicalNexusV1NexusPhysicalNexusPostSecurity security,
            Optional<String> xOrganizationId,
            PhysicalNexusCreate physicalNexusCreate) throws Exception;
    }

    public interface MethodCallUpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPut {
        UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutResponse updatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPut(
            UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutSecurity security,
            String physicalNexusId,
            Optional<String> xOrganizationId,
            PhysicalNexusUpdate physicalNexusUpdate) throws Exception;
    }

    public interface MethodCallDeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDelete {
        DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteResponse deletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDelete(
            DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteSecurity security,
            String physicalNexusId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallGetNexusForOrgV1NexusGet {
        GetNexusForOrgV1NexusGetResponse getNexusForOrgV1NexusGet(
            GetNexusForOrgV1NexusGetRequest request,
            GetNexusForOrgV1NexusGetSecurity security) throws Exception;
    }

    public interface MethodCallGetProductByIdV1ProductsProductIdGet {
        GetProductByIdV1ProductsProductIdGetResponse getProductByIdV1ProductsProductIdGet(
            GetProductByIdV1ProductsProductIdGetSecurity security,
            String productId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallUpdateProductV1ProductsProductIdPut {
        UpdateProductV1ProductsProductIdPutResponse updateProductV1ProductsProductIdPut(
            UpdateProductV1ProductsProductIdPutSecurity security,
            String productId,
            Optional<String> xOrganizationId,
            ProductUpdate productUpdate) throws Exception;
    }

    public interface MethodCallGetRegistrationsV1RegistrationsGet {
        GetRegistrationsV1RegistrationsGetResponse getRegistrationsV1RegistrationsGet(
            GetRegistrationsV1RegistrationsGetRequest request,
            GetRegistrationsV1RegistrationsGetSecurity security) throws Exception;
    }

    public interface MethodCallCreateRegistrationV1RegistrationsPost {
        CreateRegistrationV1RegistrationsPostResponse createRegistrationV1RegistrationsPost(
            CreateRegistrationV1RegistrationsPostSecurity security,
            Optional<String> xOrganizationId,
            CreateRegistration requestBody) throws Exception;
    }

    public interface MethodCallGetRegistrationByIdV1RegistrationsRegistrationIdGet {
        GetRegistrationByIdV1RegistrationsRegistrationIdGetResponse getRegistrationByIdV1RegistrationsRegistrationIdGet(
            GetRegistrationByIdV1RegistrationsRegistrationIdGetSecurity security,
            String registrationId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallUpdateRegistrationV1RegistrationsRegistrationIdPut {
        UpdateRegistrationV1RegistrationsRegistrationIdPutResponse updateRegistrationV1RegistrationsRegistrationIdPut(
            UpdateRegistrationV1RegistrationsRegistrationIdPutSecurity security,
            String registrationId,
            Optional<String> xOrganizationId,
            RegistrationUpdateAPI registrationUpdateAPI) throws Exception;
    }

    public interface MethodCallGetTransactionsV1TransactionsGet {
        GetTransactionsV1TransactionsGetResponse getTransactionsV1TransactionsGet(
            GetTransactionsV1TransactionsGetRequest request,
            GetTransactionsV1TransactionsGetSecurity security) throws Exception;
    }

    public interface MethodCallCreateTransactionV1TransactionsPost {
        CreateTransactionV1TransactionsPostResponse createTransactionV1TransactionsPost(
            CreateTransactionV1TransactionsPostSecurity security,
            Optional<String> xOrganizationId,
            TransactionPublicRequest transactionPublicRequest) throws Exception;
    }

    public interface MethodCallGetTransactionByExternalIdV1TransactionsExternalExternalIdGet {
        GetTransactionByExternalIdV1TransactionsExternalExternalIdGetResponse getTransactionByExternalIdV1TransactionsExternalExternalIdGet(
            GetTransactionByExternalIdV1TransactionsExternalExternalIdGetSecurity security,
            String externalId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallUpdateTransactionV1TransactionsTransactionIdPut {
        UpdateTransactionV1TransactionsTransactionIdPutResponse updateTransactionV1TransactionsTransactionIdPut(
            UpdateTransactionV1TransactionsTransactionIdPutSecurity security,
            String transactionId,
            Optional<String> xOrganizationId,
            TransactionUpdate transactionUpdate) throws Exception;
    }

    public interface MethodCallGetTransactionByIdV1TransactionsTransactionIdGet {
        GetTransactionByIdV1TransactionsTransactionIdGetResponse getTransactionByIdV1TransactionsTransactionIdGet(
            GetTransactionByIdV1TransactionsTransactionIdGetSecurity security,
            String transactionId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallGetTransactionsByFilingIdV1TransactionsFilingsFilingIdGet {
        GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetResponse getTransactionsByFilingIdV1TransactionsFilingsFilingIdGet(
            GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetSecurity security,
            String filingId,
            Optional<String> xOrganizationId) throws Exception;
    }

    public interface MethodCallCreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPost {
        CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostResponse createCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPost(
            CreateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesPostSecurity security,
            String originalTransactionId,
            Optional<String> xOrganizationId,
            CreditNoteCreate creditNoteCreate) throws Exception;
    }

    public interface MethodCallUpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPut {
        UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutResponse updateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPut(
            UpdateCreditNoteByTransactionIdV1TransactionsOriginalTransactionIdCreditNotesCreditNoteIdPutSecurity security,
            String originalTransactionId,
            String creditNoteId,
            Optional<String> xOrganizationId,
            CreditNoteCreate creditNoteCreate) throws Exception;
    }

    public interface MethodCallEstimateTaxV1TaxEstimatePost {
        EstimateTaxV1TaxEstimatePostResponse estimateTaxV1TaxEstimatePost(
            EstimateTaxV1TaxEstimatePostSecurity security,
            Optional<Boolean> simulateNexusMet,
            Optional<String> xOrganizationId,
            TransactionEstimateRequest transactionEstimateRequest) throws Exception;
    }

    public interface MethodCallValidateAddressChargebeeAddressValidatePost {
        ValidateAddressChargebeeAddressValidatePostResponse validateAddressChargebeeAddressValidatePost(
            ChargebeeAddressValidationRequest request) throws Exception;
    }

    public interface MethodCallCheckAddressTaxabilityChargebeeAddressCheckTaxabilityPost {
        CheckAddressTaxabilityChargebeeAddressCheckTaxabilityPostResponse checkAddressTaxabilityChargebeeAddressCheckTaxabilityPost(
            ChargebeeTaxabilityAddressRequest request) throws Exception;
    }

    public interface MethodCallEstimateTaxChargebeeTaxEstimatePost {
        EstimateTaxChargebeeTaxEstimatePostResponse estimateTaxChargebeeTaxEstimatePost(
            ChargebeeTaxEstimateRequest request) throws Exception;
    }

    public interface MethodCallCreateInvoiceChargebeeInvoicesPost {
        CreateInvoiceChargebeeInvoicesPostResponse createInvoiceChargebeeInvoicesPost(
            ChargebeeInvoiceRequest request) throws Exception;
    }

    public interface MethodCallCommitInvoiceChargebeeInvoicesInvoiceIdCommitPost {
        CommitInvoiceChargebeeInvoicesInvoiceIdCommitPostResponse commitInvoiceChargebeeInvoicesInvoiceIdCommitPost(
            String invoiceId) throws Exception;
    }

    public interface MethodCallVoidInvoiceChargebeeInvoicesInvoiceIdVoidPost {
        VoidInvoiceChargebeeInvoicesInvoiceIdVoidPostResponse voidInvoiceChargebeeInvoicesInvoiceIdVoidPost(
            String invoiceId) throws Exception;
    }

    public interface MethodCallCreateCreditNoteChargebeeCreditNotesPost {
        CreateCreditNoteChargebeeCreditNotesPostResponse createCreditNoteChargebeeCreditNotesPost(
            CreditNoteRequest request) throws Exception;
    }

    public interface MethodCallCommitCreditNoteChargebeeCreditNotesCreditNoteIdCommitPost {
        CommitCreditNoteChargebeeCreditNotesCreditNoteIdCommitPostResponse commitCreditNoteChargebeeCreditNotesCreditNoteIdCommitPost(
            String creditNoteId) throws Exception;
    }

    public interface MethodCallVoidCreditNoteChargebeeCreditNotesCreditNoteIdVoidPost {
        VoidCreditNoteChargebeeCreditNotesCreditNoteIdVoidPostResponse voidCreditNoteChargebeeCreditNotesCreditNoteIdVoidPost(
            String creditNoteId) throws Exception;
    }

    public interface MethodCallValidateCredentialsChargebeeCredentialsValidatePost {
        ValidateCredentialsChargebeeCredentialsValidatePostResponse validateCredentialsChargebeeCredentialsValidatePostDirect() throws Exception;
    }

    public interface MethodCallConnectBigcommerceBigcommerceConnectPost {
        ConnectBigcommerceBigcommerceConnectPostResponse connectBigcommerceBigcommerceConnectPost(
            ConnectBigcommerceBigcommerceConnectPostSecurity security,
            Optional<String> xOrganizationId,
            BigcommerceConnectRequest bigcommerceConnectRequest) throws Exception;
    }

    public interface MethodCallEnableTaxCalculationBigcommerceEnableTaxCalculationPost {
        EnableTaxCalculationBigcommerceEnableTaxCalculationPostResponse enableTaxCalculationBigcommerceEnableTaxCalculationPost(
            EnableTaxCalculationBigcommerceEnableTaxCalculationPostSecurity security,
            Optional<String> xOrganizationId,
            BigcommerceTaxCalculation bigcommerceTaxCalculation) throws Exception;
    }

    public interface MethodCallDisableTaxCalculationBigcommerceDisableTaxCalculationPost {
        DisableTaxCalculationBigcommerceDisableTaxCalculationPostResponse disableTaxCalculationBigcommerceDisableTaxCalculationPost(
            DisableTaxCalculationBigcommerceDisableTaxCalculationPostSecurity security,
            Optional<String> xOrganizationId,
            BigcommerceTaxCalculation bigcommerceTaxCalculation) throws Exception;
    }

    public interface MethodCallDeactivateConnectionBigcommerceDeactivatePost {
        DeactivateConnectionBigcommerceDeactivatePostResponse deactivateConnectionBigcommerceDeactivatePost(
            DeactivateConnectionBigcommerceDeactivatePostSecurity security,
            Optional<String> xOrganizationId,
            BigcommerceDeactivateRequest bigcommerceDeactivateRequest) throws Exception;
    }

    public interface MethodCallEstimateTaxBigcommerceEstimatePost {
        EstimateTaxBigcommerceEstimatePostResponse estimateTaxBigcommerceEstimatePost(
            EstimateTaxBigcommerceEstimatePostSecurity security,
            Optional<String> xOrganizationId,
            BigCommerceTaxEstimationRequest bigCommerceTaxEstimationRequest) throws Exception;
    }

    public interface MethodCallCommitTaxBigcommerceCommitPost {
        CommitTaxBigcommerceCommitPostResponse commitTaxBigcommerceCommitPost(
            CommitTaxBigcommerceCommitPostSecurity security,
            Optional<String> xOrganizationId,
            BigCommerceTaxEstimationRequest bigCommerceTaxEstimationRequest) throws Exception;
    }

    public interface MethodCallEstimateTaxMagentoEstimatePost {
        EstimateTaxMagentoEstimatePostResponse estimateTaxMagentoEstimatePost(
            EstimateTaxMagentoEstimatePostSecurity security,
            Optional<String> xOrganizationId,
            MagentoTaxEstimationRequest magentoTaxEstimationRequest) throws Exception;
    }

    public interface MethodCallCommitTaxMagentoCommitPost {
        CommitTaxMagentoCommitPostResponse commitTaxMagentoCommitPost(
            CommitTaxMagentoCommitPostSecurity security,
            Optional<String> xOrganizationId,
            MagentoTaxEstimationRequest magentoTaxEstimationRequest) throws Exception;
    }

    public interface MethodCallRegistrationShopwareRegistrationGet {
        RegistrationShopwareRegistrationGetResponse registrationShopwareRegistrationGet(
            String shopId,
            String shopUrl) throws Exception;
    }

    public interface MethodCallConfirmationShopwareConfirmationPost {
        ConfirmationShopwareConfirmationPostResponse confirmationShopwareConfirmationPost(
            Map<String, Object> request) throws Exception;
    }

    public interface MethodCallActivateShopwareActivatePost {
        ActivateShopwareActivatePostResponse activateShopwareActivatePost(
            Map<String, Object> request) throws Exception;
    }

    public interface MethodCallDeactivateShopwareDeactivatePost {
        DeactivateShopwareDeactivatePostResponse deactivateShopwareDeactivatePost(
            Map<String, Object> request) throws Exception;
    }

    public interface MethodCallUninstallShopwareUninstallPost {
        UninstallShopwareUninstallPostResponse uninstallShopwareUninstallPost(
            Map<String, Object> request) throws Exception;
    }
}
